{
  "id": "969116dd5426f494e354e22ef25e1c71",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "contracts/MintableERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MintableERC20 is ERC20 {\n    // Variables\n    mapping(address => uint) public lastMintTime;\n    uint private interval;\n    address public owner;\n    address private whale1 = 0x12Cb274aAD8251C875c0bf6872b67d9983E53fDd;\n    address private whale2 = 0x3B939FeaD1557C741Ff06492FD0127bd287A421e;\n    address private whale3 = 0xDAC66EDAB6e4fB1f6388d082f4689c2Ed1924554;\n\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        _mint(whale1, 100000000000000000000000);\n        _mint(whale2, 100000000000000000000000);\n        _mint(whale3, 100000000000000000000000);\n\n        owner = msg.sender;\n        interval = 3600;\n    }\n\n    function mintToken() public {\n        require(\n            lastMintTime[msg.sender] == 0 ||\n                block.timestamp > lastMintTime[msg.sender] + interval,\n            \"You need to wait an hour between mints\"\n        );\n        _mint(msg.sender, 100000000000000000000);\n        lastMintTime[msg.sender] = block.timestamp;\n    }\n\n    function canMint(address _address) public view returns (bool) {\n        return\n            lastMintTime[_address] == 0 ||\n            block.timestamp > lastMintTime[_address] + interval;\n    }\n\n    function setInterval(uint _newInterval) public onlyOwner {\n        interval = _newInterval;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n}\n"
      }
    },
    "settings": {
      "evmVersion": "paris",
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.28",
    "long_version": "0.8.28+commit.7893614a.Emscripten.clang",
    "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
          "exportedSymbols": {
            "IERC1155Errors": [
              136
            ],
            "IERC20Errors": [
              41
            ],
            "IERC721Errors": [
              89
            ]
          },
          "id": 137,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "112:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "138:141:0",
                "text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
              },
              "fullyImplemented": true,
              "id": 41,
              "linearizedBaseContracts": [
                41
              ],
              "name": "IERC20Errors",
              "nameLocation": "290:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "309:309:0",
                    "text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
                  },
                  "errorSelector": "e450d38c",
                  "id": 11,
                  "name": "ERC20InsufficientBalance",
                  "nameLocation": "629:24:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 10,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "662:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "654:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "654:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 7,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "678:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "670:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 6,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "670:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 9,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "695:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 11,
                        "src": "687:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 8,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "687:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "653:49:0"
                  },
                  "src": "623:80:0"
                },
                {
                  "documentation": {
                    "id": 12,
                    "nodeType": "StructuredDocumentation",
                    "src": "709:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "96c6fd1e",
                  "id": 16,
                  "name": "ERC20InvalidSender",
                  "nameLocation": "872:18:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 15,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 14,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "899:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 16,
                        "src": "891:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 13,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "891:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "890:16:0"
                  },
                  "src": "866:41:0"
                },
                {
                  "documentation": {
                    "id": 17,
                    "nodeType": "StructuredDocumentation",
                    "src": "913:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "ec442f05",
                  "id": 21,
                  "name": "ERC20InvalidReceiver",
                  "nameLocation": "1083:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 19,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "1112:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 21,
                        "src": "1104:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 18,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1104:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1103:18:0"
                  },
                  "src": "1077:45:0"
                },
                {
                  "documentation": {
                    "id": 22,
                    "nodeType": "StructuredDocumentation",
                    "src": "1128:345:0",
                    "text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
                  },
                  "errorSelector": "fb8f41b2",
                  "id": 30,
                  "name": "ERC20InsufficientAllowance",
                  "nameLocation": "1484:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 29,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 24,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1519:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1511:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 23,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1511:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 26,
                        "mutability": "mutable",
                        "name": "allowance",
                        "nameLocation": "1536:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1528:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 25,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1528:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 28,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "1555:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 30,
                        "src": "1547:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1547:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1510:52:0"
                  },
                  "src": "1478:85:0"
                },
                {
                  "documentation": {
                    "id": 31,
                    "nodeType": "StructuredDocumentation",
                    "src": "1569:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "e602df05",
                  "id": 35,
                  "name": "ERC20InvalidApprover",
                  "nameLocation": "1754:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 34,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 33,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "1783:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 35,
                        "src": "1775:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 32,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1775:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1774:18:0"
                  },
                  "src": "1748:45:0"
                },
                {
                  "documentation": {
                    "id": 36,
                    "nodeType": "StructuredDocumentation",
                    "src": "1799:195:0",
                    "text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "94280d62",
                  "id": 40,
                  "name": "ERC20InvalidSpender",
                  "nameLocation": "2005:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 39,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 38,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2033:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 40,
                        "src": "2025:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 37,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2025:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2024:17:0"
                  },
                  "src": "1999:43:0"
                }
              ],
              "scope": 137,
              "src": "280:1764:0",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC721Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 42,
                "nodeType": "StructuredDocumentation",
                "src": "2046:143:0",
                "text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
              },
              "fullyImplemented": true,
              "id": 89,
              "linearizedBaseContracts": [
                89
              ],
              "name": "IERC721Errors",
              "nameLocation": "2200:13:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 43,
                    "nodeType": "StructuredDocumentation",
                    "src": "2220:219:0",
                    "text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "89c62b64",
                  "id": 47,
                  "name": "ERC721InvalidOwner",
                  "nameLocation": "2450:18:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 46,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 45,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "2477:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 47,
                        "src": "2469:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 44,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2469:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2468:15:0"
                  },
                  "src": "2444:40:0"
                },
                {
                  "documentation": {
                    "id": 48,
                    "nodeType": "StructuredDocumentation",
                    "src": "2490:132:0",
                    "text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "7e273289",
                  "id": 52,
                  "name": "ERC721NonexistentToken",
                  "nameLocation": "2633:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 51,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 50,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2664:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 52,
                        "src": "2656:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 49,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2656:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2655:17:0"
                  },
                  "src": "2627:46:0"
                },
                {
                  "documentation": {
                    "id": 53,
                    "nodeType": "StructuredDocumentation",
                    "src": "2679:289:0",
                    "text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "64283d7b",
                  "id": 61,
                  "name": "ERC721IncorrectOwner",
                  "nameLocation": "2979:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 60,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 55,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "3008:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3000:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 54,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3000:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 57,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3024:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3016:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 56,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3016:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 59,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "3041:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 61,
                        "src": "3033:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 58,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3033:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2999:48:0"
                  },
                  "src": "2973:75:0"
                },
                {
                  "documentation": {
                    "id": 62,
                    "nodeType": "StructuredDocumentation",
                    "src": "3054:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "73c6ac6e",
                  "id": 66,
                  "name": "ERC721InvalidSender",
                  "nameLocation": "3217:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 65,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 64,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "3245:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 66,
                        "src": "3237:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 63,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3237:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3236:16:0"
                  },
                  "src": "3211:42:0"
                },
                {
                  "documentation": {
                    "id": 67,
                    "nodeType": "StructuredDocumentation",
                    "src": "3259:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "64a0ae92",
                  "id": 71,
                  "name": "ERC721InvalidReceiver",
                  "nameLocation": "3429:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 69,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "3459:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 71,
                        "src": "3451:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3451:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3450:18:0"
                  },
                  "src": "3423:46:0"
                },
                {
                  "documentation": {
                    "id": 72,
                    "nodeType": "StructuredDocumentation",
                    "src": "3475:247:0",
                    "text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "177e802f",
                  "id": 78,
                  "name": "ERC721InsufficientApproval",
                  "nameLocation": "3733:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 77,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 74,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "3768:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "3760:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 73,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3760:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 76,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3786:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "3778:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 75,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3778:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3759:35:0"
                  },
                  "src": "3727:68:0"
                },
                {
                  "documentation": {
                    "id": 79,
                    "nodeType": "StructuredDocumentation",
                    "src": "3801:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "a9fbf51f",
                  "id": 83,
                  "name": "ERC721InvalidApprover",
                  "nameLocation": "3986:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 82,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 81,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "4016:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 83,
                        "src": "4008:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 80,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4008:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4007:18:0"
                  },
                  "src": "3980:46:0"
                },
                {
                  "documentation": {
                    "id": 84,
                    "nodeType": "StructuredDocumentation",
                    "src": "4032:197:0",
                    "text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "5b08ba18",
                  "id": 88,
                  "name": "ERC721InvalidOperator",
                  "nameLocation": "4240:21:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 87,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 86,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4270:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 88,
                        "src": "4262:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 85,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4262:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4261:18:0"
                  },
                  "src": "4234:46:0"
                }
              ],
              "scope": 137,
              "src": "2190:2092:0",
              "usedErrors": [
                47,
                52,
                61,
                66,
                71,
                78,
                83,
                88
              ],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC1155Errors",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 90,
                "nodeType": "StructuredDocumentation",
                "src": "4284:145:0",
                "text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
              },
              "fullyImplemented": true,
              "id": 136,
              "linearizedBaseContracts": [
                136
              ],
              "name": "IERC1155Errors",
              "nameLocation": "4440:14:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 91,
                    "nodeType": "StructuredDocumentation",
                    "src": "4461:361:0",
                    "text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
                  },
                  "errorSelector": "03dee4c5",
                  "id": 101,
                  "name": "ERC1155InsufficientBalance",
                  "nameLocation": "4833:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 100,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 93,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "4868:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4860:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 92,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4860:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 95,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "4884:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4876:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 94,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4876:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 97,
                        "mutability": "mutable",
                        "name": "needed",
                        "nameLocation": "4901:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4893:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4893:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 99,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4917:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 101,
                        "src": "4909:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 98,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4909:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4859:66:0"
                  },
                  "src": "4827:99:0"
                },
                {
                  "documentation": {
                    "id": 102,
                    "nodeType": "StructuredDocumentation",
                    "src": "4932:152:0",
                    "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                  },
                  "errorSelector": "01a83514",
                  "id": 106,
                  "name": "ERC1155InvalidSender",
                  "nameLocation": "5095:20:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 105,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 104,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "5124:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 106,
                        "src": "5116:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 103,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5116:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5115:16:0"
                  },
                  "src": "5089:43:0"
                },
                {
                  "documentation": {
                    "id": 107,
                    "nodeType": "StructuredDocumentation",
                    "src": "5138:159:0",
                    "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                  },
                  "errorSelector": "57f447ce",
                  "id": 111,
                  "name": "ERC1155InvalidReceiver",
                  "nameLocation": "5308:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 110,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 109,
                        "mutability": "mutable",
                        "name": "receiver",
                        "nameLocation": "5339:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 111,
                        "src": "5331:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 108,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5331:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5330:18:0"
                  },
                  "src": "5302:47:0"
                },
                {
                  "documentation": {
                    "id": 112,
                    "nodeType": "StructuredDocumentation",
                    "src": "5355:256:0",
                    "text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
                  },
                  "errorSelector": "e237d922",
                  "id": 118,
                  "name": "ERC1155MissingApprovalForAll",
                  "nameLocation": "5622:28:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 117,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 114,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "5659:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "5651:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 113,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5651:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 116,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "5677:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 118,
                        "src": "5669:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 115,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5669:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5650:33:0"
                  },
                  "src": "5616:68:0"
                },
                {
                  "documentation": {
                    "id": 119,
                    "nodeType": "StructuredDocumentation",
                    "src": "5690:174:0",
                    "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                  },
                  "errorSelector": "3e31884e",
                  "id": 123,
                  "name": "ERC1155InvalidApprover",
                  "nameLocation": "5875:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 121,
                        "mutability": "mutable",
                        "name": "approver",
                        "nameLocation": "5906:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 123,
                        "src": "5898:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5898:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5897:18:0"
                  },
                  "src": "5869:47:0"
                },
                {
                  "documentation": {
                    "id": 124,
                    "nodeType": "StructuredDocumentation",
                    "src": "5922:197:0",
                    "text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
                  },
                  "errorSelector": "ced3e100",
                  "id": 128,
                  "name": "ERC1155InvalidOperator",
                  "nameLocation": "6130:22:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 127,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 126,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "6161:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 128,
                        "src": "6153:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 125,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6153:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6152:18:0"
                  },
                  "src": "6124:47:0"
                },
                {
                  "documentation": {
                    "id": 129,
                    "nodeType": "StructuredDocumentation",
                    "src": "6177:280:0",
                    "text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
                  },
                  "errorSelector": "5b059991",
                  "id": 135,
                  "name": "ERC1155InvalidArrayLength",
                  "nameLocation": "6468:25:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 134,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 131,
                        "mutability": "mutable",
                        "name": "idsLength",
                        "nameLocation": "6502:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 135,
                        "src": "6494:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 130,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6494:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 133,
                        "mutability": "mutable",
                        "name": "valuesLength",
                        "nameLocation": "6521:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 135,
                        "src": "6513:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 132,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6513:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6493:41:0"
                  },
                  "src": "6462:73:0"
                }
              ],
              "scope": 137,
              "src": "4430:2107:0",
              "usedErrors": [
                101,
                106,
                111,
                118,
                123,
                128,
                135
              ],
              "usedEvents": []
            }
          ],
          "src": "112:6426:0"
        }
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
          "exportedSymbols": {
            "Context": [
              785
            ],
            "ERC20": [
              651
            ],
            "IERC20": [
              729
            ],
            "IERC20Errors": [
              41
            ],
            "IERC20Metadata": [
              755
            ]
          },
          "id": 652,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 138,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "105:24:1"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
              "file": "./IERC20.sol",
              "id": 140,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 730,
              "src": "131:36:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 139,
                    "name": "IERC20",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 729,
                    "src": "139:6:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
              "file": "./extensions/IERC20Metadata.sol",
              "id": 142,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 756,
              "src": "168:63:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 141,
                    "name": "IERC20Metadata",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 755,
                    "src": "176:14:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "../../utils/Context.sol",
              "id": 144,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 786,
              "src": "232:48:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 143,
                    "name": "Context",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 785,
                    "src": "240:7:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
              "file": "../../interfaces/draft-IERC6093.sol",
              "id": 146,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 652,
              "sourceUnit": 137,
              "src": "281:65:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 145,
                    "name": "IERC20Errors",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 41,
                    "src": "289:12:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 148,
                    "name": "Context",
                    "nameLocations": [
                      "1133:7:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 785,
                    "src": "1133:7:1"
                  },
                  "id": 149,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1133:7:1"
                },
                {
                  "baseName": {
                    "id": 150,
                    "name": "IERC20",
                    "nameLocations": [
                      "1142:6:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 729,
                    "src": "1142:6:1"
                  },
                  "id": 151,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1142:6:1"
                },
                {
                  "baseName": {
                    "id": 152,
                    "name": "IERC20Metadata",
                    "nameLocations": [
                      "1150:14:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 755,
                    "src": "1150:14:1"
                  },
                  "id": 153,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1150:14:1"
                },
                {
                  "baseName": {
                    "id": 154,
                    "name": "IERC20Errors",
                    "nameLocations": [
                      "1166:12:1"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 41,
                    "src": "1166:12:1"
                  },
                  "id": 155,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1166:12:1"
                }
              ],
              "canonicalName": "ERC20",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 147,
                "nodeType": "StructuredDocumentation",
                "src": "348:757:1",
                "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
              },
              "fullyImplemented": true,
              "id": 651,
              "linearizedBaseContracts": [
                651,
                41,
                755,
                729,
                785
              ],
              "name": "ERC20",
              "nameLocation": "1124:5:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 159,
                  "mutability": "mutable",
                  "name": "_balances",
                  "nameLocation": "1229:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1185:53:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 158,
                    "keyName": "account",
                    "keyNameLocation": "1201:7:1",
                    "keyType": {
                      "id": 156,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1193:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1185:35:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 157,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1212:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 165,
                  "mutability": "mutable",
                  "name": "_allowances",
                  "nameLocation": "1317:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1245:83:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "typeName": {
                    "id": 164,
                    "keyName": "account",
                    "keyNameLocation": "1261:7:1",
                    "keyType": {
                      "id": 160,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1253:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1245:63:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(address => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 163,
                      "keyName": "spender",
                      "keyNameLocation": "1288:7:1",
                      "keyType": {
                        "id": 161,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1280:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1272:35:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 162,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1299:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 167,
                  "mutability": "mutable",
                  "name": "_totalSupply",
                  "nameLocation": "1351:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1335:28:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 166,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1335:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 169,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1385:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1370:20:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 168,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1370:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 171,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1411:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 651,
                  "src": "1396:22:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 170,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1396:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 187,
                    "nodeType": "Block",
                    "src": "1638:57:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 179,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 169,
                            "src": "1648:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 180,
                            "name": "name_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 174,
                            "src": "1656:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1648:13:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 182,
                        "nodeType": "ExpressionStatement",
                        "src": "1648:13:1"
                      },
                      {
                        "expression": {
                          "id": 185,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 183,
                            "name": "_symbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 171,
                            "src": "1671:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 184,
                            "name": "symbol_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 176,
                            "src": "1681:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1671:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 186,
                        "nodeType": "ExpressionStatement",
                        "src": "1671:17:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 172,
                    "nodeType": "StructuredDocumentation",
                    "src": "1425:152:1",
                    "text": " @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."
                  },
                  "id": 188,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 177,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 174,
                        "mutability": "mutable",
                        "name": "name_",
                        "nameLocation": "1608:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 188,
                        "src": "1594:19:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 173,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1594:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 176,
                        "mutability": "mutable",
                        "name": "symbol_",
                        "nameLocation": "1629:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 188,
                        "src": "1615:21:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 175,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1615:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1593:44:1"
                  },
                  "returnParameters": {
                    "id": 178,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1638:0:1"
                  },
                  "scope": 651,
                  "src": "1582:113:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    742
                  ],
                  "body": {
                    "id": 196,
                    "nodeType": "Block",
                    "src": "1820:29:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 194,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 169,
                          "src": "1837:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 193,
                        "id": 195,
                        "nodeType": "Return",
                        "src": "1830:12:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 189,
                    "nodeType": "StructuredDocumentation",
                    "src": "1701:54:1",
                    "text": " @dev Returns the name of the token."
                  },
                  "functionSelector": "06fdde03",
                  "id": 197,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "1769:4:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 190,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1773:2:1"
                  },
                  "returnParameters": {
                    "id": 193,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 192,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 197,
                        "src": "1805:13:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 191,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1805:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1804:15:1"
                  },
                  "scope": 651,
                  "src": "1760:89:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    748
                  ],
                  "body": {
                    "id": 205,
                    "nodeType": "Block",
                    "src": "2024:31:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 203,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 171,
                          "src": "2041:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 202,
                        "id": 204,
                        "nodeType": "Return",
                        "src": "2034:14:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 198,
                    "nodeType": "StructuredDocumentation",
                    "src": "1855:102:1",
                    "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
                  },
                  "functionSelector": "95d89b41",
                  "id": 206,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "1971:6:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 199,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1977:2:1"
                  },
                  "returnParameters": {
                    "id": 202,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 201,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 206,
                        "src": "2009:13:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 200,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2009:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2008:15:1"
                  },
                  "scope": 651,
                  "src": "1962:93:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    754
                  ],
                  "body": {
                    "id": 214,
                    "nodeType": "Block",
                    "src": "2744:26:1",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "3138",
                          "id": 212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2761:2:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_18_by_1",
                            "typeString": "int_const 18"
                          },
                          "value": "18"
                        },
                        "functionReturnParameters": 211,
                        "id": 213,
                        "nodeType": "Return",
                        "src": "2754:9:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 207,
                    "nodeType": "StructuredDocumentation",
                    "src": "2061:622:1",
                    "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
                  },
                  "functionSelector": "313ce567",
                  "id": 215,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decimals",
                  "nameLocation": "2697:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 208,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2705:2:1"
                  },
                  "returnParameters": {
                    "id": 211,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 210,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 215,
                        "src": "2737:5:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 209,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "2737:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2736:7:1"
                  },
                  "scope": 651,
                  "src": "2688:82:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    678
                  ],
                  "body": {
                    "id": 223,
                    "nodeType": "Block",
                    "src": "2891:36:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 221,
                          "name": "_totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "2908:12:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 220,
                        "id": 222,
                        "nodeType": "Return",
                        "src": "2901:19:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 216,
                    "nodeType": "StructuredDocumentation",
                    "src": "2776:49:1",
                    "text": " @dev See {IERC20-totalSupply}."
                  },
                  "functionSelector": "18160ddd",
                  "id": 224,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "2839:11:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 217,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2850:2:1"
                  },
                  "returnParameters": {
                    "id": 220,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 224,
                        "src": "2882:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 218,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2882:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2881:9:1"
                  },
                  "scope": 651,
                  "src": "2830:97:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    686
                  ],
                  "body": {
                    "id": 236,
                    "nodeType": "Block",
                    "src": "3059:42:1",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 232,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 159,
                            "src": "3076:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 234,
                          "indexExpression": {
                            "id": 233,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "3086:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3076:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 231,
                        "id": 235,
                        "nodeType": "Return",
                        "src": "3069:25:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 225,
                    "nodeType": "StructuredDocumentation",
                    "src": "2933:47:1",
                    "text": " @dev See {IERC20-balanceOf}."
                  },
                  "functionSelector": "70a08231",
                  "id": 237,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "2994:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 228,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 227,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3012:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "3004:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 226,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3004:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3003:17:1"
                  },
                  "returnParameters": {
                    "id": 231,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 230,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "3050:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 229,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3050:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3049:9:1"
                  },
                  "scope": 651,
                  "src": "2985:116:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    696
                  ],
                  "body": {
                    "id": 260,
                    "nodeType": "Block",
                    "src": "3371:103:1",
                    "statements": [
                      {
                        "assignments": [
                          248
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 248,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "3389:5:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 260,
                            "src": "3381:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 247,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3381:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 251,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 249,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "3397:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3397:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3381:28:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 253,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "3429:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 254,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 240,
                              "src": "3436:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 255,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 242,
                              "src": "3440:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 252,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "3419:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3419:27:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 257,
                        "nodeType": "ExpressionStatement",
                        "src": "3419:27:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 258,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3463:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 246,
                        "id": 259,
                        "nodeType": "Return",
                        "src": "3456:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 238,
                    "nodeType": "StructuredDocumentation",
                    "src": "3107:184:1",
                    "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 261,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "3305:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 243,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 240,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3322:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3314:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 239,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3314:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 242,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "3334:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3326:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 241,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3326:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3313:27:1"
                  },
                  "returnParameters": {
                    "id": 246,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 245,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 261,
                        "src": "3365:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 244,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3365:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3364:6:1"
                  },
                  "scope": 651,
                  "src": "3296:178:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    706
                  ],
                  "body": {
                    "id": 277,
                    "nodeType": "Block",
                    "src": "3621:51:1",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 271,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "3638:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 273,
                            "indexExpression": {
                              "id": 272,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 264,
                              "src": "3650:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3638:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 275,
                          "indexExpression": {
                            "id": 274,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 266,
                            "src": "3657:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3638:27:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 270,
                        "id": 276,
                        "nodeType": "Return",
                        "src": "3631:34:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 262,
                    "nodeType": "StructuredDocumentation",
                    "src": "3480:47:1",
                    "text": " @dev See {IERC20-allowance}."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 278,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "3541:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 267,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 264,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "3559:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3551:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 263,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3551:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 266,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "3574:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3566:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 265,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3566:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3550:32:1"
                  },
                  "returnParameters": {
                    "id": 270,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 269,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 278,
                        "src": "3612:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 268,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3612:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3611:9:1"
                  },
                  "scope": 651,
                  "src": "3532:140:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    716
                  ],
                  "body": {
                    "id": 301,
                    "nodeType": "Block",
                    "src": "4058:107:1",
                    "statements": [
                      {
                        "assignments": [
                          289
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 289,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "4076:5:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 301,
                            "src": "4068:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 288,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4068:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 292,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 290,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "4084:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4084:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4068:28:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 294,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 289,
                              "src": "4115:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 295,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 281,
                              "src": "4122:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 296,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "4131:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 293,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              542,
                              602
                            ],
                            "referencedDeclaration": 542,
                            "src": "4106:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4106:31:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 298,
                        "nodeType": "ExpressionStatement",
                        "src": "4106:31:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 299,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4154:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 287,
                        "id": 300,
                        "nodeType": "Return",
                        "src": "4147:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 279,
                    "nodeType": "StructuredDocumentation",
                    "src": "3678:296:1",
                    "text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 302,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "3988:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 281,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "4004:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "3996:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 280,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3996:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 283,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4021:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "4013:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 282,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4013:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3995:32:1"
                  },
                  "returnParameters": {
                    "id": 287,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 286,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "4052:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 285,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4052:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4051:6:1"
                  },
                  "scope": 651,
                  "src": "3979:186:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    728
                  ],
                  "body": {
                    "id": 333,
                    "nodeType": "Block",
                    "src": "4850:151:1",
                    "statements": [
                      {
                        "assignments": [
                          315
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 315,
                            "mutability": "mutable",
                            "name": "spender",
                            "nameLocation": "4868:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 333,
                            "src": "4860:15:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 314,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4860:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 318,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 316,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "4878:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 317,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4878:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4860:30:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 320,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 305,
                              "src": "4916:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 321,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 315,
                              "src": "4922:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 322,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 309,
                              "src": "4931:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 319,
                            "name": "_spendAllowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 650,
                            "src": "4900:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4900:37:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 324,
                        "nodeType": "ExpressionStatement",
                        "src": "4900:37:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 326,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 305,
                              "src": "4957:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 327,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 307,
                              "src": "4963:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 328,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 309,
                              "src": "4967:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 325,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "4947:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 329,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4947:26:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 330,
                        "nodeType": "ExpressionStatement",
                        "src": "4947:26:1"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4990:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 313,
                        "id": 332,
                        "nodeType": "Return",
                        "src": "4983:11:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 303,
                    "nodeType": "StructuredDocumentation",
                    "src": "4171:581:1",
                    "text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
                  },
                  "functionSelector": "23b872dd",
                  "id": 334,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "4766:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 310,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 305,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "4787:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4779:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 304,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4779:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 307,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "4801:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4793:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 306,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4793:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 309,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4813:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4805:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 308,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4805:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4778:41:1"
                  },
                  "returnParameters": {
                    "id": 313,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 312,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 334,
                        "src": "4844:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 311,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4844:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4843:6:1"
                  },
                  "scope": 651,
                  "src": "4757:244:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 380,
                    "nodeType": "Block",
                    "src": "5443:231:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 349,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 344,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 337,
                            "src": "5457:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 347,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5473:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 346,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5465:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 345,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5465:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5465:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5457:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 358,
                        "nodeType": "IfStatement",
                        "src": "5453:86:1",
                        "trueBody": {
                          "id": 357,
                          "nodeType": "Block",
                          "src": "5477:62:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 353,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5525:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 352,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5517:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 351,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5517:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 354,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5517:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 350,
                                  "name": "ERC20InvalidSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "5498:18:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 355,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5498:30:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 356,
                              "nodeType": "RevertStatement",
                              "src": "5491:37:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 359,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 339,
                            "src": "5552:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 362,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5566:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5558:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 360,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5558:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5558:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5552:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 373,
                        "nodeType": "IfStatement",
                        "src": "5548:86:1",
                        "trueBody": {
                          "id": 372,
                          "nodeType": "Block",
                          "src": "5570:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 368,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5620:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 367,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5612:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 366,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5612:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 369,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5612:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 365,
                                  "name": "ERC20InvalidReceiver",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 21,
                                  "src": "5591:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 370,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5591:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 371,
                              "nodeType": "RevertStatement",
                              "src": "5584:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 375,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 337,
                              "src": "5651:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 376,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "5657:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 377,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "5661:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 374,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "5643:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5643:24:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 379,
                        "nodeType": "ExpressionStatement",
                        "src": "5643:24:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 335,
                    "nodeType": "StructuredDocumentation",
                    "src": "5007:362:1",
                    "text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
                  },
                  "id": 381,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transfer",
                  "nameLocation": "5383:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 342,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 337,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5401:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5393:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 336,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5393:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 339,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5415:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5407:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 338,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5407:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "5427:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "5419:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5419:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5392:41:1"
                  },
                  "returnParameters": {
                    "id": 343,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5443:0:1"
                  },
                  "scope": 651,
                  "src": "5374:300:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 457,
                    "nodeType": "Block",
                    "src": "6064:1032:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 391,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 384,
                            "src": "6078:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 394,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6094:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 393,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6086:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 392,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "6086:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 395,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6086:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6078:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 428,
                          "nodeType": "Block",
                          "src": "6252:362:1",
                          "statements": [
                            {
                              "assignments": [
                                403
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 403,
                                  "mutability": "mutable",
                                  "name": "fromBalance",
                                  "nameLocation": "6274:11:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 428,
                                  "src": "6266:19:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 402,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6266:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 407,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 404,
                                  "name": "_balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 159,
                                  "src": "6288:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 406,
                                "indexExpression": {
                                  "id": 405,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 384,
                                  "src": "6298:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6288:15:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6266:37:1"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 410,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 408,
                                  "name": "fromBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 403,
                                  "src": "6321:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 409,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "6335:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6321:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 418,
                              "nodeType": "IfStatement",
                              "src": "6317:115:1",
                              "trueBody": {
                                "id": 417,
                                "nodeType": "Block",
                                "src": "6342:90:1",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [
                                        {
                                          "id": 412,
                                          "name": "from",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 384,
                                          "src": "6392:4:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 413,
                                          "name": "fromBalance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 403,
                                          "src": "6398:11:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "id": 414,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 388,
                                          "src": "6411:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 411,
                                        "name": "ERC20InsufficientBalance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 11,
                                        "src": "6367:24:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
                                          "typeString": "function (address,uint256,uint256) pure returns (error)"
                                        }
                                      },
                                      "id": 415,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "6367:50:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_error",
                                        "typeString": "error"
                                      }
                                    },
                                    "id": 416,
                                    "nodeType": "RevertStatement",
                                    "src": "6360:57:1"
                                  }
                                ]
                              }
                            },
                            {
                              "id": 427,
                              "nodeType": "UncheckedBlock",
                              "src": "6445:159:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 425,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "baseExpression": {
                                        "id": 419,
                                        "name": "_balances",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 159,
                                        "src": "6552:9:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 421,
                                      "indexExpression": {
                                        "id": 420,
                                        "name": "from",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 384,
                                        "src": "6562:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "6552:15:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 424,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 422,
                                        "name": "fromBalance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 403,
                                        "src": "6570:11:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "id": 423,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 388,
                                        "src": "6584:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "6570:19:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6552:37:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 426,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6552:37:1"
                                }
                              ]
                            }
                          ]
                        },
                        "id": 429,
                        "nodeType": "IfStatement",
                        "src": "6074:540:1",
                        "trueBody": {
                          "id": 401,
                          "nodeType": "Block",
                          "src": "6098:148:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 399,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 397,
                                  "name": "_totalSupply",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 167,
                                  "src": "6214:12:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "id": 398,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "6230:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6214:21:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 400,
                              "nodeType": "ExpressionStatement",
                              "src": "6214:21:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 435,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 430,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 386,
                            "src": "6628:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 433,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6642:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 432,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6634:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 431,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "6634:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 434,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6634:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6628:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 449,
                          "nodeType": "Block",
                          "src": "6843:206:1",
                          "statements": [
                            {
                              "id": 448,
                              "nodeType": "UncheckedBlock",
                              "src": "6857:182:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 446,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "baseExpression": {
                                        "id": 442,
                                        "name": "_balances",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 159,
                                        "src": "7002:9:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 444,
                                      "indexExpression": {
                                        "id": 443,
                                        "name": "to",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 386,
                                        "src": "7012:2:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "7002:13:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "id": 445,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 388,
                                      "src": "7019:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "7002:22:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 447,
                                  "nodeType": "ExpressionStatement",
                                  "src": "7002:22:1"
                                }
                              ]
                            }
                          ]
                        },
                        "id": 450,
                        "nodeType": "IfStatement",
                        "src": "6624:425:1",
                        "trueBody": {
                          "id": 441,
                          "nodeType": "Block",
                          "src": "6646:191:1",
                          "statements": [
                            {
                              "id": 440,
                              "nodeType": "UncheckedBlock",
                              "src": "6660:167:1",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 438,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 436,
                                      "name": "_totalSupply",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 167,
                                      "src": "6791:12:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "-=",
                                    "rightHandSide": {
                                      "id": 437,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 388,
                                      "src": "6807:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6791:21:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 439,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6791:21:1"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 452,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 384,
                              "src": "7073:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 453,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 386,
                              "src": "7079:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 454,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 388,
                              "src": "7083:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 451,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 663,
                            "src": "7064:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 455,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7064:25:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 456,
                        "nodeType": "EmitStatement",
                        "src": "7059:30:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 382,
                    "nodeType": "StructuredDocumentation",
                    "src": "5680:304:1",
                    "text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
                  },
                  "id": 458,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_update",
                  "nameLocation": "5998:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 389,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 384,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "6014:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6006:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 383,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6006:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 386,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "6028:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6020:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 385,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6020:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 388,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "6040:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 458,
                        "src": "6032:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 387,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6032:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6005:41:1"
                  },
                  "returnParameters": {
                    "id": 390,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6064:0:1"
                  },
                  "scope": 651,
                  "src": "5989:1107:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 490,
                    "nodeType": "Block",
                    "src": "7495:152:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 466,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 461,
                            "src": "7509:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7528:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 468,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7520:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 467,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7520:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 470,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7520:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "7509:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 480,
                        "nodeType": "IfStatement",
                        "src": "7505:91:1",
                        "trueBody": {
                          "id": 479,
                          "nodeType": "Block",
                          "src": "7532:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 475,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7582:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 474,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "7574:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 473,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "7574:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 476,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "7574:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 472,
                                  "name": "ERC20InvalidReceiver",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 21,
                                  "src": "7553:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 477,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7553:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 478,
                              "nodeType": "RevertStatement",
                              "src": "7546:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 484,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7621:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 483,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7613:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 482,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "7613:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7613:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 486,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 461,
                              "src": "7625:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 487,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 463,
                              "src": "7634:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 481,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "7605:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 488,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7605:35:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 489,
                        "nodeType": "ExpressionStatement",
                        "src": "7605:35:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 459,
                    "nodeType": "StructuredDocumentation",
                    "src": "7102:332:1",
                    "text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
                  },
                  "id": 491,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_mint",
                  "nameLocation": "7448:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 464,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 461,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7462:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 491,
                        "src": "7454:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 460,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7454:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 463,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "7479:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 491,
                        "src": "7471:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 462,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7471:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7453:32:1"
                  },
                  "returnParameters": {
                    "id": 465,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7495:0:1"
                  },
                  "scope": 651,
                  "src": "7439:208:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 523,
                    "nodeType": "Block",
                    "src": "8021:150:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 504,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 499,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 494,
                            "src": "8035:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 502,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8054:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 501,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8046:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 500,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8046:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 503,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8046:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "8035:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 513,
                        "nodeType": "IfStatement",
                        "src": "8031:89:1",
                        "trueBody": {
                          "id": 512,
                          "nodeType": "Block",
                          "src": "8058:62:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 508,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8106:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 507,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "8098:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 506,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "8098:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 509,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "8098:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 505,
                                  "name": "ERC20InvalidSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "8079:18:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 510,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8079:30:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 511,
                              "nodeType": "RevertStatement",
                              "src": "8072:37:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 515,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 494,
                              "src": "8137:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 518,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8154:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 517,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8146:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 516,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8146:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 519,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8146:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 520,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 496,
                              "src": "8158:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 514,
                            "name": "_update",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "8129:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 521,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8129:35:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 522,
                        "nodeType": "ExpressionStatement",
                        "src": "8129:35:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 492,
                    "nodeType": "StructuredDocumentation",
                    "src": "7653:307:1",
                    "text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
                  },
                  "id": 524,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_burn",
                  "nameLocation": "7974:5:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 497,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 494,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "7988:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 524,
                        "src": "7980:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 493,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7980:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 496,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "8005:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 524,
                        "src": "7997:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 495,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7997:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7979:32:1"
                  },
                  "returnParameters": {
                    "id": 498,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8021:0:1"
                  },
                  "scope": 651,
                  "src": "7965:206:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 541,
                    "nodeType": "Block",
                    "src": "8781:54:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 535,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 527,
                              "src": "8800:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 536,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "8807:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 537,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 531,
                              "src": "8816:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "74727565",
                              "id": 538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8823:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 534,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              542,
                              602
                            ],
                            "referencedDeclaration": 602,
                            "src": "8791:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                              "typeString": "function (address,address,uint256,bool)"
                            }
                          },
                          "id": 539,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8791:37:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 540,
                        "nodeType": "ExpressionStatement",
                        "src": "8791:37:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 525,
                    "nodeType": "StructuredDocumentation",
                    "src": "8177:525:1",
                    "text": " @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
                  },
                  "id": 542,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_approve",
                  "nameLocation": "8716:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 532,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 527,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "8733:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8725:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 526,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8725:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 529,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "8748:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8740:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 528,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8740:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 531,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "8765:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 542,
                        "src": "8757:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 530,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8757:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8724:47:1"
                  },
                  "returnParameters": {
                    "id": 533,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8781:0:1"
                  },
                  "scope": 651,
                  "src": "8707:128:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 601,
                    "nodeType": "Block",
                    "src": "9780:334:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 559,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 554,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 545,
                            "src": "9794:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 557,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9811:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 556,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9803:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 555,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9803:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9803:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9794:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 568,
                        "nodeType": "IfStatement",
                        "src": "9790:89:1",
                        "trueBody": {
                          "id": 567,
                          "nodeType": "Block",
                          "src": "9815:64:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 563,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9865:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 562,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "9857:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 561,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "9857:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 564,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "9857:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 560,
                                  "name": "ERC20InvalidApprover",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 35,
                                  "src": "9836:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 565,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9836:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 566,
                              "nodeType": "RevertStatement",
                              "src": "9829:39:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 569,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 547,
                            "src": "9892:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9911:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 571,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9903:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 570,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9903:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 573,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9903:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9892:21:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 583,
                        "nodeType": "IfStatement",
                        "src": "9888:90:1",
                        "trueBody": {
                          "id": 582,
                          "nodeType": "Block",
                          "src": "9915:63:1",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 578,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9964:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 577,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "9956:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 576,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "9956:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 579,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "9956:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 575,
                                  "name": "ERC20InvalidSpender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 40,
                                  "src": "9936:19:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 580,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9936:31:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 581,
                              "nodeType": "RevertStatement",
                              "src": "9929:38:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 590,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 584,
                                "name": "_allowances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 165,
                                "src": "9987:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 587,
                              "indexExpression": {
                                "id": 585,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 545,
                                "src": "9999:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9987:18:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 588,
                            "indexExpression": {
                              "id": 586,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 547,
                              "src": "10006:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9987:27:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 589,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 549,
                            "src": "10017:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9987:35:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 591,
                        "nodeType": "ExpressionStatement",
                        "src": "9987:35:1"
                      },
                      {
                        "condition": {
                          "id": 592,
                          "name": "emitEvent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 551,
                          "src": "10036:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 600,
                        "nodeType": "IfStatement",
                        "src": "10032:76:1",
                        "trueBody": {
                          "id": 599,
                          "nodeType": "Block",
                          "src": "10047:61:1",
                          "statements": [
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 594,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 545,
                                    "src": "10075:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 595,
                                    "name": "spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 547,
                                    "src": "10082:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 596,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 549,
                                    "src": "10091:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 593,
                                  "name": "Approval",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 672,
                                  "src": "10066:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,address,uint256)"
                                  }
                                },
                                "id": 597,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10066:31:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 598,
                              "nodeType": "EmitStatement",
                              "src": "10061:36:1"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 543,
                    "nodeType": "StructuredDocumentation",
                    "src": "8841:836:1",
                    "text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
                  },
                  "id": 602,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_approve",
                  "nameLocation": "9691:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 552,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 545,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "9708:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9700:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 544,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9700:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 547,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "9723:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9715:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 546,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9715:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 549,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "9740:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9732:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 548,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9732:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 551,
                        "mutability": "mutable",
                        "name": "emitEvent",
                        "nameLocation": "9752:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "9747:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 550,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "9747:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9699:63:1"
                  },
                  "returnParameters": {
                    "id": 553,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9780:0:1"
                  },
                  "scope": 651,
                  "src": "9682:432:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 649,
                    "nodeType": "Block",
                    "src": "10485:387:1",
                    "statements": [
                      {
                        "assignments": [
                          613
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 613,
                            "mutability": "mutable",
                            "name": "currentAllowance",
                            "nameLocation": "10503:16:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 649,
                            "src": "10495:24:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 612,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10495:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 618,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 615,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 605,
                              "src": "10532:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 616,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 607,
                              "src": "10539:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 614,
                            "name": "allowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 278,
                            "src": "10522:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address,address) view returns (uint256)"
                            }
                          },
                          "id": 617,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10522:25:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10495:52:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 619,
                            "name": "currentAllowance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 613,
                            "src": "10561:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 622,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "10585:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 621,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "10585:7:1",
                                    "typeDescriptions": {}
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  }
                                ],
                                "id": 620,
                                "name": "type",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967269,
                                "src": "10580:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 623,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10580:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_meta_type_t_uint256",
                                "typeString": "type(uint256)"
                              }
                            },
                            "id": 624,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "10594:3:1",
                            "memberName": "max",
                            "nodeType": "MemberAccess",
                            "src": "10580:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10561:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 648,
                        "nodeType": "IfStatement",
                        "src": "10557:309:1",
                        "trueBody": {
                          "id": 647,
                          "nodeType": "Block",
                          "src": "10599:267:1",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 628,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 626,
                                  "name": "currentAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 613,
                                  "src": "10617:16:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 627,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 609,
                                  "src": "10636:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "10617:24:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 636,
                              "nodeType": "IfStatement",
                              "src": "10613:130:1",
                              "trueBody": {
                                "id": 635,
                                "nodeType": "Block",
                                "src": "10643:100:1",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [
                                        {
                                          "id": 630,
                                          "name": "spender",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 607,
                                          "src": "10695:7:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 631,
                                          "name": "currentAllowance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 613,
                                          "src": "10704:16:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "id": 632,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 609,
                                          "src": "10722:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 629,
                                        "name": "ERC20InsufficientAllowance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 30,
                                        "src": "10668:26:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
                                          "typeString": "function (address,uint256,uint256) pure returns (error)"
                                        }
                                      },
                                      "id": 633,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "10668:60:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_error",
                                        "typeString": "error"
                                      }
                                    },
                                    "id": 634,
                                    "nodeType": "RevertStatement",
                                    "src": "10661:67:1"
                                  }
                                ]
                              }
                            },
                            {
                              "id": 646,
                              "nodeType": "UncheckedBlock",
                              "src": "10756:100:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 638,
                                        "name": "owner",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 605,
                                        "src": "10793:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 639,
                                        "name": "spender",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 607,
                                        "src": "10800:7:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 642,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 640,
                                          "name": "currentAllowance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 613,
                                          "src": "10809:16:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "-",
                                        "rightExpression": {
                                          "id": 641,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 609,
                                          "src": "10828:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "10809:24:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "hexValue": "66616c7365",
                                        "id": 643,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10835:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "false"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      ],
                                      "id": 637,
                                      "name": "_approve",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [
                                        542,
                                        602
                                      ],
                                      "referencedDeclaration": 602,
                                      "src": "10784:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                                        "typeString": "function (address,address,uint256,bool)"
                                      }
                                    },
                                    "id": 644,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "10784:57:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 645,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10784:57:1"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 603,
                    "nodeType": "StructuredDocumentation",
                    "src": "10120:271:1",
                    "text": " @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
                  },
                  "id": 650,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_spendAllowance",
                  "nameLocation": "10405:15:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 610,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 605,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "10429:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10421:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 604,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10421:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 607,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "10444:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10436:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 606,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10436:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 609,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "10461:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 650,
                        "src": "10453:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 608,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10453:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10420:47:1"
                  },
                  "returnParameters": {
                    "id": 611,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10485:0:1"
                  },
                  "scope": 651,
                  "src": "10396:476:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 652,
              "src": "1106:9768:1",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "105:10770:1"
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "id": 2,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
          "exportedSymbols": {
            "IERC20": [
              729
            ]
          },
          "id": 730,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 653,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "106:24:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 654,
                "nodeType": "StructuredDocumentation",
                "src": "132:71:2",
                "text": " @dev Interface of the ERC-20 standard as defined in the ERC."
              },
              "fullyImplemented": false,
              "id": 729,
              "linearizedBaseContracts": [
                729
              ],
              "name": "IERC20",
              "nameLocation": "214:6:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 655,
                    "nodeType": "StructuredDocumentation",
                    "src": "227:158:2",
                    "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                  },
                  "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                  "id": 663,
                  "name": "Transfer",
                  "nameLocation": "396:8:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 662,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 657,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "421:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "405:20:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 656,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "405:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 659,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "443:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "427:18:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 658,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "427:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 661,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "455:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "447:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 660,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "447:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "404:57:2"
                  },
                  "src": "390:72:2"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 664,
                    "nodeType": "StructuredDocumentation",
                    "src": "468:148:2",
                    "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                  },
                  "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                  "id": 672,
                  "name": "Approval",
                  "nameLocation": "627:8:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 671,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 666,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "652:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "636:21:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 665,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "636:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 668,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "675:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "659:23:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 667,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "659:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 670,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "692:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 672,
                        "src": "684:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 669,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "684:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "635:63:2"
                  },
                  "src": "621:78:2"
                },
                {
                  "documentation": {
                    "id": 673,
                    "nodeType": "StructuredDocumentation",
                    "src": "705:65:2",
                    "text": " @dev Returns the value of tokens in existence."
                  },
                  "functionSelector": "18160ddd",
                  "id": 678,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "784:11:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 674,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "795:2:2"
                  },
                  "returnParameters": {
                    "id": 677,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 676,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 678,
                        "src": "821:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 675,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "821:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "820:9:2"
                  },
                  "scope": 729,
                  "src": "775:55:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 679,
                    "nodeType": "StructuredDocumentation",
                    "src": "836:71:2",
                    "text": " @dev Returns the value of tokens owned by `account`."
                  },
                  "functionSelector": "70a08231",
                  "id": 686,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "921:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 682,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 681,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "939:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 686,
                        "src": "931:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 680,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "931:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "930:17:2"
                  },
                  "returnParameters": {
                    "id": 685,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 684,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 686,
                        "src": "971:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 683,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "971:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "970:9:2"
                  },
                  "scope": 729,
                  "src": "912:68:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 687,
                    "nodeType": "StructuredDocumentation",
                    "src": "986:213:2",
                    "text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 696,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "1213:8:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 692,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 689,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1230:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1222:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 688,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1222:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 691,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1242:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1234:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 690,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1234:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1221:27:2"
                  },
                  "returnParameters": {
                    "id": 695,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 694,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 696,
                        "src": "1267:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 693,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1267:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1266:6:2"
                  },
                  "scope": 729,
                  "src": "1204:69:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 697,
                    "nodeType": "StructuredDocumentation",
                    "src": "1279:264:2",
                    "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 706,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "1557:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 702,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 699,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1575:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1567:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 698,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1567:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 701,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1590:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1582:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 700,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1582:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1566:32:2"
                  },
                  "returnParameters": {
                    "id": 705,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 704,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 706,
                        "src": "1622:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 703,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1622:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1621:9:2"
                  },
                  "scope": 729,
                  "src": "1548:83:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 707,
                    "nodeType": "StructuredDocumentation",
                    "src": "1637:667:2",
                    "text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 716,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "2318:7:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 712,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 709,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2334:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2326:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 708,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2326:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 711,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2351:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2343:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 710,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2343:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2325:32:2"
                  },
                  "returnParameters": {
                    "id": 715,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 714,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 716,
                        "src": "2376:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 713,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2376:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2375:6:2"
                  },
                  "scope": 729,
                  "src": "2309:73:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 717,
                    "nodeType": "StructuredDocumentation",
                    "src": "2388:297:2",
                    "text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 728,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "2699:12:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 724,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 719,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2720:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2712:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 718,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2712:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 721,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2734:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2726:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 720,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2726:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 723,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2746:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2738:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 722,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2738:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2711:41:2"
                  },
                  "returnParameters": {
                    "id": 727,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 726,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "2771:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 725,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2771:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2770:6:2"
                  },
                  "scope": 729,
                  "src": "2690:87:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 730,
              "src": "204:2575:2",
              "usedErrors": [],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "106:2674:2"
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "id": 3,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
          "exportedSymbols": {
            "IERC20": [
              729
            ],
            "IERC20Metadata": [
              755
            ]
          },
          "id": 756,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 731,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "125:24:3"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
              "file": "../IERC20.sol",
              "id": 733,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 756,
              "sourceUnit": 730,
              "src": "151:37:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 732,
                    "name": "IERC20",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 729,
                    "src": "159:6:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 735,
                    "name": "IERC20",
                    "nameLocations": [
                      "306:6:3"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 729,
                    "src": "306:6:3"
                  },
                  "id": 736,
                  "nodeType": "InheritanceSpecifier",
                  "src": "306:6:3"
                }
              ],
              "canonicalName": "IERC20Metadata",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 734,
                "nodeType": "StructuredDocumentation",
                "src": "190:87:3",
                "text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
              },
              "fullyImplemented": false,
              "id": 755,
              "linearizedBaseContracts": [
                755,
                729
              ],
              "name": "IERC20Metadata",
              "nameLocation": "288:14:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 737,
                    "nodeType": "StructuredDocumentation",
                    "src": "319:54:3",
                    "text": " @dev Returns the name of the token."
                  },
                  "functionSelector": "06fdde03",
                  "id": 742,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "387:4:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 738,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "391:2:3"
                  },
                  "returnParameters": {
                    "id": 741,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 740,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 742,
                        "src": "417:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 739,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "417:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "416:15:3"
                  },
                  "scope": 755,
                  "src": "378:54:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 743,
                    "nodeType": "StructuredDocumentation",
                    "src": "438:56:3",
                    "text": " @dev Returns the symbol of the token."
                  },
                  "functionSelector": "95d89b41",
                  "id": 748,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "508:6:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 744,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "514:2:3"
                  },
                  "returnParameters": {
                    "id": 747,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 746,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 748,
                        "src": "540:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 745,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "540:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "539:15:3"
                  },
                  "scope": 755,
                  "src": "499:56:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 749,
                    "nodeType": "StructuredDocumentation",
                    "src": "561:65:3",
                    "text": " @dev Returns the decimals places of the token."
                  },
                  "functionSelector": "313ce567",
                  "id": 754,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decimals",
                  "nameLocation": "640:8:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 750,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "648:2:3"
                  },
                  "returnParameters": {
                    "id": 753,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 752,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 754,
                        "src": "674:5:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 751,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "674:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "673:7:3"
                  },
                  "scope": 755,
                  "src": "631:50:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 756,
              "src": "278:405:3",
              "usedErrors": [],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "125:559:3"
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "id": 4,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
          "exportedSymbols": {
            "Context": [
              785
            ]
          },
          "id": 786,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 757,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "101:24:4"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Context",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 758,
                "nodeType": "StructuredDocumentation",
                "src": "127:496:4",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 785,
              "linearizedBaseContracts": [
                785
              ],
              "name": "Context",
              "nameLocation": "642:7:4",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 766,
                    "nodeType": "Block",
                    "src": "718:34:4",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 763,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "735:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "739:6:4",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "735:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 762,
                        "id": 765,
                        "nodeType": "Return",
                        "src": "728:17:4"
                      }
                    ]
                  },
                  "id": 767,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "665:10:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 759,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "675:2:4"
                  },
                  "returnParameters": {
                    "id": 762,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 761,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 767,
                        "src": "709:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 760,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "709:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "708:9:4"
                  },
                  "scope": 785,
                  "src": "656:96:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 775,
                    "nodeType": "Block",
                    "src": "825:32:4",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 772,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "842:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "846:4:4",
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "842:8:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 771,
                        "id": 774,
                        "nodeType": "Return",
                        "src": "835:15:4"
                      }
                    ]
                  },
                  "id": 776,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "767:8:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 768,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "775:2:4"
                  },
                  "returnParameters": {
                    "id": 771,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 770,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 776,
                        "src": "809:14:4",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 769,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "809:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "808:16:4"
                  },
                  "scope": 785,
                  "src": "758:99:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 783,
                    "nodeType": "Block",
                    "src": "935:25:4",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 781,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "952:1:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 780,
                        "id": 782,
                        "nodeType": "Return",
                        "src": "945:8:4"
                      }
                    ]
                  },
                  "id": 784,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_contextSuffixLength",
                  "nameLocation": "872:20:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 777,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "892:2:4"
                  },
                  "returnParameters": {
                    "id": 780,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 779,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 784,
                        "src": "926:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 778,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "926:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "925:9:4"
                  },
                  "scope": 785,
                  "src": "863:97:4",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 786,
              "src": "624:338:4",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "101:862:4"
        }
      },
      "contracts/MintableERC20.sol": {
        "id": 5,
        "ast": {
          "absolutePath": "contracts/MintableERC20.sol",
          "exportedSymbols": {
            "Context": [
              785
            ],
            "ERC20": [
              651
            ],
            "IERC20": [
              729
            ],
            "IERC20Errors": [
              41
            ],
            "IERC20Metadata": [
              755
            ],
            "MintableERC20": [
              929
            ]
          },
          "id": 930,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 787,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:5"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
              "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
              "id": 788,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 930,
              "sourceUnit": 652,
              "src": "58:55:5",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 789,
                    "name": "ERC20",
                    "nameLocations": [
                      "141:5:5"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 651,
                    "src": "141:5:5"
                  },
                  "id": 790,
                  "nodeType": "InheritanceSpecifier",
                  "src": "141:5:5"
                }
              ],
              "canonicalName": "MintableERC20",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 929,
              "linearizedBaseContracts": [
                929,
                651,
                41,
                755,
                729,
                785
              ],
              "name": "MintableERC20",
              "nameLocation": "124:13:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "6aa71d18",
                  "id": 794,
                  "mutability": "mutable",
                  "name": "lastMintTime",
                  "nameLocation": "202:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 929,
                  "src": "170:44:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 793,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 791,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "178:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "170:24:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 792,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "189:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 796,
                  "mutability": "mutable",
                  "name": "interval",
                  "nameLocation": "233:8:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 929,
                  "src": "220:21:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 795,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "220:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "8da5cb5b",
                  "id": 798,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "262:5:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 929,
                  "src": "247:20:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 797,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "247:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 801,
                  "mutability": "mutable",
                  "name": "whale1",
                  "nameLocation": "289:6:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 929,
                  "src": "273:67:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 799,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "273:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": {
                    "hexValue": "307831324362323734614144383235314338373563306266363837326236376439393833453533664464",
                    "id": 800,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "298:42:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "value": "0x12Cb274aAD8251C875c0bf6872b67d9983E53fDd"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 804,
                  "mutability": "mutable",
                  "name": "whale2",
                  "nameLocation": "362:6:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 929,
                  "src": "346:67:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 802,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "346:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": {
                    "hexValue": "307833423933394665614431353537433734314666303634393246443031323762643238374134323165",
                    "id": 803,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "371:42:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "value": "0x3B939FeaD1557C741Ff06492FD0127bd287A421e"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 807,
                  "mutability": "mutable",
                  "name": "whale3",
                  "nameLocation": "435:6:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 929,
                  "src": "419:67:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 805,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "419:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": {
                    "hexValue": "307844414336364544414236653466423166363338386430383266343638396332456431393234353534",
                    "id": 806,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "444:42:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "value": "0xDAC66EDAB6e4fB1f6388d082f4689c2Ed1924554"
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 842,
                    "nodeType": "Block",
                    "src": "593:208:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 819,
                              "name": "whale1",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 801,
                              "src": "609:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "313030303030303030303030303030303030303030303030",
                              "id": 820,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "617:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              },
                              "value": "100000000000000000000000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              }
                            ],
                            "id": 818,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "603:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 821,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "603:39:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 822,
                        "nodeType": "ExpressionStatement",
                        "src": "603:39:5"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 824,
                              "name": "whale2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 804,
                              "src": "658:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "313030303030303030303030303030303030303030303030",
                              "id": 825,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "666:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              },
                              "value": "100000000000000000000000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              }
                            ],
                            "id": 823,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "652:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 826,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "652:39:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 827,
                        "nodeType": "ExpressionStatement",
                        "src": "652:39:5"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 829,
                              "name": "whale3",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 807,
                              "src": "707:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "313030303030303030303030303030303030303030303030",
                              "id": 830,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "715:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              },
                              "value": "100000000000000000000000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000000"
                              }
                            ],
                            "id": 828,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "701:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 831,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "701:39:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 832,
                        "nodeType": "ExpressionStatement",
                        "src": "701:39:5"
                      },
                      {
                        "expression": {
                          "id": 836,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 833,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "751:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 834,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "759:3:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 835,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "763:6:5",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "759:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "751:18:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 837,
                        "nodeType": "ExpressionStatement",
                        "src": "751:18:5"
                      },
                      {
                        "expression": {
                          "id": 840,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 838,
                            "name": "interval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 796,
                            "src": "779:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "33363030",
                            "id": 839,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "790:4:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3600_by_1",
                              "typeString": "int_const 3600"
                            },
                            "value": "3600"
                          },
                          "src": "779:15:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 841,
                        "nodeType": "ExpressionStatement",
                        "src": "779:15:5"
                      }
                    ]
                  },
                  "id": 843,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 814,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 809,
                          "src": "577:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "id": 815,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 811,
                          "src": "584:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 816,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 813,
                        "name": "ERC20",
                        "nameLocations": [
                          "571:5:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 651,
                        "src": "571:5:5"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "571:21:5"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 812,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 809,
                        "mutability": "mutable",
                        "name": "_name",
                        "nameLocation": "528:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 843,
                        "src": "514:19:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 808,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "514:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 811,
                        "mutability": "mutable",
                        "name": "_symbol",
                        "nameLocation": "557:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 843,
                        "src": "543:21:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 810,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "543:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "504:66:5"
                  },
                  "returnParameters": {
                    "id": 817,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "593:0:5"
                  },
                  "scope": 929,
                  "src": "493:308:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 880,
                    "nodeType": "Block",
                    "src": "835:306:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 862,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 852,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "id": 847,
                                    "name": "lastMintTime",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 794,
                                    "src": "866:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 850,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 848,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "879:3:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 849,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "883:6:5",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "879:10:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "866:24:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 851,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "894:1:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "866:29:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 861,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 853,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967292,
                                    "src": "915:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 854,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "921:9:5",
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "915:15:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 860,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "baseExpression": {
                                      "id": 855,
                                      "name": "lastMintTime",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 794,
                                      "src": "933:12:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      }
                                    },
                                    "id": 858,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 856,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967281,
                                        "src": "946:3:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 857,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "950:6:5",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "946:10:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "933:24:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "id": 859,
                                    "name": "interval",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 796,
                                    "src": "960:8:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "933:35:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "915:53:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "866:102:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "596f75206e65656420746f207761697420616e20686f7572206265747765656e206d696e7473",
                              "id": 863,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "982:40:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_22b188f3c154fd21f132dd6187819a8549f822533761a9bc0591bd47e122f9f6",
                                "typeString": "literal_string \"You need to wait an hour between mints\""
                              },
                              "value": "You need to wait an hour between mints"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_22b188f3c154fd21f132dd6187819a8549f822533761a9bc0591bd47e122f9f6",
                                "typeString": "literal_string \"You need to wait an hour between mints\""
                              }
                            ],
                            "id": 846,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "845:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 864,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "845:187:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 865,
                        "nodeType": "ExpressionStatement",
                        "src": "845:187:5"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 867,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1048:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 868,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1052:6:5",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1048:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "313030303030303030303030303030303030303030",
                              "id": 869,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1060:21:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000"
                              },
                              "value": "100000000000000000000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_100000000000000000000_by_1",
                                "typeString": "int_const 100000000000000000000"
                              }
                            ],
                            "id": 866,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 491,
                            "src": "1042:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 870,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1042:40:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 871,
                        "nodeType": "ExpressionStatement",
                        "src": "1042:40:5"
                      },
                      {
                        "expression": {
                          "id": 878,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 872,
                              "name": "lastMintTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 794,
                              "src": "1092:12:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 875,
                            "indexExpression": {
                              "expression": {
                                "id": 873,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1105:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 874,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1109:6:5",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1105:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1092:24:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 876,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967292,
                              "src": "1119:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 877,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1125:9:5",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "1119:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1092:42:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 879,
                        "nodeType": "ExpressionStatement",
                        "src": "1092:42:5"
                      }
                    ]
                  },
                  "functionSelector": "2004ffd9",
                  "id": 881,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mintToken",
                  "nameLocation": "816:9:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 844,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "825:2:5"
                  },
                  "returnParameters": {
                    "id": 845,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "835:0:5"
                  },
                  "scope": 929,
                  "src": "807:334:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 903,
                    "nodeType": "Block",
                    "src": "1209:130:5",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 901,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 892,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 888,
                                "name": "lastMintTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 794,
                                "src": "1238:12:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 890,
                              "indexExpression": {
                                "id": 889,
                                "name": "_address",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 883,
                                "src": "1251:8:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1238:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 891,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1264:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "1238:27:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 900,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 893,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967292,
                                "src": "1281:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 894,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1287:9:5",
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "1281:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 899,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 895,
                                  "name": "lastMintTime",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 794,
                                  "src": "1299:12:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 897,
                                "indexExpression": {
                                  "id": 896,
                                  "name": "_address",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 883,
                                  "src": "1312:8:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1299:22:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "id": 898,
                                "name": "interval",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 796,
                                "src": "1324:8:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1299:33:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1281:51:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "1238:94:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 887,
                        "id": 902,
                        "nodeType": "Return",
                        "src": "1219:113:5"
                      }
                    ]
                  },
                  "functionSelector": "c2ba4744",
                  "id": 904,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "canMint",
                  "nameLocation": "1156:7:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 884,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 883,
                        "mutability": "mutable",
                        "name": "_address",
                        "nameLocation": "1172:8:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 904,
                        "src": "1164:16:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 882,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1164:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1163:18:5"
                  },
                  "returnParameters": {
                    "id": 887,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 886,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 904,
                        "src": "1203:4:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 885,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1203:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1202:6:5"
                  },
                  "scope": 929,
                  "src": "1147:192:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 915,
                    "nodeType": "Block",
                    "src": "1402:40:5",
                    "statements": [
                      {
                        "expression": {
                          "id": 913,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 911,
                            "name": "interval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 796,
                            "src": "1412:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 912,
                            "name": "_newInterval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 906,
                            "src": "1423:12:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1412:23:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 914,
                        "nodeType": "ExpressionStatement",
                        "src": "1412:23:5"
                      }
                    ]
                  },
                  "functionSelector": "22a90082",
                  "id": 916,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 909,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 908,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "1392:9:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 928,
                        "src": "1392:9:5"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1392:9:5"
                    }
                  ],
                  "name": "setInterval",
                  "nameLocation": "1354:11:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 907,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 906,
                        "mutability": "mutable",
                        "name": "_newInterval",
                        "nameLocation": "1371:12:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 916,
                        "src": "1366:17:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 905,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1366:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1365:19:5"
                  },
                  "returnParameters": {
                    "id": 910,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1402:0:5"
                  },
                  "scope": 929,
                  "src": "1345:97:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 927,
                    "nodeType": "Block",
                    "src": "1469:69:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 922,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 919,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "1487:3:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 920,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1491:6:5",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "1487:10:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 921,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 798,
                                "src": "1501:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1487:19:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f74206f776e6572",
                              "id": 923,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1508:11:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
                                "typeString": "literal_string \"Not owner\""
                              },
                              "value": "Not owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
                                "typeString": "literal_string \"Not owner\""
                              }
                            ],
                            "id": 918,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1479:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 924,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1479:41:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 925,
                        "nodeType": "ExpressionStatement",
                        "src": "1479:41:5"
                      },
                      {
                        "id": 926,
                        "nodeType": "PlaceholderStatement",
                        "src": "1530:1:5"
                      }
                    ]
                  },
                  "id": 928,
                  "name": "onlyOwner",
                  "nameLocation": "1457:9:5",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 917,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1466:2:5"
                  },
                  "src": "1448:90:5",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 930,
              "src": "115:1425:5",
              "usedErrors": [
                11,
                16,
                21,
                30,
                35,
                40
              ],
              "usedEvents": [
                663,
                672
              ]
            }
          ],
          "src": "32:1509:5"
        }
      }
    },
    "contracts": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "IERC1155Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC1155InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "idsLength",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "valuesLength",
                  "type": "uint256"
                }
              ],
              "name": "ERC1155InvalidArrayLength",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidOperator",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC1155InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC1155MissingApprovalForAll",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        },
        "IERC20Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        },
        "IERC721Errors": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC721IncorrectOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC721InsufficientApproval",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidOperator",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC721InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ERC721NonexistentToken",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "ERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "IERC20Metadata": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "contracts/MintableERC20.sol": {
        "MintableERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "_name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "_symbol",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allowance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientAllowance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "needed",
                  "type": "uint256"
                }
              ],
              "name": "ERC20InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "approver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidApprover",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidReceiver",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSender",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "ERC20InvalidSpender",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "canMint",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "lastMintTime",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "mintToken",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_newInterval",
                  "type": "uint256"
                }
              ],
              "name": "setInterval",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterval\",\"type\":\"uint256\"}],\"name\":\"setInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintableERC20.sol\":\"MintableERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"contracts/MintableERC20.sol\":{\"keccak256\":\"0xbd09d1f4831f343ec6876ee179ca85da5178038a347f66d93b61badd1400793d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://228867363bd7699affd54baf19fcd2ad771675ba598e599fe2600b60ead62f34\",\"dweb:/ipfs/QmNMxnZVSN7q74XXjnPnhb7vHNqhE4KzLMsDiDZpGZV5AY\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 304/65888 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 7622\n// Code size = 26758 bytes\n\n      : @0 (gas: 1)\n     0: jump @14 if a0 == a1\n      : @1 (gas: 9)\n     3: a3 = a1 << 0x20\n     6: a3 = a3 >> 0x20\n     9: a4 = a0 << 0x20\n    12: a4 = a4 >> 0x20\n    15: a4 = a4 + a2\n    18: a3 = a3 - a4\n    21: a4 = a2 << 0x1\n    24: a4 = -a4\n    26: jump @7 if a4 >=u a3\n      : @2 (gas: 1)\n    29: jump @11 if a0 >=u a1\n      : @3 (gas: 1)\n    32: jump @14 if a2 == 0\n      : @4 (gas: 3)\n    35: a2 = a2 + a0\n    38: a3 = a0\n    40: fallthrough\n      : @5 (gas: 6)\n    41: a4 = u8 [a1]\n    43: a1 = a1 + 0x1\n    46: a5 = a3 + 0x1\n    49: u8 [a3] = a4\n    51: a3 = a5\n    53: jump @5 if a5 != a2\n      : @6 (gas: 1)\n    56: jump @14\n      : @7 (gas: 1)\n    58: jump @14 if a2 == 0\n      : @8 (gas: 3)\n    61: a2 = a2 + a0\n    64: a3 = a0\n    66: fallthrough\n      : @9 (gas: 6)\n    67: a4 = u8 [a1]\n    69: a1 = a1 + 0x1\n    72: a5 = a3 + 0x1\n    75: u8 [a3] = a4\n    77: a3 = a5\n    79: jump @9 if a5 != a2\n      : @10 (gas: 1)\n    82: jump @14\n      : @11 (gas: 1)\n    84: jump @14 if a2 == 0\n      : @12 (gas: 2)\n    87: i32 a3 = a2 + 0xffffffffffffffff\n    90: fallthrough\n      : @13 (gas: 7)\n    91: a4 = a1 + a3\n    94: a4 = u8 [a4]\n    96: a2 = a2 + 0xffffffffffffffff\n    99: a5 = a0 + a3\n   102: u8 [a5] = a4\n   104: i32 a3 = a3 + 0xffffffffffffffff\n   107: jump @13 if a2 != 0\n      : @14 (gas: 1)\n   110: ret\n      : @15 (gas: 2)\n   112: a1 = i32 [0x20138]\n   117: jump @216 if a1 == 0\n      : @16 (gas: 4)\n   121: a0 = 0x30160\n   126: i32 a0 = a0 + 0\n   128: ecalli 9 // 'set_immutable_data'\n   130: jump @216\n      : @17 (gas: 8)\n   133: sp = sp + 0xfffffffffffffff0\n   136: u64 [sp + 0x8] = ra\n   139: u64 [sp] = s0\n   141: a2 = a1\n   143: s0 = a0\n   145: a1 = 0x20\n   148: a0 = a2\n   150: ra = 2, jump @26\n      : @18 [@dyn 1] (gas: 100)\n   155: a1 = u8 [a0 + 0x1]\n   158: a2 = u8 [a0]\n   160: a3 = u8 [a0 + 0x2]\n   163: a4 = u8 [a0 + 0x3]\n   166: a1 = a1 << 0x8\n   169: a1 = a1 | a2\n   172: a3 = a3 << 0x10\n   175: a4 = a4 << 0x18\n   178: a3 = a3 | a4\n   181: a1 = a1 | a3\n   184: a2 = u8 [a0 + 0x5]\n   187: a3 = u8 [a0 + 0x4]\n   190: a4 = u8 [a0 + 0x6]\n   193: a5 = u8 [a0 + 0x7]\n   196: a2 = a2 << 0x8\n   199: a2 = a2 | a3\n   202: a4 = a4 << 0x10\n   205: a5 = a5 << 0x18\n   208: a4 = a4 | a5\n   211: a2 = a2 | a4\n   214: a2 = a2 << 0x20\n   217: t0 = a2 | a1\n   220: a2 = u8 [a0 + 0x9]\n   223: a3 = u8 [a0 + 0x8]\n   226: a4 = u8 [a0 + 0xa]\n   229: a5 = u8 [a0 + 0xb]\n   232: a2 = a2 << 0x8\n   235: a2 = a2 | a3\n   238: a4 = a4 << 0x10\n   241: a5 = a5 << 0x18\n   244: a4 = a4 | a5\n   247: a2 = a2 | a4\n   250: a3 = u8 [a0 + 0xd]\n   253: a4 = u8 [a0 + 0xc]\n   256: a5 = u8 [a0 + 0xe]\n   259: a1 = u8 [a0 + 0xf]\n   262: a3 = a3 << 0x8\n   265: a3 = a3 | a4\n   268: a5 = a5 << 0x10\n   271: a1 = a1 << 0x18\n   274: a1 = a1 | a5\n   277: a1 = a1 | a3\n   280: a1 = a1 << 0x20\n   283: t1 = a1 | a2\n   286: a1 = u8 [a0 + 0x11]\n   289: a3 = u8 [a0 + 0x10]\n   292: a4 = u8 [a0 + 0x12]\n   295: a5 = u8 [a0 + 0x13]\n   298: a1 = a1 << 0x8\n   301: a1 = a1 | a3\n   304: a4 = a4 << 0x10\n   307: a5 = a5 << 0x18\n   310: a4 = a4 | a5\n   313: a1 = a1 | a4\n   316: a3 = u8 [a0 + 0x15]\n   319: a4 = u8 [a0 + 0x14]\n   322: a5 = u8 [a0 + 0x16]\n   325: a2 = u8 [a0 + 0x17]\n   328: a3 = a3 << 0x8\n   331: a3 = a3 | a4\n   334: a5 = a5 << 0x10\n   337: a2 = a2 << 0x18\n   340: a2 = a2 | a5\n   343: a2 = a2 | a3\n   346: a2 = a2 << 0x20\n   349: a3 = a2 | a1\n   352: a1 = u8 [a0 + 0x19]\n   355: a2 = u8 [a0 + 0x18]\n   358: a4 = u8 [a0 + 0x1a]\n   361: a5 = u8 [a0 + 0x1b]\n   364: a1 = a1 << 0x8\n   367: a1 = a1 | a2\n   370: a4 = a4 << 0x10\n   373: a5 = a5 << 0x18\n   376: a4 = a4 | a5\n   379: a1 = a1 | a4\n   382: a2 = u8 [a0 + 0x1d]\n   385: a4 = u8 [a0 + 0x1c]\n   388: a5 = u8 [a0 + 0x1e]\n   391: a0 = u8 [a0 + 0x1f]\n   394: a2 = a2 << 0x8\n   397: a2 = a2 | a4\n   400: a5 = a5 << 0x10\n   403: a0 = a0 << 0x18\n   406: a0 = a0 | a5\n   409: a0 = a0 | a2\n   412: a0 = a0 << 0x20\n   415: a0 = a0 | a1\n   418: a0 = reverse a0\n   420: a1 = reverse a3\n   422: a2 = reverse t1\n   424: a3 = reverse t0\n   426: u64 [s0 + 0x18] = a3\n   429: u64 [s0 + 0x10] = a2\n   432: u64 [s0 + 0x8] = a1\n   435: u64 [s0] = a0\n   437: ra = u64 [sp + 0x8]\n   440: s0 = u64 [sp]\n   442: sp = sp + 0x10\n   445: ret\n      : @19 (gas: 12)\n   447: sp = sp + 0xffffffffffffffd8\n   450: u64 [sp + 0x20] = ra\n   453: u64 [sp + 0x18] = s0\n   456: u64 [sp + 0x10] = s1\n   459: a2 = u64 [a1]\n   461: u64 [sp + 0x8] = a2\n   464: a2 = u64 [a1 + 0x8]\n   467: u64 [sp] = a2\n   469: s0 = u64 [a1 + 0x10]\n   472: s1 = u64 [a1 + 0x18]\n   475: a1 = 0x20\n   478: ra = 4, jump @26\n      : @20 [@dyn 2] (gas: 71)\n   483: a1 = reverse s1\n   485: a2 = reverse s0\n   487: a3 = u64 [sp]\n   489: a3 = reverse a3\n   491: a4 = u64 [sp + 0x8]\n   494: a4 = reverse a4\n   496: u8 [a0 + 0x18] = a4\n   499: u8 [a0 + 0x10] = a3\n   502: u8 [a0 + 0x8] = a2\n   505: u8 [a0] = a1\n   507: a5 = a4 >> 0x38\n   510: u8 [a0 + 0x1f] = a5\n   513: a5 = a4 >> 0x30\n   516: u8 [a0 + 0x1e] = a5\n   519: a5 = a4 >> 0x28\n   522: u8 [a0 + 0x1d] = a5\n   525: a5 = a4 >> 0x20\n   528: u8 [a0 + 0x1c] = a5\n   531: a5 = a4 >> 0x18\n   534: u8 [a0 + 0x1b] = a5\n   537: a5 = a4 >> 0x10\n   540: u8 [a0 + 0x1a] = a5\n   543: a4 = a4 >> 0x8\n   546: u8 [a0 + 0x19] = a4\n   549: a4 = a3 >> 0x38\n   552: u8 [a0 + 0x17] = a4\n   555: a4 = a3 >> 0x30\n   558: u8 [a0 + 0x16] = a4\n   561: a4 = a3 >> 0x28\n   564: u8 [a0 + 0x15] = a4\n   567: a4 = a3 >> 0x20\n   570: u8 [a0 + 0x14] = a4\n   573: a4 = a3 >> 0x18\n   576: u8 [a0 + 0x13] = a4\n   579: a4 = a3 >> 0x10\n   582: u8 [a0 + 0x12] = a4\n   585: a3 = a3 >> 0x8\n   588: u8 [a0 + 0x11] = a3\n   591: a3 = a2 >> 0x38\n   594: u8 [a0 + 0xf] = a3\n   597: a3 = a2 >> 0x30\n   600: u8 [a0 + 0xe] = a3\n   603: a3 = a2 >> 0x28\n   606: u8 [a0 + 0xd] = a3\n   609: a3 = a2 >> 0x20\n   612: u8 [a0 + 0xc] = a3\n   615: a3 = a2 >> 0x18\n   618: u8 [a0 + 0xb] = a3\n   621: a3 = a2 >> 0x10\n   624: u8 [a0 + 0xa] = a3\n   627: a2 = a2 >> 0x8\n   630: u8 [a0 + 0x9] = a2\n   633: a2 = a1 >> 0x38\n   636: u8 [a0 + 0x7] = a2\n   639: a2 = a1 >> 0x30\n   642: u8 [a0 + 0x6] = a2\n   645: a2 = a1 >> 0x28\n   648: u8 [a0 + 0x5] = a2\n   651: a2 = a1 >> 0x20\n   654: u8 [a0 + 0x4] = a2\n   657: a2 = a1 >> 0x18\n   660: u8 [a0 + 0x3] = a2\n   663: a2 = a1 >> 0x10\n   666: u8 [a0 + 0x2] = a2\n   669: a1 = a1 >> 0x8\n   672: u8 [a0 + 0x1] = a1\n   675: ra = u64 [sp + 0x20]\n   678: s0 = u64 [sp + 0x18]\n   681: s1 = u64 [sp + 0x10]\n   684: sp = sp + 0x28\n   687: ret\n      : @21 (gas: 48)\n   689: sp = sp + 0xffffffffffffffa0\n   692: u64 [sp + 0x58] = ra\n   695: u64 [sp + 0x50] = s0\n   698: u64 [sp + 0x48] = s1\n   701: s0 = sp + 0x60\n   704: sp = sp & 0xffffffffffffffe0\n   707: s1 = a0\n   709: a0 = u64 [a1 + 0x18]\n   712: a2 = u64 [a1 + 0x10]\n   715: a3 = u64 [a1 + 0x8]\n   718: a1 = u64 [a1]\n   720: a0 = reverse a0\n   722: a2 = reverse a2\n   724: a3 = reverse a3\n   726: a1 = reverse a1\n   728: u64 [sp + 0x18] = a1\n   731: u64 [sp + 0x10] = a3\n   734: u64 [sp + 0x8] = a2\n   737: u64 [sp] = a0\n   739: u64 [sp + 56] = 0\n   742: u64 [sp + 48] = 0\n   745: u64 [sp + 40] = 0\n   748: u64 [sp + 32] = 0\n   751: u32 [sp + 64] = 0x20\n   755: i32 a1 = sp + 0\n   757: i32 a3 = sp + 0x20\n   760: i32 a4 = sp + 0x40\n   763: a2 = 0xffffffffffffffff\n   766: a0 = 0\n   768: ecalli 5 // 'get_storage'\n   770: a0 = u64 [sp + 0x38]\n   773: a1 = u64 [sp + 0x30]\n   776: a2 = u64 [sp + 0x28]\n   779: a3 = u64 [sp + 0x20]\n   782: a0 = reverse a0\n   784: a1 = reverse a1\n   786: a2 = reverse a2\n   788: a3 = reverse a3\n   790: u64 [s1 + 0x18] = a3\n   793: u64 [s1 + 0x10] = a2\n   796: u64 [s1 + 0x8] = a1\n   799: u64 [s1] = a0\n   801: sp = s0 + 0xffffffffffffffa0\n   804: ra = u64 [sp + 0x58]\n   807: s0 = u64 [sp + 0x50]\n   810: s1 = u64 [sp + 0x48]\n   813: sp = sp + 0x60\n   816: ret\n      : @22 (gas: 40)\n   818: sp = sp + 0xffffffffffffffa0\n   821: u64 [sp + 0x58] = ra\n   824: u64 [sp + 0x50] = s0\n   827: s0 = sp + 0x60\n   830: sp = sp & 0xffffffffffffffe0\n   833: t0 = u64 [a0]\n   835: a3 = u64 [a0 + 0x8]\n   838: a4 = u64 [a0 + 0x10]\n   841: a0 = u64 [a0 + 0x18]\n   844: t1 = u64 [a1]\n   846: a2 = u64 [a1 + 0x8]\n   849: a5 = u64 [a1 + 0x10]\n   852: a1 = u64 [a1 + 0x18]\n   855: t2 = reverse a0\n   857: a4 = reverse a4\n   859: a3 = reverse a3\n   861: a0 = reverse t0\n   863: t0 = reverse a1\n   865: a5 = reverse a5\n   867: a2 = reverse a2\n   869: a1 = reverse t1\n   871: u64 [sp + 0x18] = a0\n   874: u64 [sp + 0x10] = a3\n   877: u64 [sp + 0x8] = a4\n   880: u64 [sp] = t2\n   882: u64 [sp + 0x38] = a1\n   885: u64 [sp + 0x30] = a2\n   888: u64 [sp + 0x28] = a5\n   891: u64 [sp + 0x20] = t0\n   894: i32 a1 = sp + 0\n   896: i32 a3 = sp + 0x20\n   899: a2 = 0xffffffffffffffff\n   902: a4 = 0x20\n   905: a0 = 0\n   907: ecalli 10 // 'set_storage'\n   909: sp = s0 + 0xffffffffffffffa0\n   912: ra = u64 [sp + 0x58]\n   915: s0 = u64 [sp + 0x50]\n   918: sp = sp + 0x60\n   921: ret\n      : @23 (gas: 33)\n   923: sp = sp + 0xffffffffffffff20\n   927: u64 [sp + 0xd8] = ra\n   931: u64 [sp + 0xd0] = s0\n   935: u64 [sp + 0xc8] = s1\n   939: s0 = sp + 0xe0\n   943: sp = sp & 0xffffffffffffffe0\n   946: a5 = u64 [a4]\n   948: u64 [sp + 0x40] = a5\n   951: a5 = u64 [a4 + 0x8]\n   954: u64 [sp + 0x48] = a5\n   957: a5 = u64 [a4 + 0x10]\n   960: u64 [sp + 0x50] = a5\n   963: a4 = u64 [a4 + 0x18]\n   966: u64 [sp + 0x58] = a4\n   969: t0 = 0x6\n   972: a4 = u64 [a3]\n   974: u64 [sp + 0x18] = a4\n   977: a4 = u64 [a3 + 0x8]\n   980: u64 [sp + 0x20] = a4\n   983: a4 = u64 [a3 + 0x10]\n   986: u64 [sp + 0x28] = a4\n   989: a3 = u64 [a3 + 0x18]\n   992: u64 [sp + 0x30] = a3\n   995: s1 = u64 [a2]\n   997: a3 = u64 [a2 + 0x8]\n  1000: u64 [sp] = a3\n  1002: a3 = u64 [a2 + 0x10]\n  1005: u64 [sp + 0x8] = a3\n  1008: a2 = u64 [a2 + 0x18]\n  1011: u64 [sp + 0x10] = a2\n  1014: u64 [sp + 56] = 0x20\n  1018: ra = 0x8\n  1021: jump @26\n      : @24 [@dyn 3] (gas: 2)\n  1024: u64 [sp + 0x38] = a1\n  1027: ra = 8, jump @26\n      : @25 [@dyn 4] (gas: 46)\n  1032: a1 = reverse s1\n  1034: u64 [sp + 0x78] = a1\n  1037: a1 = u64 [sp]\n  1039: a1 = reverse a1\n  1041: u64 [sp + 0x70] = a1\n  1044: a1 = u64 [sp + 0x8]\n  1047: a1 = reverse a1\n  1049: u64 [sp + 0x68] = a1\n  1052: a1 = u64 [sp + 0x10]\n  1055: a1 = reverse a1\n  1057: u64 [sp + 0x60] = a1\n  1060: a1 = u64 [sp + 0x18]\n  1063: a1 = reverse a1\n  1065: u64 [sp + 0x98] = a1\n  1069: a1 = u64 [sp + 0x20]\n  1072: a1 = reverse a1\n  1074: u64 [sp + 0x90] = a1\n  1078: a1 = u64 [sp + 0x28]\n  1081: a1 = reverse a1\n  1083: u64 [sp + 0x88] = a1\n  1087: a1 = u64 [sp + 0x30]\n  1090: a1 = reverse a1\n  1092: u64 [sp + 0x80] = a1\n  1096: a1 = u64 [sp + 0x40]\n  1099: a1 = reverse a1\n  1101: u64 [sp + 0xb8] = a1\n  1105: a1 = u64 [sp + 0x48]\n  1108: a1 = reverse a1\n  1110: u64 [sp + 0xb0] = a1\n  1114: a1 = u64 [sp + 0x50]\n  1117: a1 = reverse a1\n  1119: u64 [sp + 0xa8] = a1\n  1123: a1 = u64 [sp + 0x58]\n  1126: a1 = reverse a1\n  1128: u64 [sp + 0xa0] = a1\n  1132: i32 a2 = a0 + 0\n  1134: a3 = i32 [sp + 0x38]\n  1137: i32 a0 = sp + 0x60\n  1140: a1 = 0x3\n  1143: ecalli 4 // 'deposit_event'\n  1145: sp = s0 + 0xffffffffffffff20\n  1149: ra = u64 [sp + 0xd8]\n  1153: s0 = u64 [sp + 0xd0]\n  1157: s1 = u64 [sp + 0xc8]\n  1161: sp = sp + 0xe0\n  1165: ret\n      : @26 (gas: 2)\n  1167: i32 a2 = a0 >> 0x10\n  1170: jump @31 if a2 != 0\n      : @27 (gas: 4)\n  1173: a1 = a1 + a0\n  1176: i32 a1 = a1 + 0x1f\n  1179: a1 = a1 & 0xffffffffffffffe0\n  1182: jump @31 if a1 >u 65536\n      : @28 (gas: 3)\n  1188: a2 = 0x20134\n  1193: a3 = i32 [0x20134]\n  1198: jump @30 if a3 >=u a1\n      : @29 (gas: 2)\n  1201: u32 [0x20134] = a1\n  1206: fallthrough\n      : @30 (gas: 4)\n  1207: a1 = 0x20140\n  1212: i32 a0 = a0 + 0\n  1214: a0 = a0 + a1\n  1217: ret\n      : @31 (gas: 1)\n  1219: trap\n      : @32 (gas: 6)\n  1220: sp = sp + 0xfffffffffffffff0\n  1223: u64 [sp + 0x8] = ra\n  1226: u64 [sp] = s0\n  1228: s0 = a0 & 0x1\n  1231: ecalli 2 // 'call_data_size'\n  1233: fallthrough\n      : @33 (gas: 2)\n  1234: u32 [0x20130] = a0\n  1239: jump @35 if s0 == 0\n      : @34 (gas: 1)\n  1242: ra = 10, jump @36\n      : @35 [@dyn 5] (gas: 18)\n  1246: ra = 0xc\n  1249: sp = sp + 0xfffffffffffffe10\n  1253: u64 [sp + 0x1e8] = ra\n  1257: u64 [sp + 0x1e0] = s0\n  1261: u64 [sp + 0x1d8] = s1\n  1265: s0 = sp + 0x1f0\n  1269: sp = sp + 0xffffffffffffe850\n  1273: sp = sp & 0xffffffffffffffe0\n  1276: s1 = sp\n  1278: a2 = s1 + 0x1078\n  1282: u64 [a2 + 928] = 0\n  1286: u64 [a2 + 920] = 0\n  1290: u64 [a2 + 904] = 0x80\n  1296: a0 = 0x40\n  1299: a1 = s1 + 0x1400\n  1303: u64 [a2 + 912] = 0\n  1307: ra = 0xd4\n  1311: jump @19\n      : @36 [@dyn 6] (gas: 16)\n  1314: sp = sp + 0xfffffffffffff808\n  1318: a0 = sp + 0x700\n  1322: u64 [a0 + 0xf0] = ra\n  1326: u64 [a0 + 0xe8] = s0\n  1330: u64 [a0 + 0xe0] = s1\n  1334: s0 = sp + 0x7f8\n  1338: sp = sp + 0xfffffffffffffd38\n  1342: sp = sp & 0xffffffffffffffe0\n  1345: s1 = sp\n  1347: u64 [s1 + 1656] = 0\n  1351: u64 [s1 + 1648] = 0\n  1355: u64 [s1 + 1632] = 0x80\n  1361: a0 = 0x40\n  1364: a1 = s1 + 0x660\n  1368: u64 [s1 + 1640] = 0\n  1372: ra = 14, jump @19\n      : @37 [@dyn 7] (gas: 7)\n  1377: u64 [s1 + 1688] = 0\n  1381: u64 [s1 + 1680] = 0\n  1385: u64 [s1 + 1672] = 0\n  1389: u64 [s1 + 1664] = 0\n  1393: i32 a0 = s1 + 0x680\n  1397: ecalli 11 // 'value_transferred'\n  1399: fallthrough\n      : @38 (gas: 9)\n  1400: a4 = s1 + 0x600\n  1404: a0 = u64 [a4 + 0x90]\n  1408: a1 = u64 [a4 + 0x98]\n  1412: a2 = u64 [a4 + 0x88]\n  1416: a3 = u64 [a4 + 0x80]\n  1420: a1 = a1 | a2\n  1423: a0 = a0 | a3\n  1426: a0 = a0 | a1\n  1429: jump @40 if a0 == 0\n      : @39 (gas: 1)\n  1432: jump @185\n      : @40 (gas: 9)\n  1435: a2 = u32 [0x20130]\n  1440: u64 [s1 + 1592] = 0\n  1444: u64 [s1 + 1584] = 0\n  1448: u64 [s1 + 1576] = 0\n  1452: a0 = s1 + 0x640\n  1456: a1 = s1 + 0x620\n  1460: u64 [s1 + 0x118] = a2\n  1464: u64 [s1 + 0x620] = a2\n  1468: ra = 16, jump @724\n      : @41 [@dyn 8] (gas: 17)\n  1473: a4 = s1 + 0x600\n  1477: a3 = u64 [a4 + 0x58]\n  1480: a2 = u64 [a4 + 0x50]\n  1483: a1 = u64 [a4 + 0x48]\n  1486: a0 = u64 [a4 + 0x40]\n  1489: a4 = s1 + 0x100\n  1493: u64 [a4 + 0x10] = a3\n  1496: u64 [a4] = a1\n  1498: a3 = a3 | a1\n  1501: a1 = a0 | a2\n  1504: a1 = a1 | a3\n  1507: a1 = a1 >> 0x20\n  1510: u64 [a4 + 0x8] = a2\n  1513: a2 = a2 | a3\n  1516: a2 = a2 << 0x20\n  1519: a1 = a1 | a2\n  1522: jump @43 if a1 == 0\n      : @42 (gas: 1)\n  1525: jump @184\n      : @43 (gas: 3)\n  1528: u64 [s1 + 0xf8] = a0\n  1532: a1 = u64 [s1 + 0x118]\n  1536: ra = 18, jump @26\n      : @44 [@dyn 9] (gas: 5)\n  1541: i32 a0 = a0 + 0\n  1543: a1 = i32 [s1 + 0x118]\n  1547: a2 = 0\n  1549: ecalli 0 // 'call_data_copy'\n  1550: fallthrough\n      : @45 (gas: 2)\n  1551: a1 = u64 [s1 + 0x118]\n  1555: jump @47 if a1 >u 63\n      : @46 (gas: 1)\n  1559: jump @186\n      : @47 (gas: 3)\n  1562: a0 = s1 + 0x600\n  1566: a1 = u64 [s1 + 0xf8]\n  1570: ra = 20, jump @17\n      : @48 [@dyn 10] (gas: 8)\n  1575: a0 = u64 [s1 + 0x618]\n  1579: t0 = u64 [s1 + 0x610]\n  1583: a4 = u64 [s1 + 0x608]\n  1587: u64 [s1 + 0xf0] = a0\n  1591: a2 = t0 | a0\n  1594: a3 = a4 <u 0x1\n  1597: a3 = 0 if a2 != 0\n  1599: jump @50 if a3 != 0\n      : @49 (gas: 1)\n  1602: jump @187\n      : @50 (gas: 50)\n  1605: a3 = u64 [s1 + 0x600]\n  1609: t1 = u64 [s1 + 0xf8]\n  1613: t2 = u64 [s1 + 0x118]\n  1617: t2 = t2 + t1\n  1620: a1 = t2 <u t1\n  1623: t1 = t1 + a3\n  1626: u64 [s1 + 0x118] = t1\n  1630: a3 = t1 <u a3\n  1633: a2 = u64 [s1 + 0x100]\n  1637: a0 = a4 + a2\n  1640: a5 = a2\n  1642: t1 = a0 + a3\n  1645: a2 = t1 ^ a4\n  1648: a4 = t1 <u a4\n  1651: a4 = a3 if a2 == 0\n  1654: a2 = a5\n  1656: a5 = a5 + a1\n  1659: a2 = a5 <u a2\n  1662: a2 = a1 if a1 == 0\n  1665: a1 = u64 [s1 + 0x108]\n  1669: a3 = t0 + a1\n  1672: ra = a3 <u t0\n  1675: a0 = u64 [s1 + 0x110]\n  1679: t0 = u64 [s1 + 0xf0]\n  1683: t0 = t0 + a0\n  1686: ra = ra + t0\n  1689: t0 = a1 + a2\n  1692: a4 = a4 + a3\n  1695: a2 = a4 <u a3\n  1698: a3 = ra + a2\n  1701: a1 = t0 <u a1\n  1704: a1 = a1 + a0\n  1707: u64 [s1 + 0xf0] = t2\n  1711: u64 [s1 + 0x5a0] = t2\n  1715: u64 [s1 + 0xe8] = a5\n  1719: u64 [s1 + 0x5a8] = a5\n  1723: a0 = u64 [s1 + 0x118]\n  1727: a5 = s1 + 0x500\n  1731: u64 [a5 + 0xc0] = a0\n  1735: u64 [s1 + 0x118] = t0\n  1739: u64 [s1 + 0x5b0] = t0\n  1743: u64 [s1 + 0xe0] = a1\n  1747: u64 [a5 + 0xb8] = a1\n  1751: u64 [s1 + 0x5c8] = t1\n  1755: u64 [a5 + 0xd0] = a4\n  1759: a0 = s1 + 0x5e0\n  1763: a1 = s1 + 0x5c0\n  1767: a2 = s1 + 0x5a0\n  1771: u64 [a5 + 0xd8] = a3\n  1775: ra = 22, jump @735\n      : @51 [@dyn 11] (gas: 11)\n  1780: a2 = u64 [s1 + 0xf8]\n  1784: a4 = s1 + 0x100\n  1788: a0 = u64 [a4 + 0x8]\n  1791: a1 = u64 [a4 + 0x10]\n  1794: a0 = a0 | a1\n  1797: a1 = 0xffffffe0\n  1807: a1 = a2 <u a1\n  1810: a3 = u64 [a4]\n  1812: a1 = 0 if a3 != 0\n  1814: a1 = 0 if a0 != 0\n  1816: jump @53 if a1 != 0\n      : @52 (gas: 1)\n  1819: jump @184\n      : @53 (gas: 11)\n  1822: a0 = u64 [s1 + 0x5f8]\n  1826: u64 [s1 + 0xa0] = a0\n  1830: a0 = u64 [s1 + 0x5f0]\n  1834: u64 [s1 + 0x98] = a0\n  1838: a0 = u64 [s1 + 0x5e8]\n  1842: u64 [s1 + 0xa8] = a0\n  1846: a0 = u64 [s1 + 0x5e0]\n  1850: u64 [s1 + 0xb0] = a0\n  1854: i32 a1 = a2 + 0x20\n  1857: a0 = s1 + 0x580\n  1861: ra = 24, jump @17\n      : @54 [@dyn 12] (gas: 7)\n  1866: t0 = u64 [s1 + 0x598]\n  1870: a1 = u64 [s1 + 0x590]\n  1874: a2 = u64 [s1 + 0x588]\n  1878: a3 = a1 | t0\n  1881: a4 = a2 <u 0x1\n  1884: a4 = 0 if a3 != 0\n  1886: jump @56 if a4 != 0\n      : @55 (gas: 1)\n  1889: jump @188\n      : @56 (gas: 36)\n  1892: a3 = u64 [s1 + 0x580]\n  1896: a4 = u64 [s1 + 0xf8]\n  1900: a4 = a4 + a3\n  1903: a3 = a4 <u a3\n  1906: a5 = u64 [s1 + 0x100]\n  1910: a5 = a5 + a2\n  1913: a5 = a5 + a3\n  1916: a0 = a5 ^ a2\n  1919: a2 = a5 <u a2\n  1922: a2 = a3 if a0 == 0\n  1925: a0 = u64 [s1 + 0x108]\n  1929: a0 = a0 + a1\n  1932: a2 = a2 + a0\n  1935: a3 = a2 <u a0\n  1938: a0 = a0 <u a1\n  1941: a1 = u64 [s1 + 0x110]\n  1945: t0 = t0 + a1\n  1948: a0 = a0 + t0\n  1951: a3 = a3 + a0\n  1954: a0 = u64 [s1 + 0xf0]\n  1958: u64 [s1 + 0x520] = a0\n  1962: a0 = u64 [s1 + 0xe8]\n  1966: u64 [s1 + 0x528] = a0\n  1970: u64 [s1 + 0x540] = a4\n  1974: a0 = u64 [s1 + 0x118]\n  1978: a4 = s1 + 0x500\n  1982: u64 [a4 + 0x30] = a0\n  1985: a0 = u64 [s1 + 0xe0]\n  1989: u64 [a4 + 0x38] = a0\n  1992: u64 [a4 + 0x48] = a5\n  1995: u64 [a4 + 0x50] = a2\n  1998: a0 = s1 + 0x560\n  2002: a1 = s1 + 0x540\n  2006: a2 = s1 + 0x520\n  2010: u64 [a4 + 0x58] = a3\n  2013: ra = 26, jump @735\n      : @57 [@dyn 13] (gas: 12)\n  2018: a2 = u64 [s1 + 0x98]\n  2022: a4 = u64 [s1 + 0xb0]\n  2026: a0 = a4 | a2\n  2029: a1 = u64 [s1 + 0xa0]\n  2033: a3 = u64 [s1 + 0xa8]\n  2037: a1 = a1 | a3\n  2040: a0 = a0 | a1\n  2043: a0 = a0 >> 0x20\n  2046: a1 = a1 | a2\n  2049: a1 = a1 << 0x20\n  2052: a0 = a0 | a1\n  2055: jump @59 if a0 == 0\n      : @58 (gas: 1)\n  2058: jump @184\n      : @59 (gas: 11)\n  2061: a1 = a4\n  2063: a0 = u64 [s1 + 0x578]\n  2067: u64 [s1 + 0x78] = a0\n  2070: a0 = u64 [s1 + 0x570]\n  2074: u64 [s1 + 0x70] = a0\n  2077: a0 = u64 [s1 + 0x568]\n  2081: u64 [s1 + 0x80] = a0\n  2085: a0 = u64 [s1 + 0x560]\n  2089: u64 [s1 + 0x88] = a0\n  2093: a0 = s1 + 0x500\n  2097: ra = 28, jump @17\n      : @60 [@dyn 14] (gas: 17)\n  2102: a0 = s1 + 0x500\n  2106: a3 = u64 [a0 + 0x18]\n  2109: a1 = u64 [a0 + 0x10]\n  2112: a2 = u64 [a0 + 0x8]\n  2115: a0 = a3 >u 0\n  2117: a4 = a1 >u 0\n  2119: a4 = a0 if a3 != 0\n  2122: u64 [s1 + 0xd0] = a2\n  2126: a0 = a2 >u 0\n  2128: u64 [s1 + 0x60] = a1\n  2131: u64 [s1 + 0xc8] = a3\n  2135: a1 = a1 | a3\n  2138: u64 [s1 + 0x58] = a0\n  2141: u64 [s1 + 0x90] = a4\n  2145: u64 [s1 + 0xc0] = a1\n  2149: a0 = a4 if a1 != 0\n  2152: jump @62 if a0 == 0\n      : @61 (gas: 1)\n  2155: jump @189\n      : @62 (gas: 9)\n  2158: a0 = u64 [s1 + 0x500]\n  2162: u64 [s1 + 0x68] = a0\n  2165: u64 [s1 + 1720] = 0\n  2169: u64 [s1 + 1712] = 0\n  2173: u64 [s1 + 1704] = 0\n  2177: u64 [s1 + 1696] = 0x3\n  2182: a0 = s1 + 0x4e0\n  2186: a1 = s1 + 0x6a0\n  2190: ra = 30, jump @21\n      : @63 [@dyn 15] (gas: 6)\n  2195: a4 = s1 + 0x400\n  2199: a0 = u64 [a4 + 0xf0]\n  2203: a1 = u64 [a4 + 0xe8]\n  2207: a2 = u64 [a4 + 0xe0]\n  2211: a3 = u64 [a4 + 0xf8]\n  2215: t0 = 32, jump @888\n      : @64 [@dyn 16] (gas: 12)\n  2220: t0 = a2 <u 0x1\n  2223: ra = a1 & 0x7f\n  2226: t2 = a5 & a0\n  2229: a4 = a5 & t1\n  2232: ra = a1 if a2 != 0\n  2235: a1 = ra <u 0x20\n  2238: a5 = a5 & a3\n  2241: a2 = a1\n  2243: a2 = 0 if a4 != 0\n  2245: a0 = t2 | a5\n  2248: a2 = 0 if a0 != 0\n  2250: jump @66 if t0 == a2\n      : @65 (gas: 1)\n  2253: jump @195\n      : @66 (gas: 1)\n  2256: t0 = 34, jump @895\n      : @67 [@dyn 17] (gas: 4)\n  2261: a0 = u64 [s1 + 0x68]\n  2264: a0 = a0 <u 0x20\n  2267: u64 [s1 + 0xb8] = a0\n  2271: jump @76 if a3 == 0\n      : @68 (gas: 11)\n  2275: u64 [s1 + 0xf0] = a4\n  2279: u64 [s1 + 0xf8] = ra\n  2283: u64 [s1 + 0x100] = a5\n  2287: u64 [s1 + 0x110] = t2\n  2291: u64 [s1 + 1240] = 0\n  2295: u64 [s1 + 1232] = 0\n  2299: u64 [s1 + 1224] = 0\n  2303: a1 = s1 + 0x4c0\n  2307: u64 [s1 + 1216] = 0x3\n  2312: a0 = 0\n  2314: ra = 36, jump @19\n      : @69 [@dyn 18] (gas: 2)\n  2319: a1 = i32 [0x20134]\n  2324: jump @71 if a1 >u 31\n      : @70 (gas: 2)\n  2328: u32 [0x20134] = 0x20\n  2334: fallthrough\n      : @71 (gas: 87)\n  2335: a0 = sp + 0xffffffffffffffe0\n  2338: a2 = a0 & 0xffffffffffffffe0\n  2341: u64 [s1 + 0x108] = a2\n  2345: sp = a2\n  2347: a0 = 0x20140\n  2352: i32 a0 = a0 + 0\n  2354: i32 a2 = a2 + 0\n  2356: a1 = 0x20\n  2359: ecalli 6 // 'hash_keccak_256'\n  2361: a0 = u64 [s1 + 0x68]\n  2364: a1 = a0 + 0x1f\n  2367: a0 = a1 <u a0\n  2370: a5 = u64 [s1 + 0xd0]\n  2374: a2 = a5 + a0\n  2377: a3 = a2 <u a5\n  2380: a3 = a0 if a0 == 0\n  2383: a4 = u64 [s1 + 0x60]\n  2386: a3 = a3 + a4\n  2389: u64 [s1 + 0xe8] = a3\n  2393: a3 = a3 << 0x3b\n  2396: a4 = a2 >> 0x5\n  2399: a4 = a4 | a3\n  2402: a0 = u64 [s1 + 0x108]\n  2406: t1 = u64 [a0 + 0x18]\n  2409: a2 = a2 << 0x3b\n  2412: a3 = u64 [a0 + 0x10]\n  2415: a1 = a1 >> 0x5\n  2418: a0 = a1 | a2\n  2421: t2 = reverse t1\n  2423: a2 = reverse a3\n  2425: a1 = u64 [s1 + 0xb8]\n  2429: a1 = 0 if a5 != 0\n  2431: a3 = u64 [s1 + 0xc0]\n  2435: a1 = 0 if a3 != 0\n  2437: a4 = 0 if a1 != 0\n  2439: a0 = 0 if a1 != 0\n  2441: t0 = t2 + a0\n  2444: a0 = t0 <u t2\n  2447: a5 = a2 + a0\n  2450: a4 = a4 + a5\n  2453: u64 [s1 + 0x118] = a4\n  2457: a5 = a4 ^ a2\n  2460: a3 = a4 <u a2\n  2463: a3 = a0 if a5 == 0\n  2466: u64 [s1 + 0xe0] = a3\n  2470: a0 = u64 [s1 + 0xf8]\n  2474: ra = a0 + 0x1f\n  2477: a4 = ra <u a0\n  2480: a3 = u64 [s1 + 0xf0]\n  2484: a0 = a3 + a4\n  2487: a5 = a0 <u a3\n  2490: a5 = a4 if a4 == 0\n  2493: t1 = u64 [s1 + 0x110]\n  2497: t1 = t1 + a5\n  2500: a4 = t1 << 0x3b\n  2503: a3 = a0 >> 0x5\n  2506: a3 = a3 | a4\n  2509: a0 = a0 << 0x3b\n  2512: a4 = ra >> 0x5\n  2515: a0 = a0 | a4\n  2518: a0 = a0 + t2\n  2521: u64 [s1 + 0xf8] = a0\n  2525: a0 = a0 <u t2\n  2528: t2 = t0\n  2530: a4 = a2 + a0\n  2533: a4 = a4 + a3\n  2536: a3 = a4 ^ a2\n  2539: u64 [s1 + 0xf0] = a4\n  2543: a2 = a4 <u a2\n  2546: a2 = a0 if a3 == 0\n  2549: a4 = u64 [s1 + 0xe8]\n  2553: a0 = u64 [s1 + 0x60]\n  2556: a0 = a4 <u a0\n  2559: a3 = u64 [s1 + 0xc8]\n  2563: a0 = a0 + a3\n  2566: a3 = a4 >> 0x5\n  2569: a4 = a0 << 0x3b\n  2572: a3 = a3 | a4\n  2575: a4 = u64 [s1 + 0x108]\n  2579: t0 = u64 [a4]\n  2581: a4 = u64 [a4 + 0x8]\n  2584: a0 = a0 >> 0x5\n  2587: a3 = 0 if a1 != 0\n  2589: a0 = 0 if a1 != 0\n  2591: a1 = reverse a4\n  2593: a4 = reverse t0\n  2595: t0 = 38, jump @908\n      : @72 [@dyn 19] (gas: 24)\n  2600: t0 = a0 + a3\n  2603: a0 = u64 [s1 + 0x110]\n  2607: a0 = t1 <u a0\n  2610: a3 = u64 [s1 + 0x100]\n  2614: a0 = a0 + a3\n  2617: a3 = t1 >> 0x5\n  2620: a5 = a0 << 0x3b\n  2623: a3 = a3 | a5\n  2626: a0 = a0 >> 0x5\n  2629: a0 = a0 + a4\n  2632: a4 = u64 [s1 + 0x118]\n  2636: a3 = a3 + a1\n  2639: a1 = a3 <u a1\n  2642: a0 = a0 + a1\n  2645: a2 = a2 + a3\n  2648: u64 [s1 + 0xe8] = a2\n  2652: a1 = a2 <u a3\n  2655: a0 = a0 + a1\n  2658: u64 [s1 + 0xe0] = a0\n  2662: a0 = sp + 0xffffffffffffffe0\n  2665: t1 = a0 & 0xffffffffffffffe0\n  2668: sp = t1\n  2670: u64 [s1 + 0xd8] = t1\n  2674: fallthrough\n      : @73 (gas: 20)\n  2675: a0 = u64 [s1 + 0xf8]\n  2679: a0 = t2 <u a0\n  2682: a2 = u64 [s1 + 0xf0]\n  2686: a1 = a4 ^ a2\n  2689: a2 = a4 <u a2\n  2692: a2 = a0 if a1 == 0\n  2695: a5 = u64 [s1 + 0xe8]\n  2699: a0 = ra <u a5\n  2702: a3 = u64 [s1 + 0xe0]\n  2706: a1 = t0 ^ a3\n  2709: a3 = t0 <u a3\n  2712: a3 = a0 if a1 == 0\n  2715: a0 = ra ^ a5\n  2718: a0 = a0 | a1\n  2721: a3 = a2 if a0 == 0\n  2724: u64 [t1] = t2\n  2726: u64 [t1 + 0x8] = a4\n  2729: u64 [t1 + 0x10] = ra\n  2732: u64 [t1 + 0x18] = t0\n  2735: jump @76 if a3 == 0\n      : @74 (gas: 11)\n  2738: u64 [s1 + 1752] = 0\n  2742: u64 [s1 + 1744] = 0\n  2746: u64 [s1 + 1736] = 0\n  2750: u64 [s1 + 1728] = 0\n  2754: a1 = s1 + 0x6c0\n  2758: a0 = t1\n  2760: u64 [s1 + 0x110] = t2\n  2764: u64 [s1 + 0x118] = a4\n  2768: u64 [s1 + 0x108] = t0\n  2772: u64 [s1 + 0x100] = ra\n  2776: ra = 40, jump @22\n      : @75 [@dyn 20] (gas: 15)\n  2781: t1 = u64 [s1 + 0xd8]\n  2785: t0 = u64 [s1 + 0x108]\n  2789: a4 = u64 [s1 + 0x118]\n  2793: t2 = u64 [s1 + 0x110]\n  2797: t2 = t2 + 0x1\n  2800: a0 = t2 <u 0x1\n  2803: a4 = a4 + a0\n  2806: a0 = t2 | a4\n  2809: a0 = a0 <u 0x1\n  2812: a1 = u64 [s1 + 0x100]\n  2816: a0 = a0 + a1\n  2819: a1 = a0 <u a1\n  2822: t0 = t0 + a1\n  2825: ra = a0\n  2827: jump @73\n      : @76 (gas: 23)\n  2830: a0 = u64 [s1 + 0xb8]\n  2834: a0 = a0 ^ 0x1\n  2837: a5 = u64 [s1 + 0xd0]\n  2841: a1 = u64 [s1 + 0x58]\n  2844: a0 = a1 if a5 != 0\n  2847: a1 = u64 [s1 + 0x90]\n  2851: a2 = u64 [s1 + 0xc0]\n  2855: a0 = a1 if a2 != 0\n  2858: ra = u64 [s1 + 0xc8]\n  2862: a4 = a5 | ra\n  2865: a1 = u64 [s1 + 0x60]\n  2868: t2 = a1 >> 0x3f\n  2871: ra = ra << 0x1\n  2874: a2 = a5 >> 0x3f\n  2877: u64 [s1 + 0x58] = a2\n  2880: a2 = a1 << 0x1\n  2883: u64 [s1 + 0x48] = a2\n  2886: a3 = u64 [s1 + 0x68]\n  2889: t0 = a3 >> 0x3f\n  2892: a2 = a5 << 0x1\n  2895: u64 [s1 + 0x50] = a2\n  2898: a2 = a3 << 0x1\n  2901: jump @88 if a0 == 0\n      : @77 (gas: 14)\n  2905: u64 [s1 + 0x20] = a4\n  2908: u64 [s1 + 0x30] = t0\n  2911: u64 [s1 + 0x38] = ra\n  2914: u64 [s1 + 0x28] = t2\n  2917: u64 [s1 + 0x40] = a2\n  2920: a3 = a3 & 0xffffffffffffffe0\n  2923: u64 [s1 + 0x90] = a3\n  2927: u64 [s1 + 1176] = 0\n  2931: u64 [s1 + 1168] = 0\n  2935: u64 [s1 + 1160] = 0\n  2939: a1 = s1 + 0x480\n  2943: u64 [s1 + 1152] = 0x3\n  2948: a0 = 0\n  2950: ra = 42, jump @19\n      : @78 [@dyn 21] (gas: 7)\n  2955: a0 = sp + 0xffffffffffffffe0\n  2958: a0 = a0 & 0xffffffffffffffe0\n  2961: u64 [s1 + 0xf0] = a0\n  2965: sp = a0\n  2967: a1 = 0x20\n  2970: a0 = 0\n  2972: ra = 44, jump @26\n      : @79 [@dyn 22] (gas: 1)\n  2977: t0 = 46, jump @915\n      : @80 [@dyn 23] (gas: 5)\n  2982: ecalli 6 // 'hash_keccak_256'\n  2984: u64 [s1 + 280] = 0x20\n  2989: a5 = 0\n  2991: u64 [s1 + 272] = 0\n  2995: t0 = 48, jump @901\n      : @81 [@dyn 24] (gas: 15)\n  3000: t0 = u64 [a3]\n  3002: t1 = reverse a0\n  3004: a1 = reverse a1\n  3006: a3 = reverse a2\n  3008: a2 = reverse t0\n  3010: t0 = a2\n  3012: a0 = u64 [s1 + 0xf0]\n  3016: u64 [a0 + 0x18] = a2\n  3019: u64 [s1 + 0xd0] = a3\n  3023: u64 [a0 + 0x10] = a3\n  3026: u64 [s1 + 0xe8] = a1\n  3030: u64 [a0 + 0x8] = a1\n  3033: a3 = t1\n  3035: u64 [a0] = t1\n  3037: fallthrough\n      : @82 (gas: 25)\n  3038: t2 = t0\n  3040: t1 = a3\n  3042: a0 = u64 [s1 + 0x90]\n  3046: u64 [s1 + 0xe0] = a4\n  3050: a0 = a4 <u a0\n  3053: a4 = a0 ^ 0x1\n  3056: u64 [s1 + 0xd8] = ra\n  3060: a4 = 0x1 if ra != 0\n  3063: a0 = u64 [s1 + 0x100]\n  3067: a2 = u64 [s1 + 0xf8]\n  3071: a0 = a0 | a2\n  3074: a4 = 0x1 if a0 != 0\n  3077: a1 = u64 [s1 + 0xb0]\n  3081: a0 = u64 [s1 + 0x118]\n  3085: a1 = a1 + a0\n  3088: a3 = u64 [s1 + 0xa8]\n  3092: t0 = a5\n  3094: a3 = a3 + a5\n  3097: a2 = u64 [s1 + 0x98]\n  3101: a0 = u64 [s1 + 0x110]\n  3105: a2 = a2 + a0\n  3108: a0 = u64 [s1 + 0xa0]\n  3112: a5 = u64 [s1 + 0x108]\n  3116: a0 = a0 + a5\n  3119: jump @90 if a4 != 0\n      : @83 (gas: 23)\n  3123: a4 = u64 [s1 + 0x118]\n  3127: a4 = a1 <u a4\n  3130: ra = a3 + a4\n  3133: a3 = t0\n  3135: t0 = ra ^ t0\n  3138: a5 = ra <u a3\n  3141: a5 = a4 if t0 == 0\n  3144: a5 = a5 + a2\n  3147: t0 = a5 <u a2\n  3150: a4 = u64 [s1 + 0x110]\n  3154: a2 = a2 <u a4\n  3157: a0 = a0 + a2\n  3160: a0 = a0 + t0\n  3163: a2 = a1 | a5\n  3166: a0 = ra | a0\n  3169: a2 = a2 | a0\n  3172: a2 = a2 >> 0x20\n  3175: a0 = a0 | a5\n  3178: a0 = a0 << 0x20\n  3181: a0 = a0 | a2\n  3184: u64 [s1 + 0xc8] = t1\n  3188: u64 [s1 + 0xc0] = t2\n  3192: jump @85 if a0 == 0\n      : @84 (gas: 1)\n  3195: jump @184\n      : @85 (gas: 3)\n  3198: a0 = s1 + 0x1a0\n  3202: u64 [s1 + 0xb8] = a3\n  3206: ra = 50, jump @17\n      : @86 [@dyn 25] (gas: 12)\n  3211: a0 = u64 [s1 + 0x1b8]\n  3215: a1 = u64 [s1 + 0x1b0]\n  3219: a2 = u64 [s1 + 0x1a8]\n  3223: a3 = u64 [s1 + 0x1a0]\n  3227: a4 = s1 + 0x600\n  3231: u64 [a4 + 0xf8] = a0\n  3235: u64 [a4 + 0xf0] = a1\n  3239: u64 [a4 + 0xe8] = a2\n  3243: u64 [a4 + 0xe0] = a3\n  3247: a1 = s1 + 0x6e0\n  3251: a0 = u64 [s1 + 0xf0]\n  3255: ra = 52, jump @22\n      : @87 [@dyn 26] (gas: 57)\n  3260: ra = u64 [s1 + 0xc8]\n  3264: ra = ra + 0x1\n  3267: a0 = ra <u 0x1\n  3270: t0 = u64 [s1 + 0xe8]\n  3274: t0 = t0 + a0\n  3277: a0 = ra | t0\n  3280: a0 = a0 <u 0x1\n  3283: a1 = u64 [s1 + 0xd0]\n  3287: t1 = a1 + a0\n  3290: a1 = t1 <u a1\n  3293: a0 = u64 [s1 + 0xc0]\n  3297: a0 = a0 + a1\n  3300: a1 = u64 [s1 + 0x118]\n  3304: a2 = a1 + 0x20\n  3307: u64 [s1 + 0xc8] = a2\n  3311: a3 = a2 <u a1\n  3314: a1 = u64 [s1 + 0xb8]\n  3318: a2 = a1 + a3\n  3321: u64 [s1 + 0xc0] = a2\n  3325: a4 = a2 <u a1\n  3328: a4 = a3 if a3 == 0\n  3331: a1 = u64 [s1 + 0x110]\n  3335: t2 = a1 + a4\n  3338: a4 = t2 <u a1\n  3341: a1 = u64 [s1 + 0x108]\n  3345: a1 = a1 + a4\n  3348: u64 [s1 + 0x108] = a1\n  3352: a1 = u64 [s1 + 0xe0]\n  3356: a4 = a1 + 0x20\n  3359: a5 = a4 <u a1\n  3362: a2 = u64 [s1 + 0xd8]\n  3366: a1 = a2 + a5\n  3369: a2 = a1 <u a2\n  3372: a2 = a5 if a5 == 0\n  3375: a3 = u64 [s1 + 0xf8]\n  3379: a2 = a2 + a3\n  3382: a5 = a2 <u a3\n  3385: a3 = u64 [s1 + 0x100]\n  3389: a3 = a3 + a5\n  3392: u64 [s1 + 0x100] = a3\n  3396: a3 = t0\n  3398: u64 [s1 + 0xe8] = a3\n  3402: a5 = u64 [s1 + 0xf0]\n  3406: u64 [a5 + 0x8] = a3\n  3409: a3 = ra\n  3411: u64 [a5] = ra\n  3413: u64 [a5 + 0x10] = t1\n  3416: t0 = a0\n  3418: u64 [a5 + 0x18] = a0\n  3421: u64 [s1 + 0xd0] = t1\n  3425: a0 = u64 [s1 + 0xc8]\n  3429: u64 [s1 + 0x118] = a0\n  3433: a5 = u64 [s1 + 0xc0]\n  3437: u64 [s1 + 0x110] = t2\n  3441: ra = a1\n  3443: u64 [s1 + 0xf8] = a2\n  3447: jump @82\n      : @88 (gas: 7)\n  3450: a0 = a3 | a1\n  3453: a0 = a0 | a4\n  3456: a4 = u64 [s1 + 0xb0]\n  3460: t1 = u64 [s1 + 0xa8]\n  3464: a1 = u64 [s1 + 0xa0]\n  3468: a5 = u64 [s1 + 0x98]\n  3472: jump @103 if a0 != 0\n      : @89 (gas: 6)\n  3476: u64 [s1 + 0x40] = a2\n  3479: u64 [s1 + 256] = 0\n  3483: u64 [s1 + 248] = 0\n  3487: u64 [s1 + 264] = 0\n  3491: u64 [s1 + 272] = 0\n  3495: jump @106\n      : @90 (gas: 11)\n  3498: ra = t0\n  3500: t1 = u64 [s1 + 0x68]\n  3503: a4 = u64 [s1 + 0x90]\n  3507: a4 = a4 ^ t1\n  3510: a5 = u64 [s1 + 0x60]\n  3513: a4 = a4 | a5\n  3516: a5 = u64 [s1 + 0x20]\n  3519: a4 = a4 | a5\n  3522: a5 = u64 [s1 + 0x38]\n  3525: t0 = u64 [s1 + 0x30]\n  3528: jump @102 if a4 == 0\n      : @91 (gas: 13)\n  3532: a4 = u64 [s1 + 0x118]\n  3536: a4 = a1 <u a4\n  3539: a3 = a3 + a4\n  3542: t0 = a3 ^ ra\n  3545: a5 = a3 <u ra\n  3548: a5 = a4 if t0 == 0\n  3551: a5 = a5 + a2\n  3554: t0 = a5 <u a2\n  3557: a4 = u64 [s1 + 0x110]\n  3561: a2 = a2 <u a4\n  3564: a0 = a0 + a2\n  3567: a0 = a0 + t0\n  3570: t0 = 54, jump @900\n      : @92 [@dyn 27] (gas: 1)\n  3575: jump @184 if a0 != 0\n      : @93 (gas: 2)\n  3579: a0 = s1 + 0x460\n  3583: ra = 56, jump @17\n      : @94 [@dyn 28] (gas: 11)\n  3588: a1 = s1 + 0x400\n  3592: a0 = u64 [a1 + 0x78]\n  3595: u64 [s1 + 0x110] = a0\n  3599: a0 = u64 [a1 + 0x70]\n  3602: u64 [s1 + 0x108] = a0\n  3606: a0 = u64 [a1 + 0x68]\n  3609: u64 [s1 + 0x100] = a0\n  3613: a0 = u64 [a1 + 0x60]\n  3616: u64 [s1 + 0xf8] = a0\n  3620: a0 = u64 [s1 + 0x68]\n  3623: t0 = 58, jump @903\n      : @95 [@dyn 29] (gas: 1)\n  3628: ra = 60, jump @921\n      : @96 [@dyn 30] (gas: 6)\n  3633: u64 [s1 + 0xe8] = a0\n  3637: u64 [s1 + 0xd0] = a1\n  3641: a0 = 0xffffffffffffffff\n  3644: a1 = 0xffffffffffffffff\n  3647: a2 = u64 [s1 + 0x118]\n  3651: ra = 62, jump @916\n      : @97 [@dyn 31] (gas: 1)\n  3656: t0 = 64, jump @904\n      : @98 [@dyn 32] (gas: 1)\n  3661: ra = 66, jump @916\n      : @99 [@dyn 33] (gas: 1)\n  3666: t0 = 68, jump @884\n      : @100 [@dyn 34] (gas: 8)\n  3671: a4 = s1 + 0x700\n  3675: u64 [a4 + 0x18] = a3\n  3678: u64 [a4 + 0x10] = a2\n  3681: u64 [a4 + 0x8] = a1\n  3684: u64 [a4] = a0\n  3686: a1 = s1 + 0x700\n  3690: a0 = u64 [s1 + 0xf0]\n  3694: ra = 70, jump @22\n      : @101 [@dyn 35] (gas: 3)\n  3699: t0 = u64 [s1 + 0x30]\n  3702: a5 = u64 [s1 + 0x38]\n  3705: fallthrough\n      : @102 (gas: 22)\n  3706: a0 = u64 [s1 + 0x28]\n  3709: a0 = a0 | a5\n  3712: a1 = u64 [s1 + 0x58]\n  3715: a2 = u64 [s1 + 0x48]\n  3718: a1 = a1 | a2\n  3721: a2 = u64 [s1 + 0x50]\n  3724: a2 = a2 | t0\n  3727: a3 = u64 [s1 + 0x40]\n  3730: a3 = a3 + 0x1\n  3733: u64 [s1 + 1848] = 0\n  3737: u64 [s1 + 1840] = 0\n  3741: u64 [s1 + 1832] = 0\n  3745: a5 = s1 + 0x700\n  3749: u64 [a5 + 32] = 0x3\n  3753: u64 [a5 + 0x40] = a3\n  3756: u64 [a5 + 0x48] = a2\n  3759: u64 [a5 + 0x50] = a1\n  3762: u64 [a5 + 0x58] = a0\n  3765: a0 = s1 + 0x720\n  3769: a1 = s1 + 0x740\n  3773: ra = 0x56\n  3776: jump @22\n      : @103 (gas: 6)\n  3779: a0 = a5 | a1\n  3782: a1 = 0xffffffe0\n  3792: a1 = a4 <u a1\n  3795: a1 = 0 if t1 != 0\n  3797: a1 = 0 if a0 != 0\n  3799: jump @184 if a1 == 0\n      : @104 (gas: 7)\n  3803: u64 [s1 + 0x40] = a2\n  3806: i32 a1 = a4 + 0x20\n  3809: a0 = s1 + 0x4a0\n  3813: u64 [s1 + 0x28] = t2\n  3816: u64 [s1 + 0x38] = ra\n  3819: u64 [s1 + 0x30] = t0\n  3822: ra = 72, jump @17\n      : @105 [@dyn 36] (gas: 15)\n  3827: t0 = u64 [s1 + 0x30]\n  3830: ra = u64 [s1 + 0x38]\n  3833: t2 = u64 [s1 + 0x28]\n  3836: a3 = u64 [s1 + 0x68]\n  3839: a1 = s1 + 0x400\n  3843: a0 = u64 [a1 + 0xb8]\n  3847: a2 = s1 + 0x100\n  3851: u64 [a2 + 0x10] = a0\n  3854: a0 = u64 [a1 + 0xb0]\n  3858: u64 [a2 + 0x8] = a0\n  3861: a0 = u64 [a1 + 0xa8]\n  3865: u64 [s1 + 0xf8] = a0\n  3869: a0 = u64 [a1 + 0xa0]\n  3873: u64 [a2] = a0\n  3875: fallthrough\n      : @106 (gas: 10)\n  3876: a0 = u64 [s1 + 0x58]\n  3879: a1 = u64 [s1 + 0x48]\n  3882: a0 = a0 | a1\n  3885: u64 [s1 + 0xf0] = a0\n  3889: a0 = ra | t2\n  3892: u64 [s1 + 0xe8] = a0\n  3896: a0 = u64 [s1 + 0x50]\n  3899: a0 = a0 | t0\n  3902: u64 [s1 + 0xe0] = a0\n  3906: t0 = 74, jump @909\n      : @107 [@dyn 37] (gas: 1)\n  3911: ra = 76, jump @921\n      : @108 [@dyn 38] (gas: 7)\n  3916: u64 [s1 + 0xc0] = a0\n  3920: u64 [s1 + 0xd8] = a1\n  3924: a0 = u64 [s1 + 0x68]\n  3927: i32 a2 = a0 << 0x3\n  3930: a0 = 0xffffffffffffffff\n  3933: a1 = 0xffffffffffffffff\n  3936: ra = 78, jump @916\n      : @109 [@dyn 39] (gas: 10)\n  3941: u64 [s1 + 0xd0] = a0\n  3945: u64 [s1 + 0xc8] = a1\n  3949: a1 = u64 [s1 + 0xc0]\n  3953: a0 = a0 | a1\n  3956: u64 [s1 + 0xc0] = a0\n  3960: a0 = u64 [s1 + 0x118]\n  3964: i32 a2 = a0 + 0xffffffffffffff80\n  3967: a0 = 0xffffffffffffffff\n  3970: a1 = 0xffffffffffffffff\n  3973: ra = 80, jump @916\n      : @110 [@dyn 40] (gas: 7)\n  3978: a4 = u64 [s1 + 0x118]\n  3982: a2 = a4 <u 0x80\n  3986: a3 = u64 [s1 + 0xc0]\n  3990: a0 = a3 if a2 != 0\n  3993: a5 = u64 [s1 + 0xc8]\n  3997: a3 = u64 [s1 + 0xd8]\n  4001: t0 = 82, jump @911\n      : @111 [@dyn 41] (gas: 2)\n  4006: a4 = u64 [s1 + 0xd0]\n  4010: t0 = 84, jump @889\n      : @112 [@dyn 42] (gas: 20)\n  4015: a4 = u64 [s1 + 0x40]\n  4018: a0 = a0 | a4\n  4021: a4 = u64 [s1 + 0xe0]\n  4025: a1 = a1 | a4\n  4028: a4 = u64 [s1 + 0xe8]\n  4032: a3 = a3 | a4\n  4035: a4 = u64 [s1 + 0xf0]\n  4039: a2 = a2 | a4\n  4042: a5 = s1 + 0x700\n  4046: u64 [a5 + 96] = 0x3\n  4050: u64 [a5 + 0x90] = a2\n  4054: u64 [a5 + 0x98] = a3\n  4058: u64 [a5 + 0x88] = a1\n  4062: u64 [a5 + 0x80] = a0\n  4066: u64 [s1 + 1912] = 0\n  4070: u64 [s1 + 1904] = 0\n  4074: u64 [s1 + 1896] = 0\n  4078: a0 = s1 + 0x760\n  4082: a1 = s1 + 0x780\n  4086: ra = 86, jump @22\n      : @113 [@dyn 43] (gas: 12)\n  4091: a1 = u64 [s1 + 0x88]\n  4095: a4 = u64 [s1 + 0x70]\n  4098: a0 = a1 | a4\n  4101: a2 = u64 [s1 + 0x80]\n  4105: a3 = u64 [s1 + 0x78]\n  4108: a2 = a2 | a3\n  4111: a0 = a0 | a2\n  4114: a0 = a0 >> 0x20\n  4117: a2 = a2 | a4\n  4120: a2 = a2 << 0x20\n  4123: a0 = a0 | a2\n  4126: jump @184 if a0 != 0\n      : @114 (gas: 2)\n  4130: a0 = s1 + 0x440\n  4134: ra = 88, jump @17\n      : @115 [@dyn 44] (gas: 17)\n  4139: a0 = s1 + 0x400\n  4143: a3 = u64 [a0 + 0x58]\n  4146: a2 = u64 [a0 + 0x50]\n  4149: a1 = u64 [a0 + 0x48]\n  4152: a0 = a3 >u 0\n  4154: a4 = a2 >u 0\n  4156: a4 = a0 if a3 != 0\n  4159: u64 [s1 + 0xa0] = a1\n  4163: a0 = a1 >u 0\n  4165: u64 [s1 + 0x98] = a2\n  4169: u64 [s1 + 0x90] = a3\n  4173: a2 = a2 | a3\n  4176: u64 [s1 + 0xb8] = a0\n  4180: u64 [s1 + 0xc0] = a4\n  4184: u64 [s1 + 0xd0] = a2\n  4188: a0 = a4 if a2 != 0\n  4191: jump @201 if a0 != 0\n      : @116 (gas: 9)\n  4195: a0 = u64 [s1 + 0x440]\n  4199: u64 [s1 + 0xa8] = a0\n  4203: u64 [s1 + 1976] = 0\n  4207: u64 [s1 + 1968] = 0\n  4211: u64 [s1 + 1960] = 0\n  4215: u64 [s1 + 1952] = 0x4\n  4220: a0 = s1 + 0x420\n  4224: a1 = s1 + 0x7a0\n  4228: ra = 90, jump @21\n      : @117 [@dyn 45] (gas: 6)\n  4233: a4 = s1 + 0x400\n  4237: a0 = u64 [a4 + 0x30]\n  4240: a1 = u64 [a4 + 0x28]\n  4243: a2 = u64 [a4 + 0x20]\n  4246: a3 = u64 [a4 + 0x38]\n  4249: t0 = 92, jump @888\n      : @118 [@dyn 46] (gas: 12)\n  4254: t0 = a2 <u 0x1\n  4257: ra = a1 & 0x7f\n  4260: t2 = a5 & a0\n  4263: a4 = a5 & t1\n  4266: ra = a1 if a2 != 0\n  4269: a1 = ra <u 0x20\n  4272: a5 = a5 & a3\n  4275: a2 = a1\n  4277: a2 = 0 if a4 != 0\n  4279: a0 = t2 | a5\n  4282: a2 = 0 if a0 != 0\n  4284: jump @207 if t0 != a2\n      : @119 (gas: 1)\n  4288: t0 = 94, jump @895\n      : @120 [@dyn 47] (gas: 4)\n  4293: a0 = u64 [s1 + 0xa8]\n  4297: a0 = a0 <u 0x20\n  4300: u64 [s1 + 0xc8] = a0\n  4304: jump @129 if a3 == 0\n      : @121 (gas: 11)\n  4308: u64 [s1 + 0xf0] = a4\n  4312: u64 [s1 + 0xf8] = ra\n  4316: u64 [s1 + 0x100] = a5\n  4320: u64 [s1 + 0x110] = t2\n  4324: u64 [s1 + 1048] = 0\n  4328: u64 [s1 + 1040] = 0\n  4332: u64 [s1 + 1032] = 0\n  4336: a1 = s1 + 0x400\n  4340: u64 [s1 + 1024] = 0x4\n  4345: a0 = 0\n  4347: ra = 96, jump @19\n      : @122 [@dyn 48] (gas: 2)\n  4352: a1 = i32 [0x20134]\n  4357: jump @124 if a1 >u 31\n      : @123 (gas: 2)\n  4361: u32 [0x20134] = 0x20\n  4367: fallthrough\n      : @124 (gas: 87)\n  4368: a0 = sp + 0xffffffffffffffe0\n  4371: a2 = a0 & 0xffffffffffffffe0\n  4374: u64 [s1 + 0x108] = a2\n  4378: sp = a2\n  4380: a0 = 0x20140\n  4385: i32 a0 = a0 + 0\n  4387: i32 a2 = a2 + 0\n  4389: a1 = 0x20\n  4392: ecalli 6 // 'hash_keccak_256'\n  4394: a0 = u64 [s1 + 0xa8]\n  4398: a1 = a0 + 0x1f\n  4401: a0 = a1 <u a0\n  4404: a5 = u64 [s1 + 0xa0]\n  4408: a2 = a5 + a0\n  4411: a3 = a2 <u a5\n  4414: a3 = a0 if a0 == 0\n  4417: a4 = u64 [s1 + 0x98]\n  4421: a3 = a3 + a4\n  4424: u64 [s1 + 0xe8] = a3\n  4428: a3 = a3 << 0x3b\n  4431: a4 = a2 >> 0x5\n  4434: a4 = a4 | a3\n  4437: a0 = u64 [s1 + 0x108]\n  4441: t0 = u64 [a0 + 0x18]\n  4444: a2 = a2 << 0x3b\n  4447: a0 = u64 [a0 + 0x10]\n  4450: a1 = a1 >> 0x5\n  4453: a2 = a2 | a1\n  4456: t2 = reverse t0\n  4458: a0 = reverse a0\n  4460: a1 = u64 [s1 + 0xc8]\n  4464: a1 = 0 if a5 != 0\n  4466: a3 = u64 [s1 + 0xd0]\n  4470: a1 = 0 if a3 != 0\n  4472: a4 = 0 if a1 != 0\n  4474: a2 = 0 if a1 != 0\n  4476: t0 = t2 + a2\n  4479: a2 = t0 <u t2\n  4482: a5 = a0 + a2\n  4485: a4 = a4 + a5\n  4488: u64 [s1 + 0x118] = a4\n  4492: a5 = a4 ^ a0\n  4495: a3 = a4 <u a0\n  4498: a3 = a2 if a5 == 0\n  4501: u64 [s1 + 0xe0] = a3\n  4505: a2 = u64 [s1 + 0xf8]\n  4509: ra = a2 + 0x1f\n  4512: a4 = ra <u a2\n  4515: a3 = u64 [s1 + 0xf0]\n  4519: a2 = a3 + a4\n  4522: a5 = a2 <u a3\n  4525: a5 = a4 if a4 == 0\n  4528: t1 = u64 [s1 + 0x110]\n  4532: t1 = t1 + a5\n  4535: a4 = t1 << 0x3b\n  4538: a3 = a2 >> 0x5\n  4541: a3 = a3 | a4\n  4544: a2 = a2 << 0x3b\n  4547: a4 = ra >> 0x5\n  4550: a2 = a2 | a4\n  4553: a2 = a2 + t2\n  4556: u64 [s1 + 0xf8] = a2\n  4560: a4 = a2 <u t2\n  4563: t2 = t0\n  4565: a2 = a0 + a4\n  4568: a2 = a2 + a3\n  4571: a3 = a2 ^ a0\n  4574: u64 [s1 + 0xf0] = a2\n  4578: a2 = a2 <u a0\n  4581: a2 = a4 if a3 == 0\n  4584: a4 = u64 [s1 + 0xe8]\n  4588: a0 = u64 [s1 + 0x98]\n  4592: a0 = a4 <u a0\n  4595: a3 = u64 [s1 + 0x90]\n  4599: a0 = a0 + a3\n  4602: a3 = a4 >> 0x5\n  4605: a4 = a0 << 0x3b\n  4608: a3 = a3 | a4\n  4611: a4 = u64 [s1 + 0x108]\n  4615: t0 = u64 [a4]\n  4617: a4 = u64 [a4 + 0x8]\n  4620: a0 = a0 >> 0x5\n  4623: a3 = 0 if a1 != 0\n  4625: a0 = 0 if a1 != 0\n  4627: a1 = reverse a4\n  4629: a4 = reverse t0\n  4631: t0 = 98, jump @908\n      : @125 [@dyn 49] (gas: 24)\n  4636: t0 = a0 + a3\n  4639: a0 = u64 [s1 + 0x110]\n  4643: a0 = t1 <u a0\n  4646: a3 = u64 [s1 + 0x100]\n  4650: a0 = a0 + a3\n  4653: a3 = t1 >> 0x5\n  4656: a5 = a0 << 0x3b\n  4659: a3 = a3 | a5\n  4662: a0 = a0 >> 0x5\n  4665: a0 = a0 + a4\n  4668: a4 = u64 [s1 + 0x118]\n  4672: a3 = a3 + a1\n  4675: a1 = a3 <u a1\n  4678: a0 = a0 + a1\n  4681: a2 = a2 + a3\n  4684: u64 [s1 + 0xe8] = a2\n  4688: a1 = a2 <u a3\n  4691: a0 = a0 + a1\n  4694: u64 [s1 + 0xe0] = a0\n  4698: a0 = sp + 0xffffffffffffffe0\n  4701: t1 = a0 & 0xffffffffffffffe0\n  4704: sp = t1\n  4706: u64 [s1 + 0xd8] = t1\n  4710: fallthrough\n      : @126 (gas: 20)\n  4711: a0 = u64 [s1 + 0xf8]\n  4715: a0 = t2 <u a0\n  4718: a2 = u64 [s1 + 0xf0]\n  4722: a1 = a4 ^ a2\n  4725: a2 = a4 <u a2\n  4728: a2 = a0 if a1 == 0\n  4731: a5 = u64 [s1 + 0xe8]\n  4735: a0 = ra <u a5\n  4738: a3 = u64 [s1 + 0xe0]\n  4742: a1 = t0 ^ a3\n  4745: a3 = t0 <u a3\n  4748: a3 = a0 if a1 == 0\n  4751: a0 = ra ^ a5\n  4754: a0 = a0 | a1\n  4757: a3 = a2 if a0 == 0\n  4760: u64 [t1] = t2\n  4762: u64 [t1 + 0x8] = a4\n  4765: u64 [t1 + 0x10] = ra\n  4768: u64 [t1 + 0x18] = t0\n  4771: jump @129 if a3 == 0\n      : @127 (gas: 11)\n  4774: u64 [s1 + 2008] = 0\n  4778: u64 [s1 + 2000] = 0\n  4782: u64 [s1 + 1992] = 0\n  4786: u64 [s1 + 1984] = 0\n  4790: a1 = s1 + 0x7c0\n  4794: a0 = t1\n  4796: u64 [s1 + 0x110] = t2\n  4800: u64 [s1 + 0x118] = a4\n  4804: u64 [s1 + 0x108] = t0\n  4808: u64 [s1 + 0x100] = ra\n  4812: ra = 100, jump @22\n      : @128 [@dyn 50] (gas: 15)\n  4817: t1 = u64 [s1 + 0xd8]\n  4821: t0 = u64 [s1 + 0x108]\n  4825: a4 = u64 [s1 + 0x118]\n  4829: t2 = u64 [s1 + 0x110]\n  4833: t2 = t2 + 0x1\n  4836: a0 = t2 <u 0x1\n  4839: a4 = a4 + a0\n  4842: a0 = t2 | a4\n  4845: a0 = a0 <u 0x1\n  4848: a1 = u64 [s1 + 0x100]\n  4852: a0 = a0 + a1\n  4855: a1 = a0 <u a1\n  4858: t0 = t0 + a1\n  4861: ra = a0\n  4863: jump @126\n      : @129 (gas: 9)\n  4866: a0 = u64 [s1 + 0xc8]\n  4870: a0 = a0 ^ 0x1\n  4873: a4 = u64 [s1 + 0xa0]\n  4877: a1 = u64 [s1 + 0xb8]\n  4881: a0 = a1 if a4 != 0\n  4884: a1 = u64 [s1 + 0xc0]\n  4888: a2 = u64 [s1 + 0xd0]\n  4892: a0 = a1 if a2 != 0\n  4895: jump @141 if a0 == 0\n      : @130 (gas: 10)\n  4899: a0 = u64 [s1 + 0xa8]\n  4903: a0 = a0 & 0xffffffffffffffe0\n  4906: u64 [s1 + 0xb0] = a0\n  4910: u64 [s1 + 984] = 0\n  4914: u64 [s1 + 976] = 0\n  4918: u64 [s1 + 968] = 0\n  4922: a1 = s1 + 0x3c0\n  4926: u64 [s1 + 960] = 0x4\n  4931: a0 = 0\n  4933: ra = 102, jump @19\n      : @131 [@dyn 51] (gas: 7)\n  4938: a0 = sp + 0xffffffffffffffe0\n  4941: a0 = a0 & 0xffffffffffffffe0\n  4944: u64 [s1 + 0xf0] = a0\n  4948: sp = a0\n  4950: a1 = 0x20\n  4953: a0 = 0\n  4955: ra = 104, jump @26\n      : @132 [@dyn 52] (gas: 1)\n  4960: t0 = 106, jump @915\n      : @133 [@dyn 53] (gas: 5)\n  4965: ecalli 6 // 'hash_keccak_256'\n  4967: u64 [s1 + 272] = 0x20\n  4972: a5 = 0\n  4974: u64 [s1 + 280] = 0\n  4978: t0 = 108, jump @901\n      : @134 [@dyn 54] (gas: 15)\n  4983: t0 = u64 [a3]\n  4985: t1 = reverse a0\n  4987: a1 = reverse a1\n  4989: a3 = reverse a2\n  4991: a2 = reverse t0\n  4993: t0 = a2\n  4995: a0 = u64 [s1 + 0xf0]\n  4999: u64 [a0 + 0x18] = a2\n  5002: u64 [s1 + 0xc8] = a3\n  5006: u64 [a0 + 0x10] = a3\n  5009: u64 [s1 + 0xe0] = a1\n  5013: u64 [a0 + 0x8] = a1\n  5016: a3 = t1\n  5018: u64 [a0] = t1\n  5020: fallthrough\n      : @135 (gas: 26)\n  5021: t1 = t0\n  5023: t2 = a3\n  5025: a0 = u64 [s1 + 0xb0]\n  5029: u64 [s1 + 0xd8] = a4\n  5033: a0 = a4 <u a0\n  5036: a4 = a0 ^ 0x1\n  5039: u64 [s1 + 0xd0] = ra\n  5043: a4 = 0x1 if ra != 0\n  5046: a0 = u64 [s1 + 0x100]\n  5050: a2 = u64 [s1 + 0xf8]\n  5054: a0 = a0 | a2\n  5057: a4 = 0x1 if a0 != 0\n  5060: a1 = u64 [s1 + 0x88]\n  5064: ra = u64 [s1 + 0x110]\n  5068: a1 = a1 + ra\n  5071: a3 = u64 [s1 + 0x80]\n  5075: t0 = a5\n  5077: a3 = a3 + a5\n  5080: a2 = u64 [s1 + 0x70]\n  5083: a0 = u64 [s1 + 0x118]\n  5087: a2 = a2 + a0\n  5090: a0 = u64 [s1 + 0x78]\n  5093: a5 = u64 [s1 + 0x108]\n  5097: a0 = a0 + a5\n  5100: u64 [s1 + 0xe8] = t0\n  5104: jump @143 if a4 != 0\n      : @136 (gas: 13)\n  5108: a4 = a1 <u ra\n  5111: a3 = a3 + a4\n  5114: a5 = t0\n  5116: t0 = a3 ^ t0\n  5119: a5 = a3 <u a5\n  5122: a5 = a4 if t0 == 0\n  5125: a5 = a5 + a2\n  5128: t0 = a5 <u a2\n  5131: a4 = u64 [s1 + 0x118]\n  5135: a2 = a2 <u a4\n  5138: a0 = a0 + a2\n  5141: a0 = a0 + t0\n  5144: t0 = 110, jump @900\n      : @137 [@dyn 55] (gas: 3)\n  5149: u64 [s1 + 0xc0] = t2\n  5153: u64 [s1 + 0xb8] = t1\n  5157: jump @184 if a0 != 0\n      : @138 (gas: 3)\n  5161: a0 = s1 + 0x240\n  5165: u64 [s1 + 0x110] = ra\n  5169: ra = 112, jump @17\n      : @139 [@dyn 56] (gas: 13)\n  5174: a4 = s1 + 0x200\n  5178: a0 = u64 [a4 + 0x58]\n  5181: a1 = u64 [a4 + 0x50]\n  5184: a2 = u64 [a4 + 0x48]\n  5187: a3 = u64 [a4 + 0x40]\n  5190: a4 = s1 + 0x700\n  5194: u64 [a4 + 0xf8] = a0\n  5198: u64 [a4 + 0xf0] = a1\n  5202: u64 [a4 + 0xe8] = a2\n  5206: u64 [a4 + 0xe0] = a3\n  5210: a1 = s1 + 0x7e0\n  5214: a0 = u64 [s1 + 0xf0]\n  5218: ra = 114, jump @22\n      : @140 [@dyn 57] (gas: 57)\n  5223: ra = u64 [s1 + 0xc0]\n  5227: ra = ra + 0x1\n  5230: a0 = ra <u 0x1\n  5233: t0 = u64 [s1 + 0xe0]\n  5237: t0 = t0 + a0\n  5240: a0 = ra | t0\n  5243: a0 = a0 <u 0x1\n  5246: a1 = u64 [s1 + 0xc8]\n  5250: t1 = a1 + a0\n  5253: a1 = t1 <u a1\n  5256: a0 = u64 [s1 + 0xb8]\n  5260: a0 = a0 + a1\n  5263: a1 = u64 [s1 + 0x110]\n  5267: a2 = a1 + 0x20\n  5270: u64 [s1 + 0xc0] = a2\n  5274: a3 = a2 <u a1\n  5277: a1 = u64 [s1 + 0xe8]\n  5281: a2 = a1 + a3\n  5284: u64 [s1 + 0xb8] = a2\n  5288: a4 = a2 <u a1\n  5291: a4 = a3 if a3 == 0\n  5294: a1 = u64 [s1 + 0x118]\n  5298: t2 = a1 + a4\n  5301: a4 = t2 <u a1\n  5304: a1 = u64 [s1 + 0x108]\n  5308: a1 = a1 + a4\n  5311: u64 [s1 + 0x108] = a1\n  5315: a1 = u64 [s1 + 0xd8]\n  5319: a4 = a1 + 0x20\n  5322: a5 = a4 <u a1\n  5325: a2 = u64 [s1 + 0xd0]\n  5329: a1 = a2 + a5\n  5332: a2 = a1 <u a2\n  5335: a2 = a5 if a5 == 0\n  5338: a3 = u64 [s1 + 0xf8]\n  5342: a2 = a2 + a3\n  5345: a5 = a2 <u a3\n  5348: a3 = u64 [s1 + 0x100]\n  5352: a3 = a3 + a5\n  5355: u64 [s1 + 0x100] = a3\n  5359: a3 = t0\n  5361: u64 [s1 + 0xe0] = a3\n  5365: a5 = u64 [s1 + 0xf0]\n  5369: u64 [a5 + 0x8] = a3\n  5372: a3 = ra\n  5374: u64 [a5] = ra\n  5376: u64 [a5 + 0x10] = t1\n  5379: t0 = a0\n  5381: u64 [a5 + 0x18] = a0\n  5384: u64 [s1 + 0xc8] = t1\n  5388: a0 = u64 [s1 + 0xc0]\n  5392: u64 [s1 + 0x110] = a0\n  5396: a5 = u64 [s1 + 0xb8]\n  5400: u64 [s1 + 0x118] = t2\n  5404: ra = a1\n  5406: u64 [s1 + 0xf8] = a2\n  5410: jump @135\n      : @141 (gas: 8)\n  5413: a3 = u64 [s1 + 0xa8]\n  5417: a5 = u64 [s1 + 0x98]\n  5421: a0 = a3 | a5\n  5424: a2 = u64 [s1 + 0x90]\n  5428: a1 = a4 | a2\n  5431: a0 = a0 | a1\n  5434: t0 = u64 [s1 + 0x88]\n  5438: jump @156 if a0 != 0\n      : @142 (gas: 5)\n  5442: u64 [s1 + 256] = 0\n  5446: u64 [s1 + 248] = 0\n  5450: u64 [s1 + 264] = 0\n  5454: u64 [s1 + 272] = 0\n  5458: jump @159\n      : @143 (gas: 10)\n  5461: t0 = u64 [s1 + 0xa8]\n  5465: a4 = u64 [s1 + 0xb0]\n  5469: a4 = a4 ^ t0\n  5472: t2 = u64 [s1 + 0x98]\n  5476: a4 = a4 | t2\n  5479: t1 = u64 [s1 + 0xa0]\n  5483: ra = u64 [s1 + 0x90]\n  5487: a5 = t1 | ra\n  5490: a4 = a4 | a5\n  5493: jump @155 if a4 == 0\n      : @144 (gas: 14)\n  5497: a4 = u64 [s1 + 0x110]\n  5501: a4 = a1 <u a4\n  5504: a3 = a3 + a4\n  5507: a5 = u64 [s1 + 0xe8]\n  5511: t0 = a3 ^ a5\n  5514: a5 = a3 <u a5\n  5517: a5 = a4 if t0 == 0\n  5520: a5 = a5 + a2\n  5523: t0 = a5 <u a2\n  5526: a4 = u64 [s1 + 0x118]\n  5530: a2 = a2 <u a4\n  5533: a0 = a0 + a2\n  5536: a0 = a0 + t0\n  5539: t0 = 116, jump @900\n      : @145 [@dyn 58] (gas: 1)\n  5544: jump @184 if a0 != 0\n      : @146 (gas: 2)\n  5548: a0 = s1 + 0x3a0\n  5552: ra = 118, jump @17\n      : @147 [@dyn 59] (gas: 11)\n  5557: a1 = s1 + 0x300\n  5561: a0 = u64 [a1 + 0xb8]\n  5565: u64 [s1 + 0x110] = a0\n  5569: a0 = u64 [a1 + 0xb0]\n  5573: u64 [s1 + 0x108] = a0\n  5577: a0 = u64 [a1 + 0xa8]\n  5581: u64 [s1 + 0x100] = a0\n  5585: a0 = u64 [a1 + 0xa0]\n  5589: u64 [s1 + 0xf8] = a0\n  5593: a0 = u64 [s1 + 0xa8]\n  5597: t0 = 120, jump @903\n      : @148 [@dyn 60] (gas: 1)\n  5602: ra = 122, jump @921\n      : @149 [@dyn 61] (gas: 6)\n  5607: u64 [s1 + 0xe8] = a0\n  5611: u64 [s1 + 0xd0] = a1\n  5615: a0 = 0xffffffffffffffff\n  5618: a1 = 0xffffffffffffffff\n  5621: a2 = u64 [s1 + 0x118]\n  5625: ra = 124, jump @916\n      : @150 [@dyn 62] (gas: 1)\n  5630: t0 = 126, jump @904\n      : @151 [@dyn 63] (gas: 1)\n  5635: ra = 128, jump @916\n      : @152 [@dyn 64] (gas: 1)\n  5641: t0 = 130, jump @884\n      : @153 [@dyn 65] (gas: 12)\n  5647: a4 = s1 + 0x1000\n  5651: u64 [a4 + 0xfffffffffffff818] = a3\n  5655: a3 = s1 + 0x1000\n  5659: u64 [a3 + 0xfffffffffffff810] = a2\n  5663: a2 = s1 + 0x1000\n  5667: u64 [a2 + 0xfffffffffffff808] = a1\n  5671: a1 = s1 + 0x1000\n  5675: u64 [a1 + 0xfffffffffffff800] = a0\n  5679: a1 = s1 + 0x7ff\n  5683: a1 = a1 + 0x1\n  5686: a0 = u64 [s1 + 0xf0]\n  5690: ra = 132, jump @22\n      : @154 [@dyn 66] (gas: 5)\n  5696: t0 = u64 [s1 + 0xa8]\n  5700: t1 = u64 [s1 + 0xa0]\n  5704: t2 = u64 [s1 + 0x98]\n  5708: ra = u64 [s1 + 0x90]\n  5712: fallthrough\n      : @155 (gas: 33)\n  5713: a0 = t2 >> 0x3f\n  5716: a1 = ra << 0x1\n  5719: a0 = a0 | a1\n  5722: a1 = t1 >> 0x3f\n  5725: a2 = t2 << 0x1\n  5728: a1 = a1 | a2\n  5731: a2 = t0 >> 0x3f\n  5734: a3 = t1 << 0x1\n  5737: a2 = a2 | a3\n  5740: a3 = t0 << 0x1\n  5743: a3 = a3 + 0x1\n  5746: a4 = s1 + 0x1000\n  5750: u64 [a4 + 4294965304] = 0\n  5754: a4 = s1 + 0x1000\n  5758: u64 [a4 + 4294965296] = 0\n  5762: a4 = s1 + 0x1000\n  5766: u64 [a4 + 4294965288] = 0\n  5770: a5 = s1 + 0x1000\n  5774: u64 [a5 + 4294965280] = 0x4\n  5779: a4 = s1 + 0x1000\n  5783: u64 [a4 + 0xfffffffffffff840] = a3\n  5787: a3 = s1 + 0x1000\n  5791: u64 [a3 + 0xfffffffffffff848] = a2\n  5795: a2 = s1 + 0x1000\n  5799: u64 [a2 + 0xfffffffffffff850] = a1\n  5803: a1 = s1 + 0x1000\n  5807: u64 [a1 + 0xfffffffffffff858] = a0\n  5811: a0 = s1 + 0x7ff\n  5815: a0 = a0 + 0x21\n  5818: a1 = s1 + 0x7ff\n  5822: a1 = a1 + 0x41\n  5825: ra = 0x94\n  5829: jump @22\n      : @156 (gas: 9)\n  5832: a0 = u64 [s1 + 0x78]\n  5835: a1 = u64 [s1 + 0x70]\n  5838: a0 = a0 | a1\n  5841: a1 = 0xffffffe0\n  5851: a1 = t0 <u a1\n  5854: a3 = u64 [s1 + 0x80]\n  5858: a1 = 0 if a3 != 0\n  5860: a1 = 0 if a0 != 0\n  5862: jump @184 if a1 == 0\n      : @157 (gas: 3)\n  5866: i32 a1 = t0 + 0x20\n  5869: a0 = s1 + 0x3e0\n  5873: ra = 134, jump @17\n      : @158 [@dyn 67] (gas: 14)\n  5879: a2 = u64 [s1 + 0x90]\n  5883: a5 = u64 [s1 + 0x98]\n  5887: a4 = u64 [s1 + 0xa0]\n  5891: a3 = u64 [s1 + 0xa8]\n  5895: a1 = s1 + 0x300\n  5899: a0 = u64 [a1 + 0xf8]\n  5903: u64 [s1 + 0x110] = a0\n  5907: a0 = u64 [a1 + 0xf0]\n  5911: u64 [s1 + 0x108] = a0\n  5915: a0 = u64 [a1 + 0xe8]\n  5919: u64 [s1 + 0xf8] = a0\n  5923: a0 = u64 [a1 + 0xe0]\n  5927: u64 [s1 + 0x100] = a0\n  5931: fallthrough\n      : @159 (gas: 15)\n  5932: a0 = a4 >> 0x3f\n  5935: a1 = a5 << 0x1\n  5938: a0 = a0 | a1\n  5941: u64 [s1 + 0xf0] = a0\n  5945: a0 = a5 >> 0x3f\n  5948: a1 = a2 << 0x1\n  5951: a0 = a0 | a1\n  5954: u64 [s1 + 0xe8] = a0\n  5958: a0 = a3 >> 0x3f\n  5961: a1 = a4 << 0x1\n  5964: a0 = a0 | a1\n  5967: u64 [s1 + 0xe0] = a0\n  5971: a0 = a3 << 0x1\n  5974: u64 [s1 + 0xd8] = a0\n  5978: t0 = 136, jump @909\n      : @160 [@dyn 68] (gas: 1)\n  5984: ra = 138, jump @921\n      : @161 [@dyn 69] (gas: 7)\n  5990: u64 [s1 + 0xb8] = a0\n  5994: u64 [s1 + 0xd0] = a1\n  5998: a0 = u64 [s1 + 0xa8]\n  6002: i32 a2 = a0 << 0x3\n  6005: a0 = 0xffffffffffffffff\n  6008: a1 = 0xffffffffffffffff\n  6011: ra = 140, jump @916\n      : @162 [@dyn 70] (gas: 10)\n  6017: u64 [s1 + 0xc8] = a0\n  6021: u64 [s1 + 0xc0] = a1\n  6025: a1 = u64 [s1 + 0xb8]\n  6029: a0 = a0 | a1\n  6032: u64 [s1 + 0xb8] = a0\n  6036: a0 = u64 [s1 + 0x118]\n  6040: i32 a2 = a0 + 0xffffffffffffff80\n  6043: a0 = 0xffffffffffffffff\n  6046: a1 = 0xffffffffffffffff\n  6049: ra = 142, jump @916\n      : @163 [@dyn 71] (gas: 7)\n  6055: a4 = u64 [s1 + 0x118]\n  6059: a2 = a4 <u 0x80\n  6063: a3 = u64 [s1 + 0xb8]\n  6067: a0 = a3 if a2 != 0\n  6070: a5 = u64 [s1 + 0xc0]\n  6074: a3 = u64 [s1 + 0xd0]\n  6078: t0 = 144, jump @911\n      : @164 [@dyn 72] (gas: 2)\n  6084: a4 = u64 [s1 + 0xc8]\n  6088: t0 = 146, jump @889\n      : @165 [@dyn 73] (gas: 29)\n  6094: a4 = u64 [s1 + 0xd8]\n  6098: a0 = a0 | a4\n  6101: a4 = u64 [s1 + 0xe0]\n  6105: a1 = a1 | a4\n  6108: a4 = u64 [s1 + 0xe8]\n  6112: a3 = a3 | a4\n  6115: a4 = u64 [s1 + 0xf0]\n  6119: a2 = a2 | a4\n  6122: a5 = s1 + 0x1000\n  6126: u64 [a5 + 4294965344] = 0x4\n  6131: a4 = s1 + 0x7ff\n  6135: a4 = a4 + 0x91\n  6139: u64 [a4] = a2\n  6141: u64 [a4 + 0x8] = a3\n  6144: a2 = s1 + 0x1000\n  6148: u64 [a2 + 0xfffffffffffff888] = a1\n  6152: a1 = s1 + 0x1000\n  6156: u64 [a1 + 0xfffffffffffff880] = a0\n  6160: a0 = s1 + 0x1000\n  6164: u64 [a0 + 4294965368] = 0\n  6168: a0 = s1 + 0x1000\n  6172: u64 [a0 + 4294965360] = 0\n  6176: a0 = s1 + 0x1000\n  6180: u64 [a0 + 4294965352] = 0\n  6184: a0 = s1 + 0x7ff\n  6188: a0 = a0 + 0x61\n  6191: a1 = s1 + 0x7ff\n  6195: a1 = a1 + 0x81\n  6199: ra = 148, jump @22\n      : @166 [@dyn 74] (gas: 10)\n  6205: a0 = s1 + 0x7ff\n  6209: a0 = a0 + 0x91\n  6213: u64 [a0 + 40] = 0\n  6216: u64 [a0 + 32] = 0\n  6219: u64 [a0 + 24] = 0\n  6222: u64 [a0 + 16] = 0x8\n  6226: a0 = s1 + 0x380\n  6230: a1 = s1 + 0x7ff\n  6234: a1 = a1 + 0xa1\n  6238: ra = 150, jump @21\n      : @167 [@dyn 75] (gas: 24)\n  6244: a0 = u32 [s1 + 0x394]\n  6248: a0 = a0 << 0x20\n  6251: a1 = u64 [s1 + 0x398]\n  6255: u64 [s1 + 280] = 0x12cb274a\n  6263: a0 = a0 | 0x12cb274a\n  6269: a4 = s1 + 0x7ff\n  6273: a4 = a4 + 0x91\n  6277: u64 [a4 + 72] = 0\n  6280: u64 [a4 + 48] = 0x8\n  6284: a3 = u64 [0x20000]\n  6289: u64 [s1 + 0x108] = a3\n  6293: a2 = u64 [0x20008]\n  6298: u64 [s1 + 0x110] = a2\n  6302: u64 [a4 + 64] = 0\n  6305: u64 [a4 + 56] = 0\n  6308: u64 [a4 + 0x58] = a3\n  6311: u64 [a4 + 0x50] = a2\n  6314: u64 [a4 + 0x68] = a1\n  6317: u64 [a4 + 0x60] = a0\n  6320: a0 = s1 + 0x7ff\n  6324: a0 = a0 + 0xc1\n  6328: a1 = s1 + 0x7ff\n  6332: a1 = a1 + 0xe1\n  6336: ra = 152, jump @22\n      : @168 [@dyn 76] (gas: 10)\n  6342: a1 = s1 + 0x7ff\n  6346: a1 = a1 + 0x91\n  6350: u64 [a1 + 136] = 0\n  6354: u64 [a1 + 128] = 0\n  6358: u64 [a1 + 120] = 0\n  6361: u64 [a1 + 112] = 0x9\n  6365: a0 = s1 + 0x360\n  6369: a1 = s1 + 0x7ff\n  6373: a1 = a1 + 0x101\n  6377: ra = 154, jump @21\n      : @169 [@dyn 77] (gas: 21)\n  6383: a0 = u32 [s1 + 0x374]\n  6387: a0 = a0 << 0x20\n  6390: a2 = u64 [0x20010]\n  6395: a0 = a0 | 0x3b939fea\n  6401: a1 = u64 [s1 + 0x378]\n  6405: a3 = s1 + 0x7ff\n  6409: a3 = a3 + 0x91\n  6413: u64 [a3 + 168] = 0\n  6417: u64 [a3 + 0xb8] = a2\n  6421: a2 = u64 [0x20018]\n  6426: u64 [a3 + 160] = 0\n  6430: u64 [a3 + 152] = 0\n  6434: u64 [a3 + 144] = 0x9\n  6439: u64 [a3 + 0xb0] = a2\n  6443: u64 [a3 + 0xc8] = a1\n  6447: u64 [a3 + 0xc0] = a0\n  6451: a0 = s1 + 0x7ff\n  6455: a0 = a0 + 0x121\n  6459: a1 = s1 + 0x7ff\n  6463: a1 = a1 + 0x141\n  6467: ra = 156, jump @22\n      : @170 [@dyn 78] (gas: 10)\n  6473: a1 = s1 + 0x7ff\n  6477: a1 = a1 + 0x91\n  6481: u64 [a1 + 232] = 0\n  6485: u64 [a1 + 224] = 0\n  6489: u64 [a1 + 216] = 0\n  6493: u64 [a1 + 208] = 0xa\n  6498: a0 = s1 + 0x340\n  6502: a1 = s1 + 0x7ff\n  6506: a1 = a1 + 0x161\n  6510: ra = 158, jump @21\n      : @171 [@dyn 79] (gas: 23)\n  6516: a0 = u32 [s1 + 0x354]\n  6520: a0 = a0 << 0x20\n  6523: a1 = 0xdac66eda\n  6533: a2 = u64 [0x20020]\n  6538: a0 = a0 | a1\n  6541: a1 = u64 [s1 + 0x358]\n  6545: a3 = s1 + 0x7ff\n  6549: a3 = a3 + 0x91\n  6553: u64 [a3 + 264] = 0\n  6557: a5 = a3 + 0x100\n  6561: u64 [a5 + 0x18] = a2\n  6564: a2 = u64 [0x20028]\n  6569: u64 [a3 + 256] = 0\n  6573: u64 [a3 + 248] = 0\n  6577: u64 [a3 + 240] = 0xa\n  6582: u64 [a5 + 0x10] = a2\n  6585: u64 [a5 + 0x28] = a1\n  6588: u64 [a5 + 0x20] = a0\n  6591: a0 = s1 + 0x7ff\n  6595: a0 = a0 + 0x181\n  6599: a1 = s1 + 0x7ff\n  6603: a1 = a1 + 0x1a1\n  6607: ra = 160, jump @22\n      : @172 [@dyn 80] (gas: 9)\n  6613: u64 [s1 + 824] = 0\n  6617: a0 = u64 [s1 + 0x118]\n  6621: u64 [s1 + 0x330] = a0\n  6625: a0 = u64 [s1 + 0x108]\n  6629: u64 [s1 + 0x328] = a0\n  6633: a0 = s1 + 0x320\n  6637: a1 = u64 [s1 + 0x110]\n  6641: u64 [s1 + 0x320] = a1\n  6645: ra = 162, jump @762\n      : @173 [@dyn 81] (gas: 10)\n  6651: a1 = s1 + 0x7ff\n  6655: a1 = a1 + 0x91\n  6659: u64 [a1 + 328] = 0\n  6663: u64 [a1 + 320] = 0\n  6667: u64 [a1 + 312] = 0\n  6671: u64 [a1 + 304] = 0x9\n  6676: a0 = s1 + 0x300\n  6680: a1 = s1 + 0x7ff\n  6684: a1 = a1 + 0x1c1\n  6688: ra = 164, jump @21\n      : @174 [@dyn 82] (gas: 9)\n  6694: a1 = u64 [s1 + 0x300]\n  6698: a0 = u64 [s1 + 0x308]\n  6702: a2 = u32 [s1 + 0x310]\n  6706: u64 [s1 + 760] = 0\n  6710: u64 [s1 + 0x2f0] = a2\n  6714: u64 [s1 + 0x2e8] = a0\n  6718: a0 = s1 + 0x2e0\n  6722: u64 [s1 + 0x2e0] = a1\n  6726: ra = 166, jump @762\n      : @175 [@dyn 83] (gas: 10)\n  6732: a0 = s1 + 0x7ff\n  6736: a0 = a0 + 0x91\n  6740: u64 [a0 + 360] = 0\n  6744: u64 [a0 + 352] = 0\n  6748: u64 [a0 + 344] = 0\n  6752: u64 [a0 + 336] = 0xa\n  6757: a0 = s1 + 0x2c0\n  6761: a1 = s1 + 0x7ff\n  6765: a1 = a1 + 0x1e1\n  6769: ra = 168, jump @21\n      : @176 [@dyn 84] (gas: 9)\n  6775: a1 = u64 [s1 + 0x2c0]\n  6779: a0 = u64 [s1 + 0x2c8]\n  6783: a2 = u32 [s1 + 0x2d0]\n  6787: u64 [s1 + 696] = 0\n  6791: u64 [s1 + 0x2b0] = a2\n  6795: u64 [s1 + 0x2a8] = a0\n  6799: a0 = s1 + 0x2a0\n  6803: u64 [s1 + 0x2a0] = a1\n  6807: ra = 170, jump @762\n      : @177 [@dyn 85] (gas: 8)\n  6813: a0 = 0x30140\n  6818: u64 [s1 + 0x118] = a0\n  6822: i32 a0 = a0 + 0\n  6824: ra = 0xac\n  6828: ecalli 3 // 'caller'\n  6830: a2 = u64 [s1 + 0x118]\n  6834: t0 = 0xae\n  6838: jump @905\n      : @178 [@dyn 86] (gas: 2)\n  6841: a2 = u64 [s1 + 0x118]\n  6845: t0 = 174, jump @905\n      : @179 [@dyn 87] (gas: 18)\n  6851: u64 [s1 + 0x118] = a1\n  6855: a0 = a0 >> 0x20\n  6858: a1 = reverse a2\n  6860: a2 = a1 << 0x20\n  6863: a0 = a0 | a2\n  6866: u64 [s1 + 0x110] = a0\n  6870: a1 = a1 >> 0x20\n  6873: u64 [s1 + 0x108] = a1\n  6877: a0 = s1 + 0x7ff\n  6881: a0 = a0 + 0x91\n  6885: u64 [a0 + 392] = 0\n  6889: u64 [a0 + 384] = 0\n  6893: u64 [a0 + 376] = 0\n  6897: u64 [a0 + 368] = 0x7\n  6902: a0 = s1 + 0x280\n  6906: a1 = s1 + 0x7ff\n  6910: a1 = a1 + 0x201\n  6914: ra = 176, jump @21\n      : @180 [@dyn 88] (gas: 24)\n  6920: a0 = u32 [s1 + 0x294]\n  6924: a0 = a0 << 0x20\n  6927: a1 = u64 [s1 + 0x298]\n  6931: a4 = s1 + 0x100\n  6935: a2 = u64 [a4 + 0x8]\n  6938: a0 = a0 | a2\n  6941: a2 = s1 + 0x7ff\n  6945: a2 = a2 + 0x91\n  6949: u64 [a2 + 424] = 0\n  6953: u64 [a2 + 416] = 0\n  6957: u64 [a2 + 408] = 0\n  6961: a5 = a2 + 0x100\n  6965: u64 [a5 + 144] = 0x7\n  6970: u64 [a5 + 0xc8] = a1\n  6974: a1 = u64 [a4 + 0x10]\n  6977: u64 [a5 + 0xb8] = a1\n  6981: a1 = u64 [a4 + 0x18]\n  6984: u64 [a5 + 0xb0] = a1\n  6988: u64 [a5 + 0xc0] = a0\n  6992: a0 = s1 + 0x7ff\n  6996: a0 = a0 + 0x221\n  7000: a1 = s1 + 0x7ff\n  7004: a1 = a1 + 0x241\n  7008: ra = 178, jump @22\n      : @181 [@dyn 89] (gas: 15)\n  7014: a1 = s1 + 0x7ff\n  7018: a1 = a1 + 0x91\n  7022: u64 [a1 + 488] = 0\n  7026: u64 [a1 + 480] = 0\n  7030: u64 [a1 + 472] = 0\n  7034: u64 [a1 + 464] = 0x6\n  7039: u64 [a1 + 520] = 0\n  7043: u64 [a1 + 512] = 0\n  7047: u64 [a1 + 504] = 0\n  7051: u64 [a1 + 496] = 0xe10\n  7057: a0 = s1 + 0x7ff\n  7061: a0 = a0 + 0x261\n  7065: a1 = s1 + 0x7ff\n  7069: a1 = a1 + 0x281\n  7073: ra = 180, jump @22\n      : @182 [@dyn 90] (gas: 3)\n  7079: a0 = s1 + 0x260\n  7083: a1 = 0x40\n  7086: ra = 182, jump @17\n      : @183 [@dyn 91] (gas: 13)\n  7092: a4 = s1 + 0x200\n  7096: a3 = u64 [a4 + 0x78]\n  7099: a1 = u64 [a4 + 0x70]\n  7102: a2 = u64 [a4 + 0x68]\n  7105: a0 = u64 [a4 + 0x60]\n  7108: a3 = a3 | a2\n  7111: a2 = a0 | a1\n  7114: a2 = a2 | a3\n  7117: a2 = a2 >> 0x20\n  7120: a1 = a1 | a3\n  7123: a1 = a1 << 0x20\n  7126: a1 = a1 | a2\n  7129: jump @214 if a1 == 0\n      : @184 (gas: 1)\n  7133: trap\n      : @185 (gas: 6)\n  7134: a1 = 0x20140\n  7139: i32 a1 = a1 + 0\n  7141: a0 = 0x1\n  7144: a2 = 0\n  7146: ecalli 8 // 'seal_return'\n  7148: jump @189\n      : @186 (gas: 6)\n  7150: a1 = 0x20140\n  7155: i32 a1 = a1 + 0\n  7157: a0 = 0x1\n  7160: a2 = 0\n  7162: ecalli 8 // 'seal_return'\n  7164: jump @189\n      : @187 (gas: 6)\n  7166: a1 = 0x20140\n  7171: i32 a1 = a1 + 0\n  7173: a0 = 0x1\n  7176: a2 = 0\n  7178: ecalli 8 // 'seal_return'\n  7180: jump @189\n      : @188 (gas: 6)\n  7182: a1 = 0x20140\n  7187: i32 a1 = a1 + 0\n  7189: a0 = 0x1\n  7192: a2 = 0\n  7194: ecalli 8 // 'seal_return'\n  7196: fallthrough\n      : @189 (gas: 6)\n  7197: u64 [s1 + 336] = 0\n  7201: u64 [s1 + 328] = 0\n  7205: u64 [s1 + 320] = 0\n  7209: t0 = 0xb8\n  7213: a0 = 0x4e487b7100000000\n  7223: fallthrough\n      : @190 [@dyn 92] (gas: 4)\n  7224: a1 = s1 + 0x140\n  7228: u64 [s1 + 0x158] = a0\n  7232: a0 = 0\n  7234: ra = 186, jump @19\n      : @191 [@dyn 93] (gas: 7)\n  7240: u64 [s1 + 312] = 0\n  7244: u64 [s1 + 304] = 0\n  7248: u64 [s1 + 288] = 0x41\n  7253: a0 = 0x4\n  7256: a1 = s1 + 0x120\n  7260: u64 [s1 + 296] = 0\n  7264: ra = 188, jump @19\n      : @192 [@dyn 94] (gas: 2)\n  7270: a1 = i32 [0x20134]\n  7275: jump @194 if a1 >u 63\n      : @193 (gas: 3)\n  7279: u32 [0x20134] = 0x40\n  7285: a1 = 0x20140\n  7290: jump @213\n      : @194 (gas: 2)\n  7293: a1 = 0x20140\n  7298: jump @213\n      : @195 (gas: 6)\n  7301: u64 [s1 + 400] = 0\n  7305: u64 [s1 + 392] = 0\n  7309: u64 [s1 + 384] = 0\n  7313: t0 = 0xbe\n  7317: a0 = 0x4e487b7100000000\n  7327: fallthrough\n      : @196 [@dyn 95] (gas: 4)\n  7328: a1 = s1 + 0x180\n  7332: u64 [s1 + 0x198] = a0\n  7336: a0 = 0\n  7338: ra = 192, jump @19\n      : @197 [@dyn 96] (gas: 7)\n  7344: u64 [s1 + 376] = 0\n  7348: u64 [s1 + 368] = 0\n  7352: u64 [s1 + 352] = 0x22\n  7357: a0 = 0x4\n  7360: a1 = s1 + 0x160\n  7364: u64 [s1 + 360] = 0\n  7368: ra = 194, jump @19\n      : @198 [@dyn 97] (gas: 2)\n  7374: a1 = i32 [0x20134]\n  7379: jump @200 if a1 >u 63\n      : @199 (gas: 3)\n  7383: u32 [0x20134] = 0x40\n  7389: a1 = 0x20140\n  7394: jump @213\n      : @200 (gas: 2)\n  7397: a1 = 0x20140\n  7402: jump @213\n      : @201 (gas: 6)\n  7405: u64 [s1 + 496] = 0\n  7409: u64 [s1 + 488] = 0\n  7413: u64 [s1 + 480] = 0\n  7417: t0 = 0xc4\n  7421: a0 = 0x4e487b7100000000\n  7431: fallthrough\n      : @202 [@dyn 98] (gas: 4)\n  7432: a1 = s1 + 0x1e0\n  7436: u64 [s1 + 0x1f8] = a0\n  7440: a0 = 0\n  7442: ra = 198, jump @19\n      : @203 [@dyn 99] (gas: 7)\n  7448: u64 [s1 + 472] = 0\n  7452: u64 [s1 + 464] = 0\n  7456: u64 [s1 + 448] = 0x41\n  7461: a0 = 0x4\n  7464: a1 = s1 + 0x1c0\n  7468: u64 [s1 + 456] = 0\n  7472: ra = 200, jump @19\n      : @204 [@dyn 100] (gas: 2)\n  7478: a1 = i32 [0x20134]\n  7483: jump @206 if a1 >u 63\n      : @205 (gas: 3)\n  7487: u32 [0x20134] = 0x40\n  7493: a1 = 0x20140\n  7498: jump @213\n      : @206 (gas: 2)\n  7500: a1 = 0x20140\n  7505: jump @213\n      : @207 (gas: 6)\n  7507: u64 [s1 + 560] = 0\n  7511: u64 [s1 + 552] = 0\n  7515: u64 [s1 + 544] = 0\n  7519: t0 = 0xca\n  7523: a0 = 0x4e487b7100000000\n  7533: fallthrough\n      : @208 [@dyn 101] (gas: 4)\n  7534: a1 = s1 + 0x220\n  7538: u64 [s1 + 0x238] = a0\n  7542: a0 = 0\n  7544: ra = 204, jump @19\n      : @209 [@dyn 102] (gas: 7)\n  7550: u64 [s1 + 536] = 0\n  7554: u64 [s1 + 528] = 0\n  7558: u64 [s1 + 512] = 0x22\n  7563: a0 = 0x4\n  7566: a1 = s1 + 0x200\n  7570: u64 [s1 + 520] = 0\n  7574: ra = 206, jump @19\n      : @210 [@dyn 103] (gas: 2)\n  7580: a1 = i32 [0x20134]\n  7585: jump @212 if a1 >u 63\n      : @211 (gas: 3)\n  7589: u32 [0x20134] = 0x40\n  7595: a1 = 0x20140\n  7600: jump @213\n      : @212 (gas: 2)\n  7602: a1 = 0x20140\n  7607: fallthrough\n      : @213 (gas: 7)\n  7608: i32 a1 = a1 + 0\n  7610: a0 = 0x1\n  7613: a2 = 0x24\n  7616: ecalli 8 // 'seal_return'\n  7618: u64 [s1 + 0x118] = a0\n  7622: ra = 0xd0\n  7626: jump @26\n      : @214 (gas: 2)\n  7629: u64 [s1 + 0x118] = a0\n  7633: ra = 208, jump @26\n      : @215 [@dyn 104] (gas: 5)\n  7639: i32 a0 = a0 + 0\n  7641: a1 = 0\n  7643: a2 = 0\n  7645: ecalli 0 // 'call_data_copy'\n  7646: jump @15\n      : @216 (gas: 3)\n  7649: a0 = u64 [s1 + 0x118]\n  7653: a1 = 0\n  7655: ra = 210, jump @26\n      : @217 [@dyn 105] (gas: 5)\n  7661: i32 a1 = a0 + 0\n  7663: a0 = 0\n  7665: a2 = 0\n  7667: ecalli 8 // 'seal_return'\n  7669: jump @189\n      : @218 [@dyn 106] (gas: 4)\n  7672: a0 = 0x20130\n  7677: u64 [s1 + 0xf8] = a0\n  7681: a0 = i32 [0x20130]\n  7686: jump @220 if a0 >=u 4\n      : @219 (gas: 1)\n  7690: jump @637\n      : @220 (gas: 6)\n  7693: a0 = s1 + 0x1000\n  7697: i32 a0 = a0 + 0x420\n  7701: a1 = 0\n  7703: ra = 0xd6\n  7707: ecalli 1 // 'call_data_load'\n  7709: fallthrough\n      : @221 [@dyn 107] (gas: 3)\n  7710: a2 = s1 + 0x1078\n  7714: a0 = i32 [a2 + 0x3c4]\n  7718: jump @223 if a0 != 2376452955\n      : @222 (gas: 1)\n  7725: jump @540\n      : @223 (gas: 2)\n  7728: a3 = s1 + 0x1878\n  7732: jump @299 if a0 == 2514000705\n      : @224 (gas: 1)\n  7740: jump @260 if a0 == 2835717307\n      : @225 (gas: 1)\n  7748: jump @227 if a0 != 3266987844\n      : @226 (gas: 1)\n  7755: jump @561\n      : @227 (gas: 1)\n  7758: jump @329 if a0 == 3714247998\n      : @228 (gas: 1)\n  7766: jump @230 if a0 != 117300739\n      : @229 (gas: 1)\n  7773: jump @594\n      : @230 (gas: 1)\n  7776: jump @232 if a0 != 157198259\n      : @231 (gas: 1)\n  7783: jump @419\n      : @232 (gas: 1)\n  7786: jump @234 if a0 != 404098525\n      : @233 (gas: 1)\n  7793: jump @552\n      : @234 (gas: 1)\n  7796: jump @236 if a0 != 537198553\n      : @235 (gas: 1)\n  7803: jump @476\n      : @236 (gas: 1)\n  7806: jump @274 if a0 == 581501058\n      : @237 (gas: 1)\n  7814: jump @368 if a0 == 599290589\n      : @238 (gas: 1)\n  7822: jump @358 if a0 == 826074471\n      : @239 (gas: 1)\n  7830: jump @241 if a0 == 1789336856\n      : @240 (gas: 1)\n  7837: jump @455\n      : @241 (gas: 10)\n  7840: u64 [a2 + 1824] = 0\n  7844: u64 [a2 + 1816] = 0\n  7848: u64 [a2 + 1808] = 0\n  7852: u64 [a2 + 1800] = 0\n  7856: a0 = s1 + 0x1000\n  7860: i32 a0 = a0 + 0x780\n  7864: ra = 0xd8\n  7868: ecalli 11 // 'value_transferred'\n  7870: t0 = 0xda\n  7874: jump @898\n      : @242 [@dyn 108] (gas: 1)\n  7877: t0 = 218, jump @898\n      : @243 [@dyn 109] (gas: 8)\n  7883: a0 = u64 [a4 + 0x18]\n  7886: a1 = u64 [a4 + 0x20]\n  7889: a2 = u64 [a4 + 0x10]\n  7892: a3 = u64 [a4 + 0x8]\n  7895: a1 = a1 | a2\n  7898: a0 = a0 | a3\n  7901: a0 = a0 | a1\n  7904: jump @245 if a0 == 0\n      : @244 (gas: 1)\n  7907: jump @640\n      : @245 (gas: 4)\n  7910: a0 = u64 [s1 + 0xf8]\n  7914: a0 = i32 [a0]\n  7916: a1 = 0x23\n  7919: jump @247 if a1 <u a0\n      : @246 (gas: 1)\n  7922: jump @641\n      : @247 (gas: 5)\n  7925: a0 = s1 + 0x7ff\n  7929: a0 = a0 + 0x561\n  7933: ra = 0xdc\n  7937: t0 = 0x2ee\n  7941: jump @912\n      : @248 [@dyn 110] (gas: 14)\n  7944: a3 = s1 + 0x7ff\n  7948: a3 = a3 + 0x71\n  7951: a4 = a3 + 0x400\n  7955: a0 = u64 [a4 + 0xf0]\n  7959: a1 = u64 [a4 + 0xf8]\n  7963: a2 = u32 [a3 + 0x500]\n  7967: u64 [a3 + 1256] = 0\n  7971: u64 [a4 + 0xe0] = a2\n  7975: u64 [a4 + 0xd8] = a1\n  7979: a1 = s1 + 0x7ff\n  7983: a1 = a1 + 0x541\n  7987: u64 [a4 + 0xd0] = a0\n  7991: a0 = 0\n  7993: ra = 222, jump @19\n      : @249 [@dyn 111] (gas: 11)\n  7999: a1 = s1 + 0x7ff\n  8003: a1 = a1 + 0x71\n  8006: u64 [a1 + 1224] = 0\n  8010: u64 [a1 + 1216] = 0\n  8014: u64 [a1 + 1200] = 0x5\n  8019: a2 = a1\n  8021: a0 = 0x20\n  8024: a1 = s1 + 0x7ff\n  8028: a1 = a1 + 0x521\n  8032: u64 [a2 + 1208] = 0\n  8036: ra = 224, jump @19\n      : @250 [@dyn 112] (gas: 2)\n  8042: a1 = i32 [0x20134]\n  8047: jump @252 if a1 >u 63\n      : @251 (gas: 2)\n  8051: u32 [0x20134] = 0x40\n  8057: fallthrough\n      : @252 (gas: 12)\n  8058: a0 = sp + 0xffffffffffffffe0\n  8061: a2 = a0 & 0xffffffffffffffe0\n  8064: u64 [s1 + 0xf8] = a2\n  8068: sp = a2\n  8070: a0 = 0x20140\n  8075: i32 a0 = a0 + 0\n  8077: i32 a2 = a2 + 0\n  8079: a1 = 0x40\n  8082: ra = 0xe2\n  8086: ecalli 6 // 'hash_keccak_256'\n  8088: t0 = 0xe4\n  8092: jump @887\n      : @253 [@dyn 113] (gas: 1)\n  8095: t0 = 228, jump @887\n      : @254 [@dyn 114] (gas: 8)\n  8101: u64 [a5 + 0x40] = a3\n  8104: u64 [a5 + 0x38] = a2\n  8107: u64 [a5 + 0x30] = a1\n  8110: u64 [a5 + 0x28] = a0\n  8113: a0 = s1 + 0x7ff\n  8117: a0 = a0 + 0x501\n  8121: a1 = s1 + 0x17a0\n  8125: ra = 230, jump @21\n      : @255 [@dyn 115] (gas: 15)\n  8131: a1 = s1 + 0x7ff\n  8135: a1 = a1 + 0x71\n  8138: a2 = a1 + 0x400\n  8142: a0 = u64 [a2 + 0xa8]\n  8146: u64 [s1 + 0xf8] = a0\n  8150: a0 = u64 [a2 + 0xa0]\n  8154: u64 [s1 + 0xf0] = a0\n  8158: a0 = u64 [a2 + 0x98]\n  8162: u64 [s1 + 0xe8] = a0\n  8166: a0 = u64 [a2 + 0x90]\n  8170: u64 [s1 + 0xe0] = a0\n  8174: a0 = s1 + 0x7ff\n  8178: a0 = a0 + 0x4e1\n  8182: a1 = 0x40\n  8185: ra = 232, jump @17\n      : @256 [@dyn 116] (gas: 8)\n  8191: a3 = s1 + 0x7ff\n  8195: a3 = a3 + 0x71\n  8198: a5 = a3 + 0x400\n  8202: a0 = u64 [a5 + 0x88]\n  8206: a1 = u64 [a5 + 0x80]\n  8210: a2 = u64 [a5 + 0x78]\n  8213: a4 = u64 [a5 + 0x70]\n  8216: t0 = 234, jump @894\n      : @257 [@dyn 117] (gas: 1)\n  8222: jump @259 if a0 == 0\n      : @258 (gas: 1)\n  8225: jump @636\n      : @259 (gas: 15)\n  8228: a0 = u64 [s1 + 0xe0]\n  8232: a2 = a3 + 0x400\n  8236: u64 [a2 + 0x50] = a0\n  8239: a0 = u64 [s1 + 0xe8]\n  8243: u64 [a2 + 0x58] = a0\n  8246: a0 = u64 [s1 + 0xf0]\n  8250: u64 [a2 + 0x60] = a0\n  8253: a1 = s1 + 0x7ff\n  8257: a1 = a1 + 0x4c1\n  8261: a0 = u64 [s1 + 0xf8]\n  8265: u64 [a2 + 0x68] = a0\n  8268: a0 = a4\n  8270: u64 [s1 + 0xf8] = a4\n  8274: ra = 0x23a\n  8278: jump @19\n      : @260 (gas: 8)\n  8281: u64 [a3 + 32] = 0\n  8284: u64 [a3 + 24] = 0\n  8287: u64 [a3 + 16] = 0\n  8290: u64 [a3 + 8] = 0\n  8293: a0 = s1 + 0x2000\n  8297: i32 a0 = a0 + 0xfffffffffffff880\n  8301: ecalli 11 // 'value_transferred'\n  8303: fallthrough\n      : @261 (gas: 9)\n  8304: a3 = s1 + 0x1878\n  8308: a0 = u64 [a3 + 0x18]\n  8311: a1 = u64 [a3 + 0x20]\n  8314: a2 = u64 [a3 + 0x10]\n  8317: a3 = u64 [a3 + 0x8]\n  8320: a1 = a1 | a2\n  8323: a0 = a0 | a3\n  8326: a0 = a0 | a1\n  8329: jump @263 if a0 == 0\n      : @262 (gas: 1)\n  8332: jump @642\n      : @263 (gas: 4)\n  8335: a0 = u64 [s1 + 0xf8]\n  8339: a0 = i32 [a0]\n  8341: a1 = 0x43\n  8344: jump @265 if a1 <u a0\n      : @264 (gas: 1)\n  8347: jump @643\n      : @265 (gas: 4)\n  8350: a0 = s1 + 0x1120\n  8354: ra = 0xec\n  8358: t0 = 0x2ee\n  8362: jump @912\n      : @266 [@dyn 118] (gas: 30)\n  8365: a1 = s1 + 0x1078\n  8369: a0 = u64 [a1 + 0xa8]\n  8373: u64 [s1 + 0xf8] = a0\n  8377: a0 = u64 [a1 + 0xb0]\n  8381: u64 [s1 + 0xf0] = a0\n  8385: a0 = u64 [a1 + 0xb8]\n  8389: u64 [s1 + 0xe8] = a0\n  8393: a0 = u64 [a1 + 0xc0]\n  8397: u64 [s1 + 0xe0] = a0\n  8401: a0 = s1 + 0x2000\n  8405: i32 a0 = a0 + 0xfffffffffffff8a0\n  8409: a1 = 0x24\n  8412: ecalli 1 // 'call_data_load'\n  8414: a0 = s1 + 0x1878\n  8418: a1 = u64 [a0 + 0x28]\n  8421: u64 [s1 + 0xd8] = a1\n  8425: a1 = u64 [a0 + 0x30]\n  8428: u64 [s1 + 0xd0] = a1\n  8432: a1 = u64 [a0 + 0x38]\n  8435: u64 [s1 + 0xc8] = a1\n  8439: a0 = u64 [a0 + 0x40]\n  8442: u64 [s1 + 0xc0] = a0\n  8446: a0 = 0x30140\n  8451: u64 [s1 + 0xb8] = a0\n  8455: i32 a0 = a0 + 0\n  8457: ra = 0xee\n  8461: ecalli 3 // 'caller'\n  8463: a2 = u64 [s1 + 0xb8]\n  8467: t0 = 0xf0\n  8471: jump @905\n      : @267 [@dyn 119] (gas: 2)\n  8474: a2 = u64 [s1 + 0xb8]\n  8478: t0 = 240, jump @905\n      : @268 [@dyn 120] (gas: 30)\n  8484: a0 = a0 >> 0x20\n  8487: a2 = reverse a2\n  8489: a3 = a2 << 0x20\n  8492: a0 = a0 | a3\n  8495: a2 = a2 >> 0x20\n  8498: a3 = s1 + 0x1078\n  8502: a4 = u64 [s1 + 0xc0]\n  8506: u64 [a3 + 0x60] = a4\n  8509: a4 = u64 [s1 + 0xc8]\n  8513: u64 [a3 + 0x58] = a4\n  8516: a4 = u64 [s1 + 0xd0]\n  8520: u64 [a3 + 0x50] = a4\n  8523: a4 = u64 [s1 + 0xd8]\n  8527: u64 [a3 + 0x48] = a4\n  8530: a4 = u64 [s1 + 0xe0]\n  8534: u64 [a3 + 0x80] = a4\n  8538: a4 = u64 [s1 + 0xe8]\n  8542: u64 [a3 + 0x78] = a4\n  8545: a4 = u64 [s1 + 0xf0]\n  8549: u64 [a3 + 0x70] = a4\n  8552: a4 = u64 [s1 + 0xf8]\n  8556: u64 [a3 + 0x68] = a4\n  8559: u64 [a3 + 0x98] = a2\n  8563: u64 [a3 + 0x90] = a0\n  8567: u64 [a3 + 0x88] = a1\n  8571: a0 = s1 + 0x1100\n  8575: a1 = s1 + 0x10e0\n  8579: a2 = s1 + 0x10c0\n  8583: u64 [a3 + 160] = 0\n  8587: ra = 242, jump @830\n      : @269 [@dyn 121] (gas: 3)\n  8593: a0 = s1 + 0x10a0\n  8597: a1 = 0x40\n  8600: ra = 244, jump @17\n      : @270 [@dyn 122] (gas: 6)\n  8606: a3 = s1 + 0x1078\n  8610: a4 = u64 [a3 + 0x40]\n  8613: a1 = u64 [a3 + 0x38]\n  8616: a2 = u64 [a3 + 0x30]\n  8619: a0 = u64 [a3 + 0x28]\n  8622: t0 = 246, jump @891\n      : @271 [@dyn 123] (gas: 1)\n  8628: jump @273 if a1 == 0\n      : @272 (gas: 1)\n  8631: jump @636\n      : @273 (gas: 8)\n  8634: u64 [a3 + 32] = 0\n  8637: u64 [a3 + 24] = 0\n  8640: u64 [a3 + 8] = 0x1\n  8644: a1 = s1 + 0x1080\n  8648: u64 [a3 + 16] = 0\n  8651: u64 [s1 + 0xf8] = a0\n  8655: ra = 0x23a\n  8659: jump @19\n      : @274 (gas: 9)\n  8662: u64 [a2 + 1536] = 0\n  8666: u64 [a2 + 1528] = 0\n  8670: u64 [a2 + 1520] = 0\n  8674: u64 [a2 + 1512] = 0\n  8678: a0 = s1 + 0x1000\n  8682: i32 a0 = a0 + 0x660\n  8686: ecalli 11 // 'value_transferred'\n  8688: a3 = s1 + 0x1078\n  8692: fallthrough\n      : @275 (gas: 9)\n  8693: a4 = a3 + 0x500\n  8697: a0 = u64 [a4 + 0xf8]\n  8701: a1 = u64 [a3 + 0x600]\n  8705: a2 = u64 [a4 + 0xf0]\n  8709: a3 = u64 [a4 + 0xe8]\n  8713: a1 = a1 | a2\n  8716: a0 = a0 | a3\n  8719: a0 = a0 | a1\n  8722: jump @277 if a0 == 0\n      : @276 (gas: 1)\n  8725: jump @644\n      : @277 (gas: 3)\n  8728: a0 = u64 [s1 + 0xf8]\n  8732: a0 = i32 [a0]\n  8734: jump @279 if a0 >u 35\n      : @278 (gas: 1)\n  8738: jump @645\n      : @279 (gas: 9)\n  8741: a1 = s1 + 0x1078\n  8745: u64 [a1 + 1568] = 0\n  8749: u64 [a1 + 1560] = 0\n  8753: u64 [a1 + 1552] = 0\n  8757: u64 [a1 + 1544] = 0x7\n  8762: a0 = s1 + 0x7ff\n  8766: a0 = a0 + 0x161\n  8770: a1 = s1 + 0x1680\n  8774: ra = 248, jump @21\n      : @280 [@dyn 124] (gas: 13)\n  8780: a0 = s1 + 0x7ff\n  8784: a0 = a0 + 0x71\n  8787: a1 = u64 [a0 + 0xf8]\n  8791: u64 [s1 + 0xf8] = a1\n  8795: a1 = u64 [a0 + 0xf0]\n  8799: u64 [s1 + 0xf0] = a1\n  8803: a0 = u32 [a0 + 0x100]\n  8807: u64 [s1 + 0xe8] = a0\n  8811: a0 = 0x30140\n  8816: u64 [s1 + 0xe0] = a0\n  8820: i32 a0 = a0 + 0\n  8822: ecalli 3 // 'caller'\n  8824: fallthrough\n      : @281 (gas: 23)\n  8825: a2 = u64 [s1 + 0xe0]\n  8829: a0 = u64 [a2 + 0x8]\n  8832: a1 = u64 [a2]\n  8834: a2 = i32 [a2 + 0x10]\n  8837: a0 = reverse a0\n  8839: a3 = a0 >> 0x20\n  8842: a1 = reverse a1\n  8844: a4 = a1 << 0x20\n  8847: a3 = a3 | a4\n  8850: a0 = a0 << 0x20\n  8853: a2 = reverse a2\n  8855: a2 = a2 >> 0x20\n  8858: a0 = a0 | a2\n  8861: a1 = a1 >> 0x20\n  8864: a2 = u64 [s1 + 0xe8]\n  8868: a1 = a1 ^ a2\n  8871: a2 = u64 [s1 + 0xf0]\n  8875: a0 = a0 ^ a2\n  8878: a0 = a0 | a1\n  8881: a1 = u64 [s1 + 0xf8]\n  8885: a1 = a1 ^ a3\n  8888: a0 = a0 | a1\n  8891: jump @283 if a0 != 0\n      : @282 (gas: 1)\n  8894: jump @646\n      : @283 (gas: 4)\n  8897: a0 = s1 + 0x7ff\n  8901: a0 = a0 + 0x141\n  8905: a1 = 0x40\n  8908: ra = 250, jump @17\n      : @284 [@dyn 125] (gas: 14)\n  8914: a4 = s1 + 0x7ff\n  8918: a4 = a4 + 0x71\n  8921: t0 = u64 [a4 + 0xe8]\n  8925: a5 = u64 [a4 + 0xe0]\n  8929: a3 = u64 [a4 + 0xd8]\n  8933: a0 = u64 [a4 + 0xd0]\n  8937: a2 = a3 | t0\n  8940: a1 = a0 | a5\n  8943: a1 = a1 | a2\n  8946: a1 = a1 >> 0x20\n  8949: a2 = a2 | a5\n  8952: a2 = a2 << 0x20\n  8955: a1 = a1 | a2\n  8958: jump @286 if a1 == 0\n      : @285 (gas: 1)\n  8961: jump @636\n      : @286 (gas: 12)\n  8964: u64 [a4 + 192] = 0\n  8968: u64 [a4 + 184] = 0\n  8972: u64 [a4 + 176] = 0\n  8976: u64 [s1 + 0xf0] = a3\n  8980: a3 = 0x8c379a000000000\n  8990: a1 = s1 + 0x7ff\n  8994: a1 = a1 + 0x121\n  8998: u64 [a4 + 0xc8] = a3\n  9002: u64 [s1 + 0xf8] = a0\n  9006: u64 [s1 + 0xe8] = t0\n  9010: u64 [s1 + 0xe0] = a5\n  9014: ra = 252, jump @19\n      : @287 [@dyn 126] (gas: 1)\n  9020: t0 = 254, jump @892\n      : @288 [@dyn 127] (gas: 1)\n  9026: jump @290 if a0 != 0\n      : @289 (gas: 1)\n  9029: jump @636\n      : @290 (gas: 13)\n  9032: i32 a0 = a1 + 0x4\n  9035: a2 = s1 + 0x7ff\n  9039: a2 = a2 + 0x71\n  9042: a5 = 0\n  9044: u64 [a2 + 168] = 0\n  9048: u64 [a2 + 160] = 0\n  9052: u64 [a2 + 144] = 0x20\n  9057: a1 = s1 + 0x7ff\n  9061: a1 = a1 + 0x101\n  9065: u64 [a2 + 152] = 0\n  9069: u64 [s1 + 0xe8] = a3\n  9073: u64 [s1 + 0xe0] = a4\n  9077: ra = 256, jump @19\n      : @291 [@dyn 128] (gas: 9)\n  9083: a3 = u64 [s1 + 0xe8]\n  9087: a2 = u64 [s1 + 0xf0]\n  9091: a1 = u64 [s1 + 0xf8]\n  9095: a0 = u64 [s1 + 0xe0]\n  9099: a0 = a0 + 0xffffffffffffffdc\n  9102: a0 = a1 <u a0\n  9105: a0 = 0 if a2 != 0\n  9107: a0 = 0 if a3 != 0\n  9109: jump @293 if a0 != 0\n      : @292 (gas: 1)\n  9112: jump @636\n      : @293 (gas: 10)\n  9115: i32 a0 = a1 + 0x24\n  9118: a3 = s1 + 0x7ff\n  9122: a3 = a3 + 0x71\n  9125: u64 [a3 + 136] = 0\n  9129: u64 [a3 + 128] = 0\n  9133: u64 [a3 + 112] = 0x9\n  9137: a1 = s1 + 0x7ff\n  9141: a1 = a1 + 0xe1\n  9145: u64 [a3 + 120] = 0\n  9148: ra = 258, jump @19\n      : @294 [@dyn 129] (gas: 8)\n  9154: a2 = u64 [s1 + 0xf8]\n  9158: a0 = 0xffffffbc\n  9168: a0 = a2 <u a0\n  9171: a1 = u64 [s1 + 0xf0]\n  9175: a0 = 0 if a1 != 0\n  9177: a1 = u64 [s1 + 0xe8]\n  9181: a0 = 0 if a1 != 0\n  9183: jump @296 if a0 != 0\n      : @295 (gas: 1)\n  9186: jump @636\n      : @296 (gas: 12)\n  9189: i32 a0 = a2 + 0x44\n  9192: a1 = u64 [0x20050]\n  9197: a3 = s1 + 0x7ff\n  9201: a3 = a3 + 0x71\n  9204: u64 [a3 + 88] = 0\n  9207: u64 [a3 + 0x68] = a1\n  9210: a1 = 0x7200000000000000\n  9220: u64 [a3 + 0x60] = a1\n  9223: a1 = s1 + 0x7ff\n  9227: a1 = a1 + 0xc1\n  9231: u64 [a3 + 80] = 0\n  9234: ra = 260, jump @19\n      : @297 [@dyn 130] (gas: 3)\n  9240: a1 = 0x64\n  9243: a0 = u64 [s1 + 0xf8]\n  9247: ra = 262, jump @26\n      : @298 [@dyn 131] (gas: 5)\n  9253: i32 a1 = a0 + 0\n  9255: a0 = 0x1\n  9258: a2 = 0x64\n  9261: ecalli 8 // 'seal_return'\n  9263: fallthrough\n      : @299 (gas: 10)\n  9264: u64 [a2 + 2016] = 0\n  9268: u64 [a2 + 2008] = 0\n  9272: u64 [a2 + 2000] = 0\n  9276: u64 [a2 + 1992] = 0\n  9280: a0 = s1 + 0x2000\n  9284: i32 a0 = a0 + 0xfffffffffffff840\n  9288: ra = 0x108\n  9292: ecalli 11 // 'value_transferred'\n  9294: t0 = 0x10a\n  9298: jump @898\n      : @300 [@dyn 132] (gas: 1)\n  9301: t0 = 266, jump @898\n      : @301 [@dyn 133] (gas: 8)\n  9307: a0 = u64 [a4 + 0xd8]\n  9311: a1 = u64 [a4 + 0xe0]\n  9315: a2 = u64 [a4 + 0xd0]\n  9319: a3 = u64 [a4 + 0xc8]\n  9323: a1 = a1 | a2\n  9326: a0 = a0 | a3\n  9329: a0 = a0 | a1\n  9332: jump @303 if a0 == 0\n      : @302 (gas: 1)\n  9335: jump @648\n      : @303 (gas: 3)\n  9338: a0 = u64 [s1 + 0xf8]\n  9342: a0 = i32 [a0]\n  9344: jump @305 if a0 >u 3\n      : @304 (gas: 1)\n  9348: jump @649\n      : @305 (gas: 3)\n  9351: a0 = s1 + 0x1060\n  9355: a1 = 0x40\n  9358: ra = 268, jump @17\n      : @306 [@dyn 134] (gas: 18)\n  9364: a0 = s1 + 0x1078\n  9368: a1 = u64 [a0]\n  9370: u64 [s1 + 0x58] = a1\n  9373: a2 = a0 + 0xffffffffffffff00\n  9377: a1 = u64 [a2 + 0xf8]\n  9381: u64 [s1 + 0x68] = a1\n  9384: a1 = u64 [a2 + 0xf0]\n  9388: u64 [s1 + 0x60] = a1\n  9391: a0 = u64 [a2 + 0xe8]\n  9395: u64 [s1 + 0x70] = a0\n  9398: a1 = s1 + 0x1878\n  9402: u64 [a1 + 0] = 0\n  9404: u64 [a1 + 4294967288] = 0\n  9407: u64 [a1 + 4294967280] = 0\n  9410: u64 [a1 + 4294967272] = 0x4\n  9414: a0 = s1 + 0x1040\n  9418: a1 = s1 + 0x1860\n  9422: ra = 270, jump @21\n      : @307 [@dyn 135] (gas: 36)\n  9428: a4 = s1 + 0x7ff\n  9432: a4 = a4 + 0x71\n  9435: t2 = u64 [a4 + 0x7e0]\n  9439: ra = u64 [a4 + 0x7d8]\n  9443: t1 = u64 [a4 + 0x7e8]\n  9447: a4 = u64 [a4 + 0x7d0]\n  9451: a0 = t2 << 0x3f\n  9454: a1 = ra >> 0x1\n  9457: a0 = a0 | a1\n  9460: a1 = t1 << 0x3f\n  9463: a2 = t2 >> 0x1\n  9466: a1 = a1 | a2\n  9469: a2 = ra << 0x3f\n  9472: a3 = a4 >> 0x1\n  9475: a5 = a3 | a2\n  9478: a2 = t1 >> 0x1\n  9481: u64 [s1 + 0xf0] = a4\n  9485: a4 = a4 & 0x1\n  9488: a3 = -a4\n  9490: a1 = a1 & a3\n  9493: t0 = a3 & a0\n  9496: a2 = a2 & a3\n  9499: a0 = a5 & 0x7f\n  9502: u64 [s1 + 0xe8] = a0\n  9506: a5 = a0 if a4 == 0\n  9509: u64 [s1 + 0xb0] = a5\n  9513: a0 = a5 <u 0x20\n  9516: u64 [s1 + 0xa0] = t0\n  9520: a0 = 0 if t0 != 0\n  9522: u64 [s1 + 0xa8] = a1\n  9526: u64 [s1 + 0x98] = a2\n  9530: a1 = a1 | a2\n  9533: a0 = 0 if a1 != 0\n  9535: u64 [s1 + 0xf8] = a4\n  9539: a1 = a4 <u 0x1\n  9542: jump @309 if a1 == a0\n      : @308 (gas: 1)\n  9545: jump @650\n      : @309 (gas: 12)\n  9548: a2 = u64 [s1 + 0x68]\n  9551: a3 = u64 [s1 + 0x70]\n  9554: a0 = a3 | a2\n  9557: a1 = u64 [s1 + 0x60]\n  9560: a4 = u64 [s1 + 0x58]\n  9563: a1 = a1 | a4\n  9566: a0 = a0 | a1\n  9569: a0 = a0 >> 0x20\n  9572: a1 = a1 | a2\n  9575: a1 = a1 << 0x20\n  9578: a1 = a1 | a0\n  9581: jump @311 if a1 == 0\n      : @310 (gas: 1)\n  9584: jump @636\n      : @311 (gas: 17)\n  9587: a0 = a3\n  9589: u64 [s1 + 0xd0] = ra\n  9593: u64 [s1 + 0xd8] = t2\n  9597: u64 [s1 + 0xe0] = t1\n  9601: a1 = u64 [s1 + 0xb0]\n  9605: a3 = s1 + 0x7ff\n  9609: a3 = a3 + 0x71\n  9612: a4 = a3 + 0x700\n  9616: u64 [a4 + 0xb0] = a1\n  9620: a1 = u64 [s1 + 0xa0]\n  9624: u64 [a4 + 0xb8] = a1\n  9628: a1 = u64 [s1 + 0xa8]\n  9632: u64 [a4 + 0xc0] = a1\n  9636: a1 = s1 + 0x1020\n  9640: a2 = u64 [s1 + 0x98]\n  9644: u64 [a4 + 0xc8] = a2\n  9648: ra = 272, jump @19\n      : @312 [@dyn 136] (gas: 2)\n  9654: a0 = u64 [s1 + 0xf8]\n  9658: jump @314 if a0 == 0\n      : @313 (gas: 1)\n  9661: jump @617\n      : @314 (gas: 10)\n  9664: a0 = u64 [s1 + 0x68]\n  9667: a1 = u64 [s1 + 0x58]\n  9670: a0 = a0 | a1\n  9673: a1 = 0xffffffe0\n  9683: a3 = u64 [s1 + 0x70]\n  9686: a1 = a3 <u a1\n  9689: a2 = u64 [s1 + 0x60]\n  9692: a1 = 0 if a2 != 0\n  9694: a1 = 0 if a0 != 0\n  9696: jump @316 if a1 != 0\n      : @315 (gas: 1)\n  9699: jump @636\n      : @316 (gas: 16)\n  9702: a1 = u64 [s1 + 0xf0]\n  9706: a1 = a1 & 0xffffffffffffff00\n  9710: i32 a0 = a3 + 0x20\n  9713: a2 = s1 + 0x7ff\n  9717: a2 = a2 + 0x71\n  9720: a3 = u64 [s1 + 0xd0]\n  9724: a4 = a2 + 0x700\n  9728: u64 [a4 + 0x38] = a3\n  9731: u64 [a4 + 0x30] = a1\n  9734: a1 = u64 [s1 + 0xd8]\n  9738: u64 [a4 + 0x40] = a1\n  9741: a1 = s1 + 0x7ff\n  9745: a1 = a1 + 0x7a1\n  9749: a3 = u64 [s1 + 0xe0]\n  9753: u64 [a4 + 0x48] = a3\n  9756: ra = 274, jump @19\n      : @317 [@dyn 137] (gas: 8)\n  9762: t2 = 0\n  9764: t1 = 0\n  9766: u64 [s1 + 240] = 0\n  9770: a0 = u64 [s1 + 0xe8]\n  9774: a0 = a0 >u 0\n  9776: a0 = a0 << 0x5\n  9779: u64 [s1 + 0xf8] = a0\n  9783: fallthrough\n      : @318 (gas: 37)\n  9784: a1 = u64 [s1 + 0xf8]\n  9788: a0 = a1 + 0x3f\n  9791: a1 = a0 <u a1\n  9794: a2 = t2 + a1\n  9797: a0 = a0 & 0xffffffffffffffe0\n  9800: ra = u64 [s1 + 0x70]\n  9803: ra = ra + a0\n  9806: u64 [s1 + 0xf8] = ra\n  9810: a0 = ra <u a0\n  9813: t0 = u64 [s1 + 0x60]\n  9816: a3 = a2 + t0\n  9819: ra = a3 + a0\n  9822: a3 = ra ^ a2\n  9825: a4 = ra <u a2\n  9828: a4 = a0 if a3 == 0\n  9831: a0 = a2 <u t2\n  9834: a0 = a1 if a1 == 0\n  9837: a0 = a0 + t1\n  9840: a1 = a0 <u t1\n  9843: a2 = u64 [s1 + 0x68]\n  9846: a2 = a2 + a0\n  9849: a4 = a4 + a2\n  9852: a0 = a2 <u a0\n  9855: a2 = a4 <u a2\n  9858: t1 = u64 [s1 + 0x58]\n  9861: a3 = u64 [s1 + 0xf0]\n  9865: a3 = a3 + t1\n  9868: a1 = a1 + a3\n  9871: a0 = a0 + a1\n  9874: a5 = a0 + a2\n  9877: a0 = a5 >u 0\n  9879: a1 = a4 >u 0\n  9881: a1 = a0 if a5 != 0\n  9884: a0 = a4 | a5\n  9887: a2 = ra >u 0\n  9889: a2 = a1 if a0 != 0\n  9892: jump @320 if a2 == 0\n      : @319 (gas: 1)\n  9895: jump @699\n      : @320 (gas: 15)\n  9898: a0 = u64 [s1 + 0x70]\n  9901: a1 = u64 [s1 + 0xf8]\n  9905: a0 = a1 <u a0\n  9908: a1 = ra ^ t0\n  9911: a2 = ra <u t0\n  9914: a2 = a0 if a1 == 0\n  9917: a0 = u64 [s1 + 0x68]\n  9920: t2 = a4 <u a0\n  9923: a1 = a5 ^ t1\n  9926: a3 = a5 <u t1\n  9929: a3 = t2 if a1 == 0\n  9932: a0 = a0 ^ a4\n  9935: a0 = a0 | a1\n  9938: a3 = a2 if a0 == 0\n  9941: jump @322 if a3 == 0\n      : @321 (gas: 1)\n  9944: jump @699\n      : @322 (gas: 15)\n  9947: a2 = s1 + 0x7ff\n  9951: a2 = a2 + 0x71\n  9954: a0 = u64 [s1 + 0xf8]\n  9958: a3 = a2 + 0x700\n  9962: u64 [a3 + 0x10] = a0\n  9965: u64 [a2 + 0x718] = ra\n  9969: u64 [a3 + 0x20] = a4\n  9972: a0 = 0x40\n  9975: a1 = s1 + 0x7ff\n  9979: a1 = a1 + 0x781\n  9983: u64 [a3 + 0x28] = a5\n  9986: u64 [s1 + 0xe8] = ra\n  9990: u64 [s1 + 0xe0] = a4\n  9994: u64 [s1 + 0xf0] = a5\n  9998: ra = 276, jump @19\n      : @323 [@dyn 138] (gas: 27)\n 10004: a1 = s1 + 0x7ff\n 10008: a1 = a1 + 0x71\n 10011: a0 = u64 [s1 + 0x58]\n 10014: a2 = a1 + 0x600\n 10018: u64 [a2 + 0xc8] = a0\n 10022: a0 = u64 [s1 + 0x68]\n 10025: u64 [a2 + 0xc0] = a0\n 10029: a0 = u64 [s1 + 0x60]\n 10032: u64 [a2 + 0xb8] = a0\n 10036: a0 = u64 [s1 + 0x70]\n 10039: u64 [a2 + 0xb0] = a0\n 10043: a0 = u64 [s1 + 0xf0]\n 10047: u64 [a2 + 0xe8] = a0\n 10051: a0 = u64 [s1 + 0xe0]\n 10055: u64 [a2 + 0xe0] = a0\n 10059: a0 = u64 [s1 + 0xe8]\n 10063: u64 [a2 + 0xd8] = a0\n 10067: a4 = a1\n 10069: a0 = s1 + 0x7ff\n 10073: a0 = a0 + 0x761\n 10077: a1 = s1 + 0x7ff\n 10081: a1 = a1 + 0x741\n 10085: a2 = s1 + 0x7ff\n 10089: a2 = a2 + 0x721\n 10093: a3 = u64 [s1 + 0xf8]\n 10097: u64 [a4 + 0x6d0] = a3\n 10101: ra = 278, jump @793\n      : @324 [@dyn 139] (gas: 12)\n 10107: a3 = u64 [s1 + 0xe0]\n 10111: a4 = u64 [s1 + 0xe8]\n 10115: t0 = u64 [s1 + 0xf8]\n 10119: a0 = t0 | a3\n 10122: a1 = u64 [s1 + 0xf0]\n 10126: a1 = a1 | a4\n 10129: a0 = a0 | a1\n 10132: a0 = a0 >> 0x20\n 10135: a1 = a1 | a3\n 10138: a1 = a1 << 0x20\n 10141: a0 = a0 | a1\n 10144: jump @326 if a0 == 0\n      : @325 (gas: 1)\n 10147: jump @636\n      : @326 (gas: 32)\n 10150: a1 = s1 + 0x7ff\n 10154: a1 = a1 + 0x71\n 10157: a0 = u64 [a1 + 0x6f8]\n 10161: a2 = u64 [a1 + 0x708]\n 10165: u64 [s1 + 0xd8] = a2\n 10169: a2 = a3\n 10171: t1 = u64 [a1 + 0x6f0]\n 10175: a3 = u64 [a1 + 0x700]\n 10179: t2 = a0 ^ a4\n 10182: a5 = a0 <u a4\n 10185: ra = t1 <u t0\n 10188: a5 = ra if t2 == 0\n 10191: a1 = a3 - a2\n 10194: t2 = a1 - a5\n 10197: a1 = a1 <u a5\n 10200: a3 = a3 <u a2\n 10203: a2 = u64 [s1 + 0xd8]\n 10207: a3 = a2 - a3\n 10210: a2 = u64 [s1 + 0xf0]\n 10214: a3 = a3 - a2\n 10217: a3 = a3 - a1\n 10220: a0 = a0 - a4\n 10223: a0 = a0 - ra\n 10226: a1 = t1 - t0\n 10229: a0 = a0 | a3\n 10232: a2 = a1 | t2\n 10235: a2 = a2 | a0\n 10238: a0 = a0 | t2\n 10241: a2 = a2 >> 0x20\n 10244: a0 = a0 << 0x20\n 10247: a0 = a0 | a2\n 10250: jump @328 if a0 == 0\n      : @327 (gas: 1)\n 10253: jump @636\n      : @328 (gas: 4)\n 10256: a0 = t0\n 10258: u64 [s1 + 0xf8] = a1\n 10262: ra = 0x24e\n 10266: jump @26\n      : @329 (gas: 8)\n 10269: u64 [a3 + 256] = 0\n 10273: u64 [a3 + 248] = 0\n 10277: u64 [a3 + 240] = 0\n 10281: u64 [a3 + 232] = 0\n 10285: a0 = s1 + 0x2000\n 10289: i32 a0 = a0 + 0xfffffffffffff960\n 10293: ecalli 11 // 'value_transferred'\n 10295: fallthrough\n      : @330 (gas: 9)\n 10296: a3 = s1 + 0x1878\n 10300: a0 = u64 [a3 + 0xf8]\n 10304: a1 = u64 [a3 + 0x100]\n 10308: a2 = u64 [a3 + 0xf0]\n 10312: a3 = u64 [a3 + 0xe8]\n 10316: a1 = a1 | a2\n 10319: a0 = a0 | a3\n 10322: a0 = a0 | a1\n 10325: jump @332 if a0 == 0\n      : @331 (gas: 1)\n 10328: jump @655\n      : @332 (gas: 4)\n 10331: a0 = u64 [s1 + 0xf8]\n 10335: a0 = i32 [a0]\n 10337: a1 = 0x43\n 10340: jump @334 if a1 <u a0\n      : @333 (gas: 1)\n 10343: jump @656\n      : @334 (gas: 6)\n 10346: a0 = 0xffffffff\n 10356: u64 [s1 + 0xf8] = a0\n 10360: a0 = s1 + 0x13e0\n 10364: ra = 0x118\n 10368: t0 = 0x2ee\n 10372: jump @912\n      : @335 [@dyn 140] (gas: 11)\n 10375: a1 = s1 + 0x1078\n 10379: a0 = u64 [a1 + 0x368]\n 10383: u64 [s1 + 0xf0] = a0\n 10387: a0 = u64 [a1 + 0x370]\n 10391: u64 [s1 + 0xd0] = a0\n 10395: a0 = u32 [a1 + 0x378]\n 10399: u64 [s1 + 0xc8] = a0\n 10403: a0 = s1 + 0x13c0\n 10407: ra = 0x11a\n 10411: t0 = 0x2f8\n 10415: jump @912\n      : @336 [@dyn 141] (gas: 3)\n 10418: t0 = 0x11c\n 10422: a1 = s1 + 0x1078\n 10426: fallthrough\n      : @337 [@dyn 142] (gas: 18)\n 10427: a2 = a1 + 0x300\n 10431: a0 = u64 [a2 + 0x58]\n 10434: u64 [s1 + 0xe8] = a0\n 10438: a0 = u64 [a2 + 0x50]\n 10441: u64 [s1 + 0xe0] = a0\n 10445: a0 = u64 [a2 + 0x48]\n 10448: u64 [s1 + 0xd8] = a0\n 10452: u64 [a1 + 832] = 0\n 10456: a0 = u64 [s1 + 0xc8]\n 10460: u64 [a2 + 0x38] = a0\n 10463: a0 = u64 [s1 + 0xd0]\n 10467: u64 [a2 + 0x30] = a0\n 10470: a2 = a1\n 10472: a1 = s1 + 0x13a0\n 10476: a0 = u64 [s1 + 0xf0]\n 10480: u64 [a2 + 0x328] = a0\n 10484: a0 = 0\n 10486: ra = 286, jump @19\n      : @338 [@dyn 143] (gas: 3)\n 10492: t0 = 0x120\n 10496: a1 = s1 + 0x1078\n 10500: fallthrough\n      : @339 [@dyn 144] (gas: 8)\n 10501: u64 [a1 + 800] = 0\n 10505: u64 [a1 + 792] = 0\n 10509: u64 [a1 + 776] = 0x1\n 10514: a2 = a1\n 10516: a0 = 0x20\n 10519: a1 = s1 + 0x1380\n 10523: u64 [a2 + 784] = 0\n 10527: ra = 290, jump @19\n      : @340 [@dyn 145] (gas: 3)\n 10533: a1 = 0x20134\n 10538: a0 = i32 [0x20134]\n 10543: jump @342 if a0 >u 63\n      : @341 (gas: 2)\n 10547: u32 [0x20134] = 0x40\n 10553: fallthrough\n      : @342 (gas: 15)\n 10554: a0 = sp + 0xffffffffffffffe0\n 10557: a2 = a0 & 0xffffffffffffffe0\n 10560: u64 [s1 + 0xc8] = a2\n 10564: sp = a2\n 10566: a0 = 0x20140\n 10571: i32 a0 = a0 + 0\n 10573: i32 a2 = a2 + 0\n 10575: u64 [s1 + 0xf0] = a1\n 10579: a1 = 0x40\n 10582: u64 [s1 + 0xd0] = a0\n 10586: ra = 0x124\n 10590: ecalli 6 // 'hash_keccak_256'\n 10592: a3 = u64 [s1 + 0xc8]\n 10596: t0 = 0x126\n 10600: jump @914\n      : @343 [@dyn 146] (gas: 2)\n 10603: a3 = u64 [s1 + 0xc8]\n 10607: t0 = 294, jump @914\n      : @344 [@dyn 147] (gas: 27)\n 10613: u64 [s1 + 0xc0] = a0\n 10617: a0 = reverse a1\n 10619: u64 [s1 + 0xb8] = a0\n 10623: a0 = reverse a2\n 10625: u64 [s1 + 0xb0] = a0\n 10629: a0 = reverse a3\n 10631: u64 [s1 + 0xa8] = a0\n 10635: a0 = sp + 0xffffffffffffffe0\n 10638: a0 = a0 & 0xffffffffffffffe0\n 10641: u64 [s1 + 0xc8] = a0\n 10645: sp = a0\n 10647: a0 = u64 [s1 + 0xd8]\n 10651: a0 = a0 & 0xffffffffffffffff\n 10654: a2 = u64 [s1 + 0xe0]\n 10658: a1 = a2 & 0xffffffffffffffff\n 10661: a2 = u64 [s1 + 0xf8]\n 10665: a3 = u64 [s1 + 0xe8]\n 10669: a2 = a2 & a3\n 10672: a3 = s1 + 0x1078\n 10676: u64 [a3 + 768] = 0\n 10680: a4 = a3 + 0x200\n 10684: u64 [a4 + 0xf8] = a2\n 10688: u64 [a4 + 0xf0] = a1\n 10692: a1 = s1 + 0x1360\n 10696: u64 [a4 + 0xe8] = a0\n 10700: a0 = 0\n 10702: ra = 296, jump @19\n      : @345 [@dyn 148] (gas: 14)\n 10708: a0 = u64 [s1 + 0xa8]\n 10712: a1 = s1 + 0x1078\n 10716: a2 = a1 + 0x200\n 10720: u64 [a2 + 0xe0] = a0\n 10724: a0 = u64 [s1 + 0xb0]\n 10728: u64 [a2 + 0xd8] = a0\n 10732: a0 = u64 [s1 + 0xb8]\n 10736: u64 [a2 + 0xd0] = a0\n 10740: a3 = a1\n 10742: a0 = 0x20\n 10745: a1 = s1 + 0x1340\n 10749: a2 = u64 [s1 + 0xc0]\n 10753: u64 [a3 + 0x2c8] = a2\n 10757: ra = 298, jump @19\n      : @346 [@dyn 149] (gas: 3)\n 10763: a1 = u64 [s1 + 0xf0]\n 10767: a0 = i32 [a1]\n 10769: jump @348 if a0 >u 63\n      : @347 (gas: 3)\n 10773: u32 [a1 + 0] = 0x40\n 10776: t0 = 0x12c\n 10780: jump @907\n      : @348 (gas: 1)\n 10783: t0 = 300, jump @907\n      : @349 [@dyn 150] (gas: 5)\n 10789: ra = 0x12e\n 10793: ecalli 6 // 'hash_keccak_256'\n 10795: a3 = u64 [s1 + 0xf8]\n 10799: t0 = 0x130\n 10803: jump @885\n      : @350 [@dyn 151] (gas: 2)\n 10806: a3 = u64 [s1 + 0xf8]\n 10810: t0 = 304, jump @885\n      : @351 [@dyn 152] (gas: 7)\n 10816: a1 = u64 [s1 + 0xc8]\n 10820: u64 [a1 + 0x18] = a3\n 10823: u64 [a1 + 0x10] = a2\n 10826: u64 [a1 + 0x8] = a4\n 10829: u64 [a1] = a0\n 10831: a0 = s1 + 0x1320\n 10835: ra = 306, jump @21\n      : @352 [@dyn 153] (gas: 3)\n 10841: t0 = 0x134\n 10845: a1 = s1 + 0x1078\n 10849: fallthrough\n      : @353 [@dyn 154] (gas: 12)\n 10850: a2 = a1 + 0x200\n 10854: a0 = u64 [a2 + 0xc0]\n 10858: u64 [s1 + 0xf8] = a0\n 10862: a0 = u64 [a2 + 0xb8]\n 10866: u64 [s1 + 0xf0] = a0\n 10870: a0 = u64 [a2 + 0xb0]\n 10874: u64 [s1 + 0xe8] = a0\n 10878: a0 = u64 [a2 + 0xa8]\n 10882: u64 [s1 + 0xe0] = a0\n 10886: a0 = s1 + 0x1300\n 10890: a1 = 0x40\n 10893: ra = 310, jump @17\n      : @354 [@dyn 155] (gas: 7)\n 10899: a3 = s1 + 0x1078\n 10903: a5 = a3 + 0x200\n 10907: a0 = u64 [a5 + 0xa0]\n 10911: a1 = u64 [a5 + 0x98]\n 10915: a2 = u64 [a5 + 0x90]\n 10919: a4 = u64 [a5 + 0x88]\n 10923: t0 = 312, jump @894\n      : @355 [@dyn 156] (gas: 1)\n 10929: jump @357 if a0 == 0\n      : @356 (gas: 1)\n 10932: jump @636\n      : @357 (gas: 14)\n 10935: a0 = u64 [s1 + 0xe0]\n 10939: a2 = a3 + 0x200\n 10943: u64 [a2 + 0x68] = a0\n 10946: a0 = u64 [s1 + 0xe8]\n 10950: u64 [a2 + 0x70] = a0\n 10953: a0 = u64 [s1 + 0xf0]\n 10957: u64 [a2 + 0x78] = a0\n 10960: a1 = s1 + 0x12e0\n 10964: a0 = u64 [s1 + 0xf8]\n 10968: u64 [a2 + 0x80] = a0\n 10972: a0 = a4\n 10974: u64 [s1 + 0xf8] = a4\n 10978: ra = 0x23a\n 10982: jump @19\n      : @358 (gas: 8)\n 10985: u64 [a2 + 1792] = 0\n 10989: u64 [a2 + 1784] = 0\n 10993: u64 [a2 + 1776] = 0\n 10997: u64 [a2 + 1768] = 0\n 11001: a0 = s1 + 0x1000\n 11005: i32 a0 = a0 + 0x760\n 11009: ecalli 11 // 'value_transferred'\n 11011: fallthrough\n      : @359 (gas: 10)\n 11012: a3 = s1 + 0x1078\n 11016: a4 = a3 + 0x600\n 11020: a0 = u64 [a4 + 0xf8]\n 11024: a1 = u64 [a3 + 0x700]\n 11028: a2 = u64 [a4 + 0xf0]\n 11032: a3 = u64 [a4 + 0xe8]\n 11036: a1 = a1 | a2\n 11039: a0 = a0 | a3\n 11042: a0 = a0 | a1\n 11045: jump @361 if a0 == 0\n      : @360 (gas: 1)\n 11048: jump @657\n      : @361 (gas: 3)\n 11051: a0 = u64 [s1 + 0xf8]\n 11055: a0 = i32 [a0]\n 11057: jump @363 if a0 >u 3\n      : @362 (gas: 1)\n 11061: jump @658\n      : @363 (gas: 4)\n 11064: a0 = s1 + 0x7ff\n 11068: a0 = a0 + 0x4a1\n 11072: a1 = 0x40\n 11075: ra = 314, jump @17\n      : @364 [@dyn 157] (gas: 8)\n 11081: a3 = s1 + 0x7ff\n 11085: a3 = a3 + 0x71\n 11088: a5 = a3 + 0x400\n 11092: a4 = u64 [a5 + 0x48]\n 11095: a1 = u64 [a5 + 0x40]\n 11098: a2 = u64 [a5 + 0x38]\n 11101: a0 = u64 [a5 + 0x30]\n 11104: t0 = 316, jump @891\n      : @365 [@dyn 158] (gas: 1)\n 11110: jump @367 if a1 == 0\n      : @366 (gas: 1)\n 11113: jump @636\n      : @367 (gas: 9)\n 11116: u64 [a3 + 1064] = 0\n 11120: u64 [a3 + 1056] = 0\n 11124: u64 [a3 + 1040] = 0x12\n 11129: a1 = s1 + 0x7ff\n 11133: a1 = a1 + 0x481\n 11137: u64 [a3 + 1048] = 0\n 11141: u64 [s1 + 0xf8] = a0\n 11145: ra = 0x23a\n 11149: jump @19\n      : @368 (gas: 9)\n 11152: u64 [a2 + 1696] = 0\n 11156: u64 [a2 + 1688] = 0\n 11160: u64 [a2 + 1680] = 0\n 11164: u64 [a2 + 1672] = 0\n 11168: a0 = s1 + 0x1000\n 11172: i32 a0 = a0 + 0x700\n 11176: ra = 0x13e\n 11180: ecalli 11 // 'value_transferred'\n 11182: fallthrough\n      : @369 [@dyn 159] (gas: 3)\n 11183: a3 = s1 + 0x1078\n 11187: a4 = a3 + 0x600\n 11191: t0 = 320, jump @910\n      : @370 [@dyn 160] (gas: 1)\n 11197: jump @372 if a0 == 0\n      : @371 (gas: 1)\n 11200: jump @659\n      : @372 (gas: 4)\n 11203: a0 = u64 [s1 + 0xf8]\n 11207: a0 = i32 [a0]\n 11209: a1 = 0x63\n 11212: jump @374 if a1 <u a0\n      : @373 (gas: 1)\n 11215: jump @660\n      : @374 (gas: 5)\n 11218: a0 = s1 + 0x7ff\n 11222: a0 = a0 + 0x461\n 11226: ra = 0x142\n 11230: t0 = 0x2ee\n 11234: jump @912\n      : @375 [@dyn 161] (gas: 15)\n 11237: a1 = s1 + 0x7ff\n 11241: a1 = a1 + 0x71\n 11244: a0 = u64 [a1 + 0x408]\n 11248: u64 [s1 + 0xa8] = a0\n 11252: a0 = u64 [a1 + 0x400]\n 11256: u64 [s1 + 0xe8] = a0\n 11260: a0 = u64 [a1 + 0x3f8]\n 11264: u64 [s1 + 0xf8] = a0\n 11268: a0 = u64 [a1 + 0x3f0]\n 11272: u64 [s1 + 0xf0] = a0\n 11276: a0 = s1 + 0x7ff\n 11280: a0 = a0 + 0x441\n 11284: ra = 0x144\n 11288: t0 = 0x2f8\n 11292: jump @912\n      : @376 [@dyn 162] (gas: 42)\n 11295: a1 = s1 + 0x7ff\n 11299: a1 = a1 + 0x71\n 11302: a2 = a1 + 0x300\n 11306: a0 = u64 [a2 + 0xe8]\n 11310: u64 [s1 + 0xa0] = a0\n 11314: a0 = u64 [a2 + 0xe0]\n 11318: u64 [s1 + 0x98] = a0\n 11322: a0 = u64 [a2 + 0xd8]\n 11326: u64 [s1 + 0x90] = a0\n 11330: a0 = u64 [a2 + 0xd0]\n 11334: u64 [s1 + 0x88] = a0\n 11338: a0 = s1 + 0x1000\n 11342: i32 a0 = a0 + 0x720\n 11346: a1 = 0x44\n 11349: ecalli 1 // 'call_data_load'\n 11351: a0 = s1 + 0x1078\n 11355: a2 = a0 + 0x600\n 11359: a1 = u64 [a2 + 0xc0]\n 11363: u64 [s1 + 0xe0] = a1\n 11367: a1 = u64 [a2 + 0xb8]\n 11371: u64 [s1 + 0xd0] = a1\n 11375: a1 = u64 [a2 + 0xb0]\n 11379: u64 [s1 + 0xc0] = a1\n 11383: a0 = u64 [a2 + 0xa8]\n 11387: u64 [s1 + 0xc8] = a0\n 11391: a0 = u64 [s1 + 0xe8]\n 11395: a0 = a0 << 0x20\n 11398: a0 = a0 >> 0x20\n 11401: a2 = s1 + 0x7ff\n 11405: a2 = a2 + 0x71\n 11408: u64 [a2 + 968] = 0\n 11412: u64 [s1 + 0x78] = a0\n 11415: a3 = a2 + 0x300\n 11419: u64 [a3 + 0xc0] = a0\n 11423: a0 = u64 [s1 + 0xf8]\n 11427: u64 [a3 + 0xb8] = a0\n 11431: a1 = s1 + 0x7ff\n 11435: a1 = a1 + 0x421\n 11439: a0 = u64 [s1 + 0xf0]\n 11443: u64 [a3 + 0xb0] = a0\n 11447: a0 = 0\n 11449: ra = 326, jump @19\n      : @377 [@dyn 163] (gas: 11)\n 11455: a1 = s1 + 0x7ff\n 11459: a1 = a1 + 0x71\n 11462: u64 [a1 + 936] = 0\n 11466: u64 [a1 + 928] = 0\n 11470: u64 [a1 + 912] = 0x1\n 11475: a2 = a1\n 11477: a0 = 0x20\n 11480: a1 = s1 + 0x7ff\n 11484: a1 = a1 + 0x401\n 11488: u64 [a2 + 920] = 0\n 11492: ra = 328, jump @19\n      : @378 [@dyn 164] (gas: 3)\n 11498: a1 = 0x20134\n 11503: a0 = i32 [0x20134]\n 11508: jump @380 if a0 >u 63\n      : @379 (gas: 2)\n 11512: u32 [0x20134] = 0x40\n 11518: fallthrough\n      : @380 (gas: 15)\n 11519: a0 = sp + 0xffffffffffffffe0\n 11522: a2 = a0 & 0xffffffffffffffe0\n 11525: u64 [s1 + 0xb0] = a2\n 11529: sp = a2\n 11531: a0 = 0x20140\n 11536: i32 a0 = a0 + 0\n 11538: i32 a2 = a2 + 0\n 11540: u64 [s1 + 0xb8] = a1\n 11544: a1 = 0x40\n 11547: u64 [s1 + 0xd8] = a0\n 11551: ra = 0x14a\n 11555: ecalli 6 // 'hash_keccak_256'\n 11557: a3 = u64 [s1 + 0xb0]\n 11561: t0 = 0x14c\n 11565: jump @914\n      : @381 [@dyn 165] (gas: 2)\n 11568: a3 = u64 [s1 + 0xb0]\n 11572: t0 = 332, jump @914\n      : @382 [@dyn 166] (gas: 20)\n 11578: u64 [s1 + 0x68] = a0\n 11581: a0 = reverse a1\n 11583: u64 [s1 + 0x60] = a0\n 11586: a0 = reverse a2\n 11588: u64 [s1 + 0x58] = a0\n 11591: a0 = reverse a3\n 11593: u64 [s1 + 0x50] = a0\n 11596: a0 = sp + 0xffffffffffffffe0\n 11599: a0 = a0 & 0xffffffffffffffe0\n 11602: u64 [s1 + 0x70] = a0\n 11605: sp = a0\n 11607: a0 = 0x30140\n 11612: u64 [s1 + 0xb0] = a0\n 11616: i32 a0 = a0 + 0\n 11618: u64 [s1 + 0x80] = a0\n 11622: ra = 0x14e\n 11626: ecalli 3 // 'caller'\n 11628: a2 = u64 [s1 + 0xb0]\n 11632: t0 = 0x150\n 11636: jump @882\n      : @383 [@dyn 167] (gas: 2)\n 11639: a2 = u64 [s1 + 0xb0]\n 11643: t0 = 336, jump @882\n      : @384 [@dyn 168] (gas: 9)\n 11649: u64 [a2 + 904] = 0\n 11653: a4 = a2 + 0x300\n 11657: u64 [a4 + 0x80] = a1\n 11661: u64 [a4 + 0x78] = a0\n 11664: a1 = s1 + 0x7ff\n 11668: a1 = a1 + 0x3e1\n 11672: u64 [a4 + 0x70] = a3\n 11675: a0 = 0\n 11677: ra = 338, jump @19\n      : @385 [@dyn 169] (gas: 16)\n 11683: a0 = u64 [s1 + 0x50]\n 11686: a1 = s1 + 0x7ff\n 11690: a1 = a1 + 0x71\n 11693: a2 = a1 + 0x300\n 11697: u64 [a2 + 0x68] = a0\n 11700: a0 = u64 [s1 + 0x58]\n 11703: u64 [a2 + 0x60] = a0\n 11706: a0 = u64 [s1 + 0x60]\n 11709: u64 [a2 + 0x58] = a0\n 11712: a3 = a1\n 11714: a0 = 0x20\n 11717: a1 = s1 + 0x7ff\n 11721: a1 = a1 + 0x3c1\n 11725: a2 = u64 [s1 + 0x68]\n 11728: u64 [a3 + 0x350] = a2\n 11732: ra = 340, jump @19\n      : @386 [@dyn 170] (gas: 3)\n 11738: a1 = u64 [s1 + 0xb8]\n 11742: a0 = i32 [a1]\n 11744: jump @388 if a0 >u 63\n      : @387 (gas: 2)\n 11748: u32 [a1 + 0] = 0x40\n 11751: fallthrough\n      : @388 (gas: 12)\n 11752: a0 = sp + 0xffffffffffffffe0\n 11755: a0 = a0 & 0xffffffffffffffe0\n 11758: u64 [s1 + 0x68] = a0\n 11761: sp = a0\n 11763: i32 a2 = a0 + 0\n 11765: a1 = 0x40\n 11768: a0 = u64 [s1 + 0xd8]\n 11772: ra = 0x156\n 11776: ecalli 6 // 'hash_keccak_256'\n 11778: a3 = u64 [s1 + 0x68]\n 11781: t0 = 0x158\n 11785: jump @885\n      : @389 [@dyn 171] (gas: 2)\n 11788: a3 = u64 [s1 + 0x68]\n 11791: t0 = 344, jump @885\n      : @390 [@dyn 172] (gas: 8)\n 11797: a1 = u64 [s1 + 0x70]\n 11800: u64 [a1 + 0x18] = a3\n 11803: u64 [a1 + 0x10] = a2\n 11806: u64 [a1 + 0x8] = a4\n 11809: u64 [a1] = a0\n 11811: a0 = s1 + 0x7ff\n 11815: a0 = a0 + 0x3a1\n 11819: ra = 346, jump @21\n      : @391 [@dyn 173] (gas: 10)\n 11825: a3 = s1 + 0x7ff\n 11829: a3 = a3 + 0x71\n 11832: t1 = u64 [a3 + 0x348]\n 11836: ra = u64 [a3 + 0x340]\n 11840: a5 = u64 [a3 + 0x338]\n 11844: t0 = u64 [a3 + 0x330]\n 11848: a0 = a5 & t1\n 11851: a1 = t0 & ra\n 11854: a0 = a0 & a1\n 11857: jump @413 if a0 == 4294967295\n      : @392 (gas: 22)\n 11862: a0 = u64 [s1 + 0xc8]\n 11866: a2 = t0 <u a0\n 11869: a1 = u64 [s1 + 0xc0]\n 11873: a0 = a5 ^ a1\n 11876: a4 = a5 <u a1\n 11879: u64 [s1 + 0x50] = a2\n 11882: a4 = a2 if a0 == 0\n 11885: a2 = u64 [s1 + 0xd0]\n 11889: t2 = ra <u a2\n 11892: a1 = u64 [s1 + 0xe0]\n 11896: a0 = t1 ^ a1\n 11899: a1 = t1 <u a1\n 11902: u64 [s1 + 0x40] = t2\n 11905: a1 = t2 if a0 == 0\n 11908: a2 = ra ^ a2\n 11911: a0 = a0 | a2\n 11914: a1 = a4 if a0 == 0\n 11917: u64 [s1 + 0x70] = t0\n 11920: u64 [s1 + 0x68] = a5\n 11923: u64 [s1 + 0x60] = t1\n 11926: u64 [s1 + 0x58] = ra\n 11929: jump @394 if a1 == 0\n      : @393 (gas: 1)\n 11932: jump @705\n      : @394 (gas: 7)\n 11935: u64 [s1 + 0x48] = a4\n 11938: a0 = u64 [s1 + 0xf0]\n 11942: a1 = u64 [s1 + 0x78]\n 11945: a0 = a0 | a1\n 11948: a1 = u64 [s1 + 0xf8]\n 11952: a0 = a0 | a1\n 11955: jump @396 if a0 != 0\n      : @395 (gas: 1)\n 11958: jump @714\n      : @396 (gas: 3)\n 11961: a0 = u64 [s1 + 0x80]\n 11965: ecalli 3 // 'caller'\n 11967: fallthrough\n      : @397 (gas: 7)\n 11968: a2 = u64 [s1 + 0xb0]\n 11972: a0 = u32 [a2 + 0x10]\n 11975: a1 = u64 [a2]\n 11977: a2 = u64 [a2 + 0x8]\n 11980: a0 = a0 | a1\n 11983: a0 = a0 | a2\n 11986: jump @399 if a0 != 0\n      : @398 (gas: 1)\n 11989: jump @716\n      : @399 (gas: 14)\n 11992: a2 = s1 + 0x7ff\n 11996: a2 = a2 + 0x71\n 11999: u64 [a2 + 808] = 0\n 12003: a0 = u64 [s1 + 0xf0]\n 12007: a3 = a2 + 0x300\n 12011: u64 [a3 + 0x10] = a0\n 12014: a0 = u64 [s1 + 0xf8]\n 12018: u64 [a3 + 0x18] = a0\n 12021: a1 = s1 + 0x7ff\n 12025: a1 = a1 + 0x381\n 12029: a0 = u64 [s1 + 0x78]\n 12032: u64 [a3 + 0x20] = a0\n 12035: a0 = 0\n 12037: ra = 348, jump @19\n      : @400 [@dyn 174] (gas: 11)\n 12043: a1 = s1 + 0x7ff\n 12047: a1 = a1 + 0x71\n 12050: u64 [a1 + 776] = 0\n 12054: u64 [a1 + 768] = 0\n 12058: u64 [a1 + 752] = 0x1\n 12063: a2 = a1\n 12065: a0 = 0x20\n 12068: a1 = s1 + 0x7ff\n 12072: a1 = a1 + 0x361\n 12076: u64 [a2 + 760] = 0\n 12080: ra = 350, jump @19\n      : @401 [@dyn 175] (gas: 3)\n 12086: a1 = u64 [s1 + 0xb8]\n 12090: a0 = i32 [a1]\n 12092: jump @403 if a0 >u 63\n      : @402 (gas: 2)\n 12096: u32 [a1 + 0] = 0x40\n 12099: fallthrough\n      : @403 (gas: 12)\n 12100: a0 = sp + 0xffffffffffffffe0\n 12103: a0 = a0 & 0xffffffffffffffe0\n 12106: u64 [s1 + 0x78] = a0\n 12109: sp = a0\n 12111: i32 a2 = a0 + 0\n 12113: a1 = 0x40\n 12116: a0 = u64 [s1 + 0xd8]\n 12120: ra = 0x160\n 12124: ecalli 6 // 'hash_keccak_256'\n 12126: a3 = u64 [s1 + 0x78]\n 12129: t0 = 0x162\n 12133: jump @914\n      : @404 [@dyn 176] (gas: 2)\n 12136: a3 = u64 [s1 + 0x78]\n 12139: t0 = 354, jump @914\n      : @405 [@dyn 177] (gas: 17)\n 12145: u64 [s1 + 0x38] = a0\n 12148: a0 = reverse a1\n 12150: u64 [s1 + 0x30] = a0\n 12153: a0 = reverse a2\n 12155: u64 [s1 + 0x28] = a0\n 12158: a0 = reverse a3\n 12160: u64 [s1 + 0x20] = a0\n 12163: a0 = sp + 0xffffffffffffffe0\n 12166: a0 = a0 & 0xffffffffffffffe0\n 12169: u64 [s1 + 0x78] = a0\n 12172: sp = a0\n 12174: a0 = u64 [s1 + 0x80]\n 12178: ra = 0x164\n 12182: ecalli 3 // 'caller'\n 12184: a2 = u64 [s1 + 0xb0]\n 12188: t0 = 0x166\n 12192: jump @882\n      : @406 [@dyn 178] (gas: 2)\n 12195: a2 = u64 [s1 + 0xb0]\n 12199: t0 = 358, jump @882\n      : @407 [@dyn 179] (gas: 9)\n 12205: u64 [a2 + 744] = 0\n 12209: a4 = a2 + 0x200\n 12213: u64 [a4 + 0xe0] = a1\n 12217: u64 [a4 + 0xd8] = a0\n 12221: a1 = s1 + 0x7ff\n 12225: a1 = a1 + 0x341\n 12229: u64 [a4 + 0xd0] = a3\n 12233: a0 = 0\n 12235: ra = 360, jump @19\n      : @408 [@dyn 180] (gas: 16)\n 12241: a0 = u64 [s1 + 0x20]\n 12244: a1 = s1 + 0x7ff\n 12248: a1 = a1 + 0x71\n 12251: a2 = a1 + 0x200\n 12255: u64 [a2 + 0xc8] = a0\n 12259: a0 = u64 [s1 + 0x28]\n 12262: u64 [a2 + 0xc0] = a0\n 12266: a0 = u64 [s1 + 0x30]\n 12269: u64 [a2 + 0xb8] = a0\n 12273: a3 = a1\n 12275: a0 = 0x20\n 12278: a1 = s1 + 0x7ff\n 12282: a1 = a1 + 0x321\n 12286: a2 = u64 [s1 + 0x38]\n 12289: u64 [a3 + 0x2b0] = a2\n 12293: ra = 362, jump @19\n      : @409 [@dyn 181] (gas: 3)\n 12299: a1 = u64 [s1 + 0xb8]\n 12303: a0 = i32 [a1]\n 12305: jump @411 if a0 >u 63\n      : @410 (gas: 2)\n 12309: u32 [a1 + 0] = 0x40\n 12312: fallthrough\n      : @411 (gas: 50)\n 12313: a0 = sp + 0xffffffffffffffe0\n 12316: a0 = a0 & 0xffffffffffffffe0\n 12319: u64 [s1 + 0xb8] = a0\n 12323: sp = a0\n 12325: i32 a2 = a0 + 0\n 12327: a1 = 0x40\n 12330: a0 = u64 [s1 + 0xd8]\n 12334: ecalli 6 // 'hash_keccak_256'\n 12336: a0 = u64 [s1 + 0xd0]\n 12340: a1 = u64 [s1 + 0x58]\n 12343: a0 = a1 - a0\n 12346: a2 = u64 [s1 + 0x48]\n 12349: a1 = a0 - a2\n 12352: a0 = a0 <u a2\n 12355: a2 = u64 [s1 + 0xe0]\n 12359: a3 = u64 [s1 + 0x60]\n 12362: a2 = a3 - a2\n 12365: a3 = u64 [s1 + 0x40]\n 12368: a2 = a2 - a3\n 12371: a2 = a2 - a0\n 12374: a0 = u64 [s1 + 0xc0]\n 12378: a3 = u64 [s1 + 0x68]\n 12381: a0 = a3 - a0\n 12384: a3 = u64 [s1 + 0x50]\n 12387: a0 = a0 - a3\n 12390: a3 = s1 + 0x1078\n 12394: a5 = a3 + 0x600\n 12398: u64 [a5 + 0xe0] = a2\n 12402: u64 [a5 + 0xd8] = a1\n 12406: u64 [a5 + 0xd0] = a0\n 12410: a4 = u64 [s1 + 0xb8]\n 12414: a0 = u64 [a4]\n 12416: a1 = u64 [s1 + 0xc8]\n 12420: a2 = u64 [s1 + 0x70]\n 12423: a1 = a2 - a1\n 12426: u64 [a5 + 0xc8] = a1\n 12430: a1 = u64 [a4 + 0x8]\n 12433: a2 = reverse a0\n 12435: a0 = u64 [s1 + 0x78]\n 12438: u64 [a0 + 0x18] = a2\n 12441: a3 = u64 [a4 + 0x10]\n 12444: a2 = u64 [a4 + 0x18]\n 12447: a1 = reverse a1\n 12449: u64 [a0 + 0x10] = a1\n 12452: a1 = reverse a3\n 12454: u64 [a0 + 0x8] = a1\n 12457: a1 = reverse a2\n 12459: u64 [a0] = a1\n 12461: a1 = s1 + 0x1740\n 12465: ra = 364, jump @22\n      : @412 [@dyn 182] (gas: 3)\n 12471: a3 = s1 + 0x7ff\n 12475: a3 = a3 + 0x71\n 12478: fallthrough\n      : @413 (gas: 32)\n 12479: a0 = u64 [s1 + 0xc8]\n 12483: a5 = a3 + 0x100\n 12487: u64 [a5 + 0x50] = a0\n 12490: a0 = u64 [s1 + 0x88]\n 12494: u64 [a5 + 0x70] = a0\n 12497: a0 = u64 [s1 + 0xf0]\n 12501: u64 [a5 + 0x90] = a0\n 12505: a0 = u64 [s1 + 0xc0]\n 12509: u64 [a5 + 0x58] = a0\n 12512: a0 = u64 [s1 + 0x90]\n 12516: u64 [a5 + 0x78] = a0\n 12519: a0 = u64 [s1 + 0xf8]\n 12523: u64 [a5 + 0x98] = a0\n 12527: a0 = u64 [s1 + 0xd0]\n 12531: u64 [a5 + 0x60] = a0\n 12534: a0 = u64 [s1 + 0x98]\n 12538: u64 [a5 + 0x80] = a0\n 12542: a0 = u64 [s1 + 0xe8]\n 12546: u64 [a5 + 0xa0] = a0\n 12550: a0 = u64 [s1 + 0xe0]\n 12554: u64 [a5 + 0x68] = a0\n 12557: a0 = u64 [s1 + 0xa0]\n 12561: u64 [a5 + 0x88] = a0\n 12565: a0 = s1 + 0x7ff\n 12569: a0 = a0 + 0x201\n 12573: a1 = s1 + 0x7ff\n 12577: a1 = a1 + 0x1e1\n 12581: a2 = s1 + 0x7ff\n 12585: a2 = a2 + 0x1c1\n 12589: a4 = u64 [s1 + 0xa8]\n 12593: u64 [a5 + 0xa8] = a4\n 12597: ra = 366, jump @830\n      : @414 [@dyn 183] (gas: 4)\n 12603: a0 = s1 + 0x7ff\n 12607: a0 = a0 + 0x1a1\n 12611: a1 = 0x40\n 12614: ra = 368, jump @17\n      : @415 [@dyn 184] (gas: 8)\n 12620: a3 = s1 + 0x7ff\n 12624: a3 = a3 + 0x71\n 12627: a5 = a3 + 0x100\n 12631: a4 = u64 [a5 + 0x48]\n 12634: a1 = u64 [a5 + 0x40]\n 12637: a2 = u64 [a5 + 0x38]\n 12640: a0 = u64 [a5 + 0x30]\n 12643: t0 = 370, jump @891\n      : @416 [@dyn 185] (gas: 1)\n 12649: jump @418 if a1 == 0\n      : @417 (gas: 1)\n 12652: jump @636\n      : @418 (gas: 9)\n 12655: u64 [a3 + 296] = 0\n 12659: u64 [a3 + 288] = 0\n 12663: u64 [a3 + 272] = 0x1\n 12668: a1 = s1 + 0x7ff\n 12672: a1 = a1 + 0x181\n 12676: u64 [a3 + 280] = 0\n 12680: u64 [s1 + 0xf8] = a0\n 12684: ra = 0x23a\n 12688: jump @19\n      : @419 (gas: 10)\n 12691: u64 [a2 + 1056] = 0\n 12695: u64 [a2 + 1048] = 0\n 12699: u64 [a2 + 1040] = 0\n 12703: u64 [a2 + 1032] = 0\n 12707: a0 = s1 + 0x1000\n 12711: i32 a0 = a0 + 0x480\n 12715: ra = 0x174\n 12719: ecalli 11 // 'value_transferred'\n 12721: t0 = 0x176\n 12725: jump @906\n      : @420 [@dyn 186] (gas: 1)\n 12728: t0 = 374, jump @906\n      : @421 [@dyn 187] (gas: 8)\n 12734: a0 = u64 [a4 + 0x18]\n 12737: a1 = u64 [a4 + 0x20]\n 12740: a2 = u64 [a4 + 0x10]\n 12743: a3 = u64 [a4 + 0x8]\n 12746: a1 = a1 | a2\n 12749: a0 = a0 | a3\n 12752: a0 = a0 | a1\n 12755: jump @423 if a0 == 0\n      : @422 (gas: 1)\n 12758: jump @661\n      : @423 (gas: 4)\n 12761: a0 = u64 [s1 + 0xf8]\n 12765: a0 = i32 [a0]\n 12767: a1 = 0x43\n 12770: jump @425 if a1 <u a0\n      : @424 (gas: 1)\n 12773: jump @662\n      : @425 (gas: 4)\n 12776: a0 = s1 + 0x460\n 12780: ra = 0x178\n 12784: t0 = 0x2ee\n 12788: jump @912\n      : @426 [@dyn 188] (gas: 36)\n 12791: a1 = s1 + 0x400\n 12795: a0 = u64 [a1 + 0x70]\n 12798: u64 [s1 + 0xd8] = a0\n 12802: a0 = u64 [a1 + 0x68]\n 12805: u64 [s1 + 0xf0] = a0\n 12809: a0 = u64 [a1 + 0x60]\n 12812: u64 [s1 + 0xf8] = a0\n 12816: a0 = sp + 0xffffffffffffffe0\n 12819: a0 = a0 & 0xffffffffffffffe0\n 12822: u64 [s1 + 0xe0] = a0\n 12826: sp = a0\n 12828: a0 = s1 + 0x1000\n 12832: i32 a0 = a0 + 0x4a0\n 12836: a1 = 0x24\n 12839: ecalli 1 // 'call_data_load'\n 12841: a0 = s1 + 0x1078\n 12845: a4 = a0 + 0x400\n 12849: a1 = u64 [a4 + 0x40]\n 12852: a2 = u64 [a4 + 0x38]\n 12855: a3 = u64 [a4 + 0x30]\n 12858: a0 = u64 [a4 + 0x28]\n 12861: u64 [s1 + 0x90] = a1\n 12865: a4 = u64 [s1 + 0xe0]\n 12869: u64 [a4 + 0x18] = a1\n 12872: u64 [s1 + 0x88] = a2\n 12876: u64 [a4 + 0x10] = a2\n 12879: u64 [s1 + 0x80] = a3\n 12883: u64 [a4 + 0x8] = a3\n 12886: u64 [s1 + 0x78] = a0\n 12889: u64 [a4] = a0\n 12891: a0 = 0x30140\n 12896: u64 [s1 + 0xe8] = a0\n 12900: i32 a0 = a0 + 0\n 12902: u64 [s1 + 0xd0] = a0\n 12906: ecalli 3 // 'caller'\n 12908: fallthrough\n      : @427 (gas: 7)\n 12909: a2 = u64 [s1 + 0xe8]\n 12913: a0 = u32 [a2 + 0x10]\n 12916: a1 = u64 [a2]\n 12918: a2 = u64 [a2 + 0x8]\n 12921: a0 = a0 | a1\n 12924: a0 = a0 | a2\n 12927: jump @429 if a0 != 0\n      : @428 (gas: 1)\n 12930: jump @663\n      : @429 (gas: 9)\n 12933: a0 = u64 [s1 + 0xd8]\n 12937: a0 = a0 << 0x20\n 12940: a1 = a0 >> 0x20\n 12943: a0 = u64 [s1 + 0xf0]\n 12947: a2 = u64 [s1 + 0xf8]\n 12951: a0 = a0 | a2\n 12954: u64 [s1 + 0xd8] = a1\n 12958: a0 = a0 | a1\n 12961: jump @431 if a0 != 0\n      : @430 (gas: 1)\n 12964: jump @668\n      : @431 (gas: 23)\n 12967: a0 = u64 [s1 + 0xd0]\n 12971: ecalli 3 // 'caller'\n 12973: a2 = u64 [s1 + 0xe8]\n 12977: a0 = u64 [a2 + 0x8]\n 12980: a1 = i32 [a2 + 0x10]\n 12983: a2 = u64 [a2]\n 12985: a0 = reverse a0\n 12987: a3 = a0 << 0x20\n 12990: a1 = reverse a1\n 12992: a1 = a1 >> 0x20\n 12995: a3 = a3 | a1\n 12998: a0 = a0 >> 0x20\n 13001: a1 = reverse a2\n 13003: a2 = a1 << 0x20\n 13006: a0 = a0 | a2\n 13009: a1 = a1 >> 0x20\n 13012: u64 [s1 + 1112] = 0\n 13016: u64 [s1 + 0x450] = a1\n 13020: u64 [s1 + 0x448] = a0\n 13024: a1 = s1 + 0x440\n 13028: u64 [s1 + 0x440] = a3\n 13032: a0 = 0\n 13034: ra = 378, jump @19\n      : @432 [@dyn 189] (gas: 7)\n 13040: u64 [s1 + 1080] = 0\n 13044: u64 [s1 + 1072] = 0\n 13048: u64 [s1 + 1056] = 0x1\n 13053: a0 = 0x20\n 13056: a1 = s1 + 0x420\n 13060: u64 [s1 + 1064] = 0\n 13064: ra = 380, jump @19\n      : @433 [@dyn 190] (gas: 3)\n 13070: a1 = 0x20134\n 13075: a0 = i32 [0x20134]\n 13080: jump @435 if a0 >u 63\n      : @434 (gas: 2)\n 13084: u32 [0x20134] = 0x40\n 13090: fallthrough\n      : @435 (gas: 15)\n 13091: a0 = sp + 0xffffffffffffffe0\n 13094: a2 = a0 & 0xffffffffffffffe0\n 13097: u64 [s1 + 0xb8] = a2\n 13101: sp = a2\n 13103: a0 = 0x20140\n 13108: i32 a0 = a0 + 0\n 13110: i32 a2 = a2 + 0\n 13112: u64 [s1 + 0xc8] = a1\n 13116: a1 = 0x40\n 13119: u64 [s1 + 0xc0] = a0\n 13123: ra = 0x17e\n 13127: ecalli 6 // 'hash_keccak_256'\n 13129: a3 = u64 [s1 + 0xb8]\n 13133: t0 = 0x180\n 13137: jump @914\n      : @436 [@dyn 191] (gas: 2)\n 13140: a3 = u64 [s1 + 0xb8]\n 13144: t0 = 384, jump @914\n      : @437 [@dyn 192] (gas: 22)\n 13150: u64 [s1 + 0xb0] = a0\n 13154: a0 = reverse a1\n 13156: u64 [s1 + 0xa8] = a0\n 13160: a0 = reverse a2\n 13162: u64 [s1 + 0xa0] = a0\n 13166: a0 = reverse a3\n 13168: u64 [s1 + 0x98] = a0\n 13172: a0 = sp + 0xffffffffffffffe0\n 13175: a0 = a0 & 0xffffffffffffffe0\n 13178: u64 [s1 + 0xb8] = a0\n 13182: sp = a0\n 13184: u64 [s1 + 1048] = 0\n 13188: a0 = u64 [s1 + 0xd8]\n 13192: a2 = s1 + 0x400\n 13196: u64 [a2 + 0x10] = a0\n 13199: a0 = u64 [s1 + 0xf0]\n 13203: u64 [a2 + 0x8] = a0\n 13206: a1 = s1 + 0x400\n 13210: a0 = u64 [s1 + 0xf8]\n 13214: u64 [a2] = a0\n 13216: a0 = 0\n 13218: ra = 386, jump @19\n      : @438 [@dyn 193] (gas: 12)\n 13224: a0 = u64 [s1 + 0x98]\n 13228: a3 = s1 + 0x300\n 13232: u64 [a3 + 0xf8] = a0\n 13236: a0 = u64 [s1 + 0xa0]\n 13240: u64 [a3 + 0xf0] = a0\n 13244: a0 = u64 [s1 + 0xa8]\n 13248: u64 [a3 + 0xe8] = a0\n 13252: a0 = 0x20\n 13255: a1 = s1 + 0x3e0\n 13259: a2 = u64 [s1 + 0xb0]\n 13263: u64 [a3 + 0xe0] = a2\n 13267: ra = 388, jump @19\n      : @439 [@dyn 194] (gas: 3)\n 13273: a1 = u64 [s1 + 0xc8]\n 13277: a0 = i32 [a1]\n 13279: jump @441 if a0 >u 63\n      : @440 (gas: 2)\n 13283: u32 [a1 + 0] = 0x40\n 13286: fallthrough\n      : @441 (gas: 24)\n 13287: a0 = sp + 0xffffffffffffffe0\n 13290: a0 = a0 & 0xffffffffffffffe0\n 13293: u64 [s1 + 0xc8] = a0\n 13297: sp = a0\n 13299: i32 a2 = a0 + 0\n 13301: a1 = 0x40\n 13304: a0 = u64 [s1 + 0xc0]\n 13308: ecalli 6 // 'hash_keccak_256'\n 13310: a3 = u64 [s1 + 0xc8]\n 13314: a0 = u64 [a3 + 0x18]\n 13317: a1 = u64 [a3 + 0x10]\n 13320: a2 = u64 [a3 + 0x8]\n 13323: a3 = u64 [a3]\n 13325: a4 = reverse a0\n 13327: a1 = reverse a1\n 13329: a2 = reverse a2\n 13331: a3 = reverse a3\n 13333: a0 = u64 [s1 + 0xb8]\n 13337: u64 [a0 + 0x18] = a3\n 13340: u64 [a0 + 0x10] = a2\n 13343: u64 [a0 + 0x8] = a1\n 13346: u64 [a0] = a4\n 13348: a1 = u64 [s1 + 0xe0]\n 13352: ra = 390, jump @22\n      : @442 [@dyn 195] (gas: 3)\n 13358: a0 = s1 + 0x3c0\n 13362: a1 = 0x40\n 13365: ra = 392, jump @17\n      : @443 [@dyn 196] (gas: 6)\n 13371: a4 = s1 + 0x300\n 13375: a0 = u64 [a4 + 0xd8]\n 13379: a1 = u64 [a4 + 0xd0]\n 13383: a2 = u64 [a4 + 0xc8]\n 13387: a3 = u64 [a4 + 0xc0]\n 13391: t0 = 394, jump @893\n      : @444 [@dyn 197] (gas: 1)\n 13397: jump @446 if a0 == 0\n      : @445 (gas: 1)\n 13400: jump @636\n      : @446 (gas: 12)\n 13403: a0 = u64 [s1 + 0x78]\n 13406: u64 [s1 + 0x3a0] = a0\n 13410: a0 = u64 [s1 + 0x80]\n 13414: u64 [s1 + 0x3a8] = a0\n 13418: a0 = u64 [s1 + 0x88]\n 13422: u64 [s1 + 0x3b0] = a0\n 13426: a1 = s1 + 0x3a0\n 13430: a0 = u64 [s1 + 0x90]\n 13434: u64 [s1 + 0x3b8] = a0\n 13438: a0 = a3\n 13440: u64 [s1 + 0xe0] = a3\n 13444: ra = 396, jump @19\n      : @447 [@dyn 198] (gas: 6)\n 13450: a0 = u64 [s1 + 0xd0]\n 13454: ra = 0x18e\n 13458: ecalli 3 // 'caller'\n 13460: a2 = u64 [s1 + 0xe8]\n 13464: t0 = 0x190\n 13468: jump @913\n      : @448 [@dyn 199] (gas: 2)\n 13471: a2 = u64 [s1 + 0xe8]\n 13475: t0 = 400, jump @913\n      : @449 [@dyn 200] (gas: 31)\n 13481: t0 = a1 | a0\n 13484: a3 = a3 >> 0x20\n 13487: a2 = reverse a2\n 13489: a1 = a2 << 0x20\n 13492: a1 = a1 | a3\n 13495: a2 = a2 >> 0x20\n 13498: u64 [s1 + 856] = 0\n 13502: a0 = u64 [s1 + 0xd8]\n 13506: u64 [s1 + 0x350] = a0\n 13510: a0 = u64 [s1 + 0xf0]\n 13514: u64 [s1 + 0x348] = a0\n 13518: a0 = u64 [s1 + 0xf8]\n 13522: u64 [s1 + 0x340] = a0\n 13526: u64 [s1 + 888] = 0\n 13530: a3 = u64 [0x200a8]\n 13535: a4 = u64 [0x200b0]\n 13540: a5 = u64 [0x200b8]\n 13545: a0 = u64 [0x200c0]\n 13550: u64 [s1 + 0x398] = a3\n 13554: u64 [s1 + 0x390] = a4\n 13558: u64 [s1 + 0x388] = a5\n 13562: u64 [s1 + 0x380] = a0\n 13566: u64 [s1 + 0x370] = a2\n 13570: u64 [s1 + 0x368] = a1\n 13574: a1 = 0x20\n 13577: a2 = s1 + 0x380\n 13581: a3 = s1 + 0x360\n 13585: a4 = s1 + 0x340\n 13589: u64 [s1 + 0x360] = t0\n 13593: a0 = u64 [s1 + 0xe0]\n 13597: ra = 402, jump @23\n      : @450 [@dyn 201] (gas: 3)\n 13603: a0 = s1 + 0x320\n 13607: a1 = 0x40\n 13610: ra = 404, jump @17\n      : @451 [@dyn 202] (gas: 2)\n 13616: a4 = s1 + 0x300\n 13620: t0 = 406, jump @899\n      : @452 [@dyn 203] (gas: 1)\n 13626: jump @454 if a1 == 0\n      : @453 (gas: 1)\n 13629: jump @636\n      : @454 (gas: 8)\n 13632: u64 [s1 + 792] = 0\n 13636: u64 [s1 + 784] = 0\n 13640: u64 [s1 + 776] = 0\n 13644: a1 = s1 + 0x300\n 13648: u64 [s1 + 768] = 0x1\n 13653: u64 [s1 + 0xf8] = a0\n 13657: ra = 0x23a\n 13661: jump @19\n      : @455 (gas: 1)\n 13664: jump @457 if a0 == 1889567281\n      : @456 (gas: 1)\n 13671: jump @637\n      : @457 (gas: 10)\n 13674: u64 [a2 + 1888] = 0\n 13678: u64 [a2 + 1880] = 0\n 13682: u64 [a2 + 1872] = 0\n 13686: u64 [a2 + 1864] = 0\n 13690: a0 = s1 + 0x1000\n 13694: i32 a0 = a0 + 0x7c0\n 13698: ra = 0x198\n 13702: ecalli 11 // 'value_transferred'\n 13704: t0 = 0x19a\n 13708: jump @898\n      : @458 [@dyn 204] (gas: 1)\n 13711: t0 = 410, jump @898\n      : @459 [@dyn 205] (gas: 8)\n 13717: a0 = u64 [a4 + 0x58]\n 13720: a1 = u64 [a4 + 0x60]\n 13723: a2 = u64 [a4 + 0x50]\n 13726: a3 = u64 [a4 + 0x48]\n 13729: a1 = a1 | a2\n 13732: a0 = a0 | a3\n 13735: a0 = a0 | a1\n 13738: jump @461 if a0 == 0\n      : @460 (gas: 1)\n 13741: jump @673\n      : @461 (gas: 4)\n 13744: a0 = u64 [s1 + 0xf8]\n 13748: a0 = i32 [a0]\n 13750: a1 = 0x23\n 13753: jump @463 if a1 <u a0\n      : @462 (gas: 1)\n 13756: jump @674\n      : @463 (gas: 5)\n 13759: a0 = s1 + 0x7ff\n 13763: a0 = a0 + 0x621\n 13767: ra = 0x19c\n 13771: t0 = 0x2ee\n 13775: jump @912\n      : @464 [@dyn 206] (gas: 14)\n 13778: a3 = s1 + 0x7ff\n 13782: a3 = a3 + 0x71\n 13785: a4 = a3 + 0x500\n 13789: a0 = u64 [a4 + 0xb0]\n 13793: a1 = u64 [a4 + 0xb8]\n 13797: a2 = u32 [a3 + 0x5c0]\n 13801: u64 [a3 + 1448] = 0\n 13805: u64 [a4 + 0xa0] = a2\n 13809: u64 [a4 + 0x98] = a1\n 13813: a1 = s1 + 0x7ff\n 13817: a1 = a1 + 0x601\n 13821: u64 [a4 + 0x90] = a0\n 13825: a0 = 0\n 13827: ra = 414, jump @19\n      : @465 [@dyn 207] (gas: 11)\n 13833: a0 = s1 + 0x7ff\n 13837: a0 = a0 + 0x71\n 13840: u64 [a0 + 1416] = 0\n 13844: u64 [a0 + 1408] = 0\n 13848: u64 [a0 + 1400] = 0\n 13852: a2 = a0\n 13854: a0 = 0x20\n 13857: a1 = s1 + 0x7ff\n 13861: a1 = a1 + 0x5e1\n 13865: u64 [a2 + 1392] = 0\n 13869: ra = 416, jump @19\n      : @466 [@dyn 208] (gas: 2)\n 13875: a1 = i32 [0x20134]\n 13880: jump @468 if a1 >u 63\n      : @467 (gas: 2)\n 13884: u32 [0x20134] = 0x40\n 13890: fallthrough\n      : @468 (gas: 12)\n 13891: a0 = sp + 0xffffffffffffffe0\n 13894: a2 = a0 & 0xffffffffffffffe0\n 13897: u64 [s1 + 0xf8] = a2\n 13901: sp = a2\n 13903: a0 = 0x20140\n 13908: i32 a0 = a0 + 0\n 13910: i32 a2 = a2 + 0\n 13912: a1 = 0x40\n 13915: ra = 0x1a2\n 13919: ecalli 6 // 'hash_keccak_256'\n 13921: t0 = 0x1a4\n 13925: jump @887\n      : @469 [@dyn 209] (gas: 1)\n 13928: t0 = 420, jump @887\n      : @470 [@dyn 210] (gas: 8)\n 13934: u64 [a5 + 0x80] = a3\n 13938: u64 [a5 + 0x78] = a2\n 13941: u64 [a5 + 0x70] = a1\n 13944: u64 [a5 + 0x68] = a0\n 13947: a0 = s1 + 0x7ff\n 13951: a0 = a0 + 0x5c1\n 13955: a1 = s1 + 0x17e0\n 13959: ra = 422, jump @21\n      : @471 [@dyn 211] (gas: 15)\n 13965: a1 = s1 + 0x7ff\n 13969: a1 = a1 + 0x71\n 13972: a2 = a1 + 0x500\n 13976: a0 = u64 [a2 + 0x68]\n 13979: u64 [s1 + 0xf8] = a0\n 13983: a0 = u64 [a2 + 0x60]\n 13986: u64 [s1 + 0xf0] = a0\n 13990: a0 = u64 [a2 + 0x58]\n 13993: u64 [s1 + 0xe8] = a0\n 13997: a0 = u64 [a2 + 0x50]\n 14000: u64 [s1 + 0xe0] = a0\n 14004: a0 = s1 + 0x7ff\n 14008: a0 = a0 + 0x5a1\n 14012: a1 = 0x40\n 14015: ra = 424, jump @17\n      : @472 [@dyn 212] (gas: 8)\n 14021: a3 = s1 + 0x7ff\n 14025: a3 = a3 + 0x71\n 14028: a5 = a3 + 0x500\n 14032: a0 = u64 [a5 + 0x48]\n 14035: a1 = u64 [a5 + 0x40]\n 14038: a2 = u64 [a5 + 0x38]\n 14041: a4 = u64 [a5 + 0x30]\n 14044: t0 = 426, jump @894\n      : @473 [@dyn 213] (gas: 1)\n 14050: jump @475 if a0 == 0\n      : @474 (gas: 1)\n 14053: jump @636\n      : @475 (gas: 15)\n 14056: a0 = u64 [s1 + 0xe0]\n 14060: a2 = a3 + 0x500\n 14064: u64 [a2 + 0x10] = a0\n 14067: a0 = u64 [s1 + 0xe8]\n 14071: u64 [a2 + 0x18] = a0\n 14074: a0 = u64 [s1 + 0xf0]\n 14078: u64 [a2 + 0x20] = a0\n 14081: a1 = s1 + 0x7ff\n 14085: a1 = a1 + 0x581\n 14089: a0 = u64 [s1 + 0xf8]\n 14093: u64 [a2 + 0x28] = a0\n 14096: a0 = a4\n 14098: u64 [s1 + 0xf8] = a4\n 14102: ra = 0x23a\n 14106: jump @19\n      : @476 (gas: 10)\n 14109: u64 [a2 + 1184] = 0\n 14113: u64 [a2 + 1176] = 0\n 14117: u64 [a2 + 1168] = 0\n 14121: u64 [a2 + 1160] = 0\n 14125: a0 = s1 + 0x1000\n 14129: i32 a0 = a0 + 0x500\n 14133: ra = 0x1ac\n 14137: ecalli 11 // 'value_transferred'\n 14139: t0 = 0x1ae\n 14143: jump @906\n      : @477 [@dyn 214] (gas: 1)\n 14146: t0 = 430, jump @906\n      : @478 [@dyn 215] (gas: 1)\n 14152: t0 = 432, jump @910\n      : @479 [@dyn 216] (gas: 1)\n 14158: jump @481 if a0 == 0\n      : @480 (gas: 1)\n 14161: jump @675\n      : @481 (gas: 3)\n 14164: a0 = u64 [s1 + 0xf8]\n 14168: a0 = i32 [a0]\n 14170: jump @483 if a0 >u 3\n      : @482 (gas: 1)\n 14174: jump @676\n      : @483 (gas: 9)\n 14177: a0 = 0x30140\n 14182: u64 [s1 + 0xf8] = a0\n 14186: i32 a0 = a0 + 0\n 14188: u64 [s1 + 0xe8] = a0\n 14192: ra = 0x1b2\n 14196: ecalli 3 // 'caller'\n 14198: a2 = u64 [s1 + 0xf8]\n 14202: t0 = 0x1b4\n 14206: jump @882\n      : @484 [@dyn 217] (gas: 2)\n 14209: a2 = u64 [s1 + 0xf8]\n 14213: t0 = 436, jump @882\n      : @485 [@dyn 218] (gas: 8)\n 14219: u64 [a2 + 72] = 0\n 14222: u64 [a2 + 0x40] = a1\n 14225: u64 [a2 + 0x38] = a0\n 14228: a1 = s1 + 0x7ff\n 14232: a1 = a1 + 0xa1\n 14236: u64 [a2 + 0x30] = a3\n 14239: a0 = 0\n 14241: ra = 438, jump @19\n      : @486 [@dyn 219] (gas: 11)\n 14247: a1 = s1 + 0x7ff\n 14251: a1 = a1 + 0x71\n 14254: u64 [a1 + 40] = 0\n 14257: u64 [a1 + 32] = 0\n 14260: u64 [a1 + 16] = 0x5\n 14264: a2 = a1\n 14266: a0 = 0x20\n 14269: a1 = s1 + 0x7ff\n 14273: a1 = a1 + 0x81\n 14277: u64 [a2 + 24] = 0\n 14280: ra = 440, jump @19\n      : @487 [@dyn 220] (gas: 4)\n 14286: a0 = 0x20134\n 14291: u64 [s1 + 0xf0] = a0\n 14295: a0 = i32 [0x20134]\n 14300: jump @489 if a0 >u 63\n      : @488 (gas: 3)\n 14304: a1 = u64 [s1 + 0xf0]\n 14308: u32 [a1 + 0] = 0x40\n 14311: fallthrough\n      : @489 (gas: 13)\n 14312: a0 = sp + 0xffffffffffffffe0\n 14315: a2 = a0 & 0xffffffffffffffe0\n 14318: u64 [s1 + 0xd8] = a2\n 14322: sp = a2\n 14324: a0 = 0x20140\n 14329: i32 a0 = a0 + 0\n 14331: i32 a2 = a2 + 0\n 14333: a1 = 0x40\n 14336: u64 [s1 + 0xe0] = a0\n 14340: ra = 0x1ba\n 14344: ecalli 6 // 'hash_keccak_256'\n 14346: t0 = 0x1bc\n 14350: jump @886\n      : @490 [@dyn 221] (gas: 1)\n 14353: t0 = 444, jump @886\n      : @491 [@dyn 222] (gas: 8)\n 14359: u64 [a5 + 0xc0] = a3\n 14363: u64 [a5 + 0xb8] = a2\n 14367: u64 [a5 + 0xb0] = a1\n 14371: u64 [a5 + 0xa8] = a0\n 14375: a0 = s1 + 0x7ff\n 14379: a0 = a0 + 0x61\n 14382: a1 = s1 + 0x1520\n 14386: ra = 446, jump @21\n      : @492 [@dyn 223] (gas: 12)\n 14392: a1 = s1 + 0x7ff\n 14396: a1 = a1 + 0x71\n 14399: a0 = u64 [a1]\n 14401: a1 = u64 [a1 + 0x8]\n 14404: a2 = s1 + 0x1000\n 14408: a2 = u64 [a2 + 0xfffffffffffff868]\n 14412: a3 = s1 + 0x1000\n 14416: a3 = u64 [a3 + 0xfffffffffffff860]\n 14420: a1 = a1 | a2\n 14423: a0 = a0 | a3\n 14426: a0 = a0 | a1\n 14429: jump @507 if a0 == 0\n      : @493 (gas: 5)\n 14433: a0 = u64 [s1 + 0xe8]\n 14437: ra = 0x1c0\n 14441: ecalli 3 // 'caller'\n 14443: t0 = 0x1c2\n 14447: jump @883\n      : @494 [@dyn 224] (gas: 1)\n 14450: t0 = 450, jump @883\n      : @495 [@dyn 225] (gas: 12)\n 14456: a2 = s1 + 0x1000\n 14460: u64 [a2 + 4294965336] = 0\n 14464: a2 = s1 + 0x1000\n 14468: u64 [a2 + 0xfffffffffffff850] = a1\n 14472: a1 = s1 + 0x1000\n 14476: u64 [a1 + 0xfffffffffffff848] = a0\n 14480: a1 = s1 + 0x7ff\n 14484: a1 = a1 + 0x41\n 14487: a0 = s1 + 0x1000\n 14491: u64 [a0 + 0xfffffffffffff840] = a3\n 14495: a0 = 0\n 14497: ra = 452, jump @19\n      : @496 [@dyn 226] (gas: 12)\n 14503: a0 = s1 + 0x1000\n 14507: u64 [a0 + 4294965304] = 0\n 14511: a0 = s1 + 0x1000\n 14515: u64 [a0 + 4294965296] = 0\n 14519: a1 = s1 + 0x1000\n 14523: u64 [a1 + 4294965280] = 0x5\n 14528: a0 = 0x20\n 14531: a1 = s1 + 0x7ff\n 14535: a1 = a1 + 0x21\n 14538: a2 = s1 + 0x1000\n 14542: u64 [a2 + 4294965288] = 0\n 14546: ra = 454, jump @19\n      : @497 [@dyn 227] (gas: 3)\n 14552: a0 = u64 [s1 + 0xf0]\n 14556: a0 = i32 [a0]\n 14558: jump @499 if a0 >u 63\n      : @498 (gas: 3)\n 14562: a1 = u64 [s1 + 0xf0]\n 14566: u32 [a1 + 0] = 0x40\n 14569: fallthrough\n      : @499 (gas: 11)\n 14570: a0 = sp + 0xffffffffffffffe0\n 14573: a0 = a0 & 0xffffffffffffffe0\n 14576: u64 [s1 + 0xd8] = a0\n 14580: sp = a0\n 14582: i32 a2 = a0 + 0\n 14584: a1 = 0x40\n 14587: a0 = u64 [s1 + 0xe0]\n 14591: ra = 0x1c8\n 14595: ecalli 6 // 'hash_keccak_256'\n 14597: t0 = 0x1ca\n 14601: jump @886\n      : @500 [@dyn 228] (gas: 1)\n 14604: t0 = 458, jump @886\n      : @501 [@dyn 229] (gas: 8)\n 14610: u64 [a5 + 0xe0] = a3\n 14614: u64 [a5 + 0xd8] = a2\n 14618: u64 [a5 + 0xd0] = a1\n 14622: u64 [a5 + 0xc8] = a0\n 14626: a0 = s1 + 0x7ff\n 14630: a0 = a0 + 0x1\n 14633: a1 = s1 + 0x1540\n 14637: ra = 460, jump @21\n      : @502 [@dyn 230] (gas: 20)\n 14643: a0 = s1 + 0x1000\n 14647: a0 = u64 [a0 + 0xfffffffffffff800]\n 14651: u64 [s1 + 0xd8] = a0\n 14655: a0 = s1 + 0x1000\n 14659: a0 = u64 [a0 + 0xfffffffffffff808]\n 14663: u64 [s1 + 0xd0] = a0\n 14667: a0 = s1 + 0x1000\n 14671: a0 = u64 [a0 + 0xfffffffffffff810]\n 14675: u64 [s1 + 0xc8] = a0\n 14679: a0 = s1 + 0x1000\n 14683: a0 = u64 [a0 + 0xfffffffffffff818]\n 14687: u64 [s1 + 0xc0] = a0\n 14691: a1 = s1 + 0x1078\n 14695: u64 [a1 + 1280] = 0\n 14699: u64 [a1 + 1272] = 0\n 14703: u64 [a1 + 1264] = 0\n 14707: u64 [a1 + 1256] = 0x6\n 14712: a0 = s1 + 0x7e0\n 14716: a1 = s1 + 0x1560\n 14720: ra = 462, jump @21\n      : @503 [@dyn 231] (gas: 20)\n 14726: a0 = u64 [s1 + 0x7e0]\n 14730: a1 = u64 [s1 + 0x7e8]\n 14734: a2 = u64 [s1 + 0x7f0]\n 14738: a3 = u64 [s1 + 0x7f8]\n 14742: u64 [s1 + 0x798] = a3\n 14746: u64 [s1 + 0x790] = a2\n 14750: u64 [s1 + 0x788] = a1\n 14754: u64 [s1 + 0x780] = a0\n 14758: a0 = u64 [s1 + 0xc0]\n 14762: u64 [s1 + 0x7b8] = a0\n 14766: a0 = u64 [s1 + 0xc8]\n 14770: u64 [s1 + 0x7b0] = a0\n 14774: a0 = u64 [s1 + 0xd0]\n 14778: u64 [s1 + 0x7a8] = a0\n 14782: a0 = s1 + 0x7c0\n 14786: a1 = s1 + 0x7a0\n 14790: a2 = s1 + 0x780\n 14794: a3 = u64 [s1 + 0xd8]\n 14798: u64 [s1 + 0x7a0] = a3\n 14802: ra = 464, jump @822\n      : @504 [@dyn 232] (gas: 14)\n 14808: a1 = s1 + 0x700\n 14812: a0 = u64 [a1 + 0xc0]\n 14816: u64 [s1 + 0xd8] = a0\n 14820: a0 = u64 [a1 + 0xc8]\n 14824: u64 [s1 + 0xd0] = a0\n 14828: a0 = u64 [a1 + 0xd0]\n 14832: u64 [s1 + 0xc8] = a0\n 14836: a0 = u64 [a1 + 0xd8]\n 14840: u64 [s1 + 0xc0] = a0\n 14844: a0 = s1 + 0x1000\n 14848: i32 a0 = a0 + 0x580\n 14852: ecalli 7 // 'now'\n 14854: a3 = s1 + 0x1078\n 14858: fallthrough\n      : @505 (gas: 21)\n 14859: a1 = a3 + 0x500\n 14863: a0 = u64 [a1 + 0x20]\n 14866: t0 = u64 [a3 + 0x508]\n 14870: a2 = u64 [a1 + 0x18]\n 14873: a3 = u64 [a1 + 0x10]\n 14876: a1 = u64 [s1 + 0xc0]\n 14880: a4 = a0 ^ a1\n 14883: a1 = a1 <u a0\n 14886: a0 = u64 [s1 + 0xc8]\n 14890: a5 = a0 <u a2\n 14893: a5 = a1 if a4 != 0\n 14896: a1 = u64 [s1 + 0xd0]\n 14900: t1 = a3 ^ a1\n 14903: a3 = a1 <u a3\n 14906: a1 = u64 [s1 + 0xd8]\n 14910: a1 = a1 <u t0\n 14913: a1 = a3 if t1 != 0\n 14916: a0 = a0 ^ a2\n 14919: a0 = a0 | a4\n 14922: a1 = a5 if a0 != 0\n 14925: jump @507 if a1 != 0\n      : @506 (gas: 1)\n 14928: jump @625\n      : @507 (gas: 3)\n 14931: a0 = u64 [s1 + 0xe8]\n 14935: ecalli 3 // 'caller'\n 14937: fallthrough\n      : @508 (gas: 7)\n 14938: a2 = u64 [s1 + 0xf8]\n 14942: a0 = u32 [a2 + 0x10]\n 14945: a1 = u64 [a2]\n 14947: a2 = u64 [a2 + 0x8]\n 14950: a0 = a0 | a1\n 14953: a0 = a0 | a2\n 14956: jump @510 if a0 != 0\n      : @509 (gas: 1)\n 14959: jump @691\n      : @510 (gas: 10)\n 14962: a0 = 0x6bc75e2d63100000\n 14972: u64 [s1 + 0xd8] = a0\n 14976: a0 = s1 + 0x1078\n 14980: u64 [a0 + 1344] = 0\n 14984: u64 [a0 + 1336] = 0\n 14988: u64 [a0 + 1328] = 0\n 14992: u64 [a0 + 1320] = 0x2\n 14997: a0 = s1 + 0x6a0\n 15001: a1 = s1 + 0x15a0\n 15005: ra = 466, jump @21\n      : @511 [@dyn 233] (gas: 34)\n 15011: a0 = u64 [s1 + 0x6b8]\n 15015: u64 [s1 + 0xd0] = a0\n 15019: t2 = u64 [s1 + 0x6b0]\n 15023: a3 = u64 [s1 + 0x6a8]\n 15027: t1 = u64 [s1 + 0x6a0]\n 15031: a1 = sp + 0xffffffffffffffe0\n 15034: a1 = a1 & 0xffffffffffffffe0\n 15037: sp = a1\n 15039: t0 = u64 [s1 + 0xd8]\n 15043: t0 = t0 + t1\n 15046: a5 = t0 <u t1\n 15049: a0 = a3 + a5\n 15052: a4 = a0 + 0x5\n 15055: ra = u64 [0x20080]\n 15060: a2 = a4 ^ a3\n 15063: a0 = a4 <u a3\n 15066: a0 = a5 if a2 == 0\n 15069: a2 = ra <u t1\n 15072: a5 = a3 + 0x6\n 15075: a3 = a3 <u 0xfffffffffffffffb\n 15078: a3 = a3 ^ 0x1\n 15081: a3 = a2 if a5 == 0\n 15084: u64 [a1 + 0x8] = a4\n 15087: u64 [a1] = t0\n 15089: a0 = a0 + t2\n 15092: u64 [a1 + 0x10] = a0\n 15095: a0 = a0 <u t2\n 15098: a2 = u64 [s1 + 0xd0]\n 15102: a0 = a0 + a2\n 15105: a2 = t2 & a2\n 15108: a2 = a2 + 0x1\n 15111: a3 = 0 if a2 != 0\n 15113: u64 [a1 + 0x18] = a0\n 15116: jump @513 if a3 == 0\n      : @512 (gas: 1)\n 15119: jump @693\n      : @513 (gas: 7)\n 15122: a0 = s1 + 0x1078\n 15126: u64 [a0 + 1376] = 0\n 15130: u64 [a0 + 1368] = 0\n 15134: u64 [a0 + 1360] = 0\n 15138: u64 [a0 + 1352] = 0x2\n 15143: a0 = s1 + 0x15c0\n 15147: ra = 468, jump @22\n      : @514 [@dyn 234] (gas: 5)\n 15153: a0 = u64 [s1 + 0xe8]\n 15157: ra = 0x1d6\n 15161: ecalli 3 // 'caller'\n 15163: t0 = 0x1d8\n 15167: jump @883\n      : @515 [@dyn 235] (gas: 1)\n 15170: t0 = 472, jump @883\n      : @516 [@dyn 236] (gas: 8)\n 15176: u64 [s1 + 1688] = 0\n 15180: a2 = s1 + 0x600\n 15184: u64 [a2 + 0x90] = a1\n 15188: u64 [a2 + 0x88] = a0\n 15192: a1 = s1 + 0x680\n 15196: u64 [a2 + 0x80] = a3\n 15200: a0 = 0\n 15202: ra = 474, jump @19\n      : @517 [@dyn 237] (gas: 7)\n 15208: u64 [s1 + 1656] = 0\n 15212: u64 [s1 + 1648] = 0\n 15216: u64 [s1 + 1640] = 0\n 15220: a0 = 0x20\n 15223: a1 = s1 + 0x660\n 15227: u64 [s1 + 1632] = 0\n 15231: ra = 476, jump @19\n      : @518 [@dyn 238] (gas: 7)\n 15237: a0 = sp + 0xffffffffffffffe0\n 15240: a0 = a0 & 0xffffffffffffffe0\n 15243: u64 [s1 + 0xd0] = a0\n 15247: sp = a0\n 15249: a0 = u64 [s1 + 0xf0]\n 15253: a0 = i32 [a0]\n 15255: jump @520 if a0 >u 63\n      : @519 (gas: 3)\n 15259: a1 = u64 [s1 + 0xf0]\n 15263: u32 [a1 + 0] = 0x40\n 15266: fallthrough\n      : @520 (gas: 12)\n 15267: a0 = sp + 0xffffffffffffffe0\n 15270: a0 = a0 & 0xffffffffffffffe0\n 15273: u64 [s1 + 0xc8] = a0\n 15277: sp = a0\n 15279: i32 a2 = a0 + 0\n 15281: a1 = 0x40\n 15284: a0 = u64 [s1 + 0xe0]\n 15288: ra = 0x1de\n 15292: ecalli 6 // 'hash_keccak_256'\n 15294: a3 = u64 [s1 + 0xc8]\n 15298: t0 = 0x1e0\n 15302: jump @885\n      : @521 [@dyn 239] (gas: 2)\n 15305: a3 = u64 [s1 + 0xc8]\n 15309: t0 = 480, jump @885\n      : @522 [@dyn 240] (gas: 7)\n 15315: a1 = u64 [s1 + 0xd0]\n 15319: u64 [a1 + 0x18] = a3\n 15322: u64 [a1 + 0x10] = a2\n 15325: u64 [a1 + 0x8] = a4\n 15328: u64 [a1] = a0\n 15330: a0 = s1 + 0x640\n 15334: ra = 482, jump @21\n      : @523 [@dyn 241] (gas: 24)\n 15340: a0 = u64 [s1 + 0x648]\n 15344: a1 = u64 [s1 + 0x640]\n 15348: t0 = u64 [s1 + 0x658]\n 15352: a3 = u64 [s1 + 0x650]\n 15356: a4 = a0 + 0x5\n 15359: a5 = u64 [s1 + 0xd8]\n 15363: a5 = a5 + a1\n 15366: a1 = a5 <u a1\n 15369: a4 = a4 + a1\n 15372: a2 = a4 ^ a0\n 15375: a0 = a4 <u a0\n 15378: a0 = a1 if a2 == 0\n 15381: a0 = a0 + a3\n 15384: a1 = a0 <u a3\n 15387: a1 = a1 + t0\n 15390: a2 = s1 + 0x1078\n 15394: a3 = a2 + 0x500\n 15398: u64 [a3 + 0x68] = a5\n 15401: u64 [a3 + 0x70] = a4\n 15404: u64 [a3 + 0x78] = a0\n 15407: u64 [a3 + 0x80] = a1\n 15411: a1 = s1 + 0x15e0\n 15415: a0 = u64 [s1 + 0xd0]\n 15419: ra = 484, jump @22\n      : @524 [@dyn 242] (gas: 3)\n 15425: a0 = s1 + 0x620\n 15429: a1 = 0x40\n 15432: ra = 486, jump @17\n      : @525 [@dyn 243] (gas: 6)\n 15438: a4 = s1 + 0x600\n 15442: a0 = u64 [a4 + 0x38]\n 15445: a1 = u64 [a4 + 0x30]\n 15448: a2 = u64 [a4 + 0x28]\n 15451: a3 = u64 [a4 + 0x20]\n 15454: t0 = 488, jump @893\n      : @526 [@dyn 244] (gas: 1)\n 15460: jump @636 if a0 != 0\n      : @527 (gas: 9)\n 15464: u64 [s1 + 1560] = 0\n 15468: u64 [s1 + 1552] = 0\n 15472: u64 [s1 + 1544] = 0x5\n 15477: a0 = 0x6bc75e2d63100000\n 15487: a1 = s1 + 0x600\n 15491: u64 [s1 + 0x600] = a0\n 15495: a0 = a3\n 15497: u64 [s1 + 0xd8] = a3\n 15501: ra = 490, jump @19\n      : @528 [@dyn 245] (gas: 6)\n 15507: a0 = u64 [s1 + 0xe8]\n 15511: ra = 0x1ec\n 15515: ecalli 3 // 'caller'\n 15517: a2 = u64 [s1 + 0xf8]\n 15521: t0 = 0x1ee\n 15525: jump @913\n      : @529 [@dyn 246] (gas: 2)\n 15528: a2 = u64 [s1 + 0xf8]\n 15532: t0 = 494, jump @913\n      : @530 [@dyn 247] (gas: 28)\n 15538: t0 = a1 | a0\n 15541: a3 = a3 >> 0x20\n 15544: a2 = reverse a2\n 15546: a1 = a2 << 0x20\n 15549: a1 = a1 | a3\n 15552: a2 = a2 >> 0x20\n 15555: u64 [s1 + 1464] = 0\n 15559: u64 [s1 + 1496] = 0\n 15563: u64 [s1 + 1488] = 0\n 15567: u64 [s1 + 1480] = 0\n 15571: u64 [s1 + 1472] = 0\n 15575: a3 = u64 [0x20088]\n 15580: a4 = u64 [0x20090]\n 15585: a5 = u64 [0x20098]\n 15590: a0 = u64 [0x200a0]\n 15595: u64 [s1 + 0x5f8] = a3\n 15599: u64 [s1 + 0x5f0] = a4\n 15603: u64 [s1 + 0x5e8] = a5\n 15607: u64 [s1 + 0x5e0] = a0\n 15611: u64 [s1 + 0x5b0] = a2\n 15615: u64 [s1 + 0x5a8] = a1\n 15619: a1 = 0x20\n 15622: a2 = s1 + 0x5e0\n 15626: a3 = s1 + 0x5c0\n 15630: a4 = s1 + 0x5a0\n 15634: u64 [s1 + 0x5a0] = t0\n 15638: a0 = u64 [s1 + 0xd8]\n 15642: ra = 496, jump @23\n      : @531 [@dyn 248] (gas: 5)\n 15648: a0 = u64 [s1 + 0xe8]\n 15652: ra = 0x1f2\n 15656: ecalli 3 // 'caller'\n 15658: t0 = 0x1f4\n 15662: jump @883\n      : @532 [@dyn 249] (gas: 1)\n 15665: t0 = 500, jump @883\n      : @533 [@dyn 250] (gas: 7)\n 15671: u64 [s1 + 1432] = 0\n 15675: u64 [s1 + 0x590] = a1\n 15679: u64 [s1 + 0x588] = a0\n 15683: a1 = s1 + 0x580\n 15687: u64 [s1 + 0x580] = a3\n 15691: a0 = 0\n 15693: ra = 502, jump @19\n      : @534 [@dyn 251] (gas: 7)\n 15699: u64 [s1 + 1400] = 0\n 15703: u64 [s1 + 1392] = 0\n 15707: u64 [s1 + 1376] = 0x5\n 15712: a0 = 0x20\n 15715: a1 = s1 + 0x560\n 15719: u64 [s1 + 1384] = 0\n 15723: ra = 504, jump @19\n      : @535 [@dyn 252] (gas: 5)\n 15729: a0 = s1 + 0x1000\n 15733: i32 a0 = a0 + 0x600\n 15737: ecalli 7 // 'now'\n 15739: a1 = s1 + 0x1078\n 15743: fallthrough\n      : @536 (gas: 12)\n 15744: a2 = a1 + 0x500\n 15748: a0 = u64 [a2 + 0xa0]\n 15752: u64 [s1 + 0xd8] = a0\n 15756: a0 = u64 [a2 + 0x98]\n 15760: u64 [s1 + 0xe8] = a0\n 15764: a0 = u64 [a2 + 0x90]\n 15768: u64 [s1 + 0xf8] = a0\n 15772: a0 = u64 [s1 + 0xf0]\n 15776: a0 = i32 [a0]\n 15778: a1 = u64 [a2 + 0x88]\n 15782: u64 [s1 + 0xd0] = a1\n 15786: jump @538 if a0 >u 63\n      : @537 (gas: 3)\n 15790: a1 = u64 [s1 + 0xf0]\n 15794: u32 [a1 + 0] = 0x40\n 15797: fallthrough\n      : @538 (gas: 34)\n 15798: a0 = sp + 0xffffffffffffffe0\n 15801: a0 = a0 & 0xffffffffffffffe0\n 15804: u64 [s1 + 0xf0] = a0\n 15808: sp = a0\n 15810: i32 a2 = a0 + 0\n 15812: a1 = 0x40\n 15815: a0 = u64 [s1 + 0xe0]\n 15819: ecalli 6 // 'hash_keccak_256'\n 15821: a3 = u64 [s1 + 0xf0]\n 15825: a0 = u64 [a3 + 0x18]\n 15828: a1 = u64 [a3 + 0x10]\n 15831: a2 = u64 [a3 + 0x8]\n 15834: a3 = u64 [a3]\n 15836: a0 = reverse a0\n 15838: a1 = reverse a1\n 15840: a2 = reverse a2\n 15842: a3 = reverse a3\n 15844: a4 = s1 + 0x1078\n 15848: a5 = a4 + 0x500\n 15852: u64 [a5 + 0xc0] = a3\n 15856: u64 [a5 + 0xb8] = a2\n 15860: u64 [a5 + 0xb0] = a1\n 15864: u64 [a5 + 0xa8] = a0\n 15868: a0 = u64 [s1 + 0xd8]\n 15872: u64 [a5 + 0xe0] = a0\n 15876: a0 = u64 [s1 + 0xe8]\n 15880: u64 [a5 + 0xd8] = a0\n 15884: a0 = u64 [s1 + 0xf8]\n 15888: u64 [a5 + 0xd0] = a0\n 15892: a0 = u64 [s1 + 0xd0]\n 15896: u64 [a5 + 0xc8] = a0\n 15900: a0 = s1 + 0x1620\n 15904: a1 = s1 + 0x1640\n 15908: ra = 506, jump @22\n      : @539 [@dyn 253] (gas: 6)\n 15914: a0 = 0\n 15916: a1 = u64 [s1 + 0xe0]\n 15920: a2 = 0\n 15922: ecalli 8 // 'seal_return'\n 15924: a1 = 0x20140\n 15929: jump @638\n      : @540 (gas: 10)\n 15932: u64 [a2 + 1952] = 0\n 15936: u64 [a2 + 1944] = 0\n 15940: u64 [a2 + 1936] = 0\n 15944: u64 [a2 + 1928] = 0\n 15948: a0 = s1 + 0x2000\n 15952: i32 a0 = a0 + 0xfffffffffffff800\n 15956: ra = 0x1fc\n 15960: ecalli 11 // 'value_transferred'\n 15962: t0 = 0x1fe\n 15966: jump @898\n      : @541 [@dyn 254] (gas: 1)\n 15969: t0 = 510, jump @898\n      : @542 [@dyn 255] (gas: 1)\n 15975: t0 = 512, jump @910\n      : @543 [@dyn 256] (gas: 1)\n 15981: jump @545 if a0 == 0\n      : @544 (gas: 1)\n 15984: jump @677\n      : @545 (gas: 3)\n 15987: a0 = u64 [s1 + 0xf8]\n 15991: a0 = i32 [a0]\n 15993: jump @547 if a0 >u 3\n      : @546 (gas: 1)\n 15997: jump @678\n      : @547 (gas: 9)\n 16000: a1 = s1 + 0x1078\n 16004: u64 [a1 + 1984] = 0\n 16008: u64 [a1 + 1976] = 0\n 16012: u64 [a1 + 1968] = 0\n 16016: u64 [a1 + 1960] = 0x7\n 16021: a0 = s1 + 0x7ff\n 16025: a0 = a0 + 0x681\n 16029: a1 = s1 + 0x1820\n 16033: ra = 514, jump @21\n      : @548 [@dyn 257] (gas: 13)\n 16039: a1 = s1 + 0x7ff\n 16043: a1 = a1 + 0x71\n 16046: a2 = a1 + 0x600\n 16050: a0 = u64 [a2 + 0x20]\n 16053: u64 [s1 + 0xe8] = a0\n 16057: a0 = u64 [a2 + 0x18]\n 16060: u64 [s1 + 0xf8] = a0\n 16064: a0 = u64 [a2 + 0x10]\n 16067: u64 [s1 + 0xf0] = a0\n 16071: a0 = s1 + 0x7ff\n 16075: a0 = a0 + 0x661\n 16079: a1 = 0x40\n 16082: ra = 516, jump @17\n      : @549 [@dyn 258] (gas: 7)\n 16088: a3 = s1 + 0x7ff\n 16092: a3 = a3 + 0x71\n 16095: a4 = u64 [a3 + 0x608]\n 16099: a1 = u64 [a3 + 0x600]\n 16103: a2 = u64 [a3 + 0x5f8]\n 16107: a0 = u64 [a3 + 0x5f0]\n 16111: t0 = 518, jump @891\n      : @550 [@dyn 259] (gas: 1)\n 16117: jump @636 if a1 != 0\n      : @551 (gas: 15)\n 16121: a1 = u64 [s1 + 0xe8]\n 16125: a1 = a1 << 0x20\n 16128: a2 = a1 >> 0x20\n 16131: u64 [a3 + 1512] = 0\n 16135: a1 = u64 [s1 + 0xf0]\n 16139: a4 = a3 + 0x500\n 16143: u64 [a4 + 0xd0] = a1\n 16147: a1 = u64 [s1 + 0xf8]\n 16151: u64 [a4 + 0xd8] = a1\n 16155: a1 = s1 + 0x7ff\n 16159: a1 = a1 + 0x641\n 16163: u64 [a4 + 0xe0] = a2\n 16167: u64 [s1 + 0xf8] = a0\n 16171: ra = 0x23a\n 16175: jump @19\n      : @552 (gas: 10)\n 16178: u64 [a2 + 1120] = 0\n 16182: u64 [a2 + 1112] = 0\n 16186: u64 [a2 + 1104] = 0\n 16190: u64 [a2 + 1096] = 0\n 16194: a0 = s1 + 0x1000\n 16198: i32 a0 = a0 + 0x4c0\n 16202: ra = 0x208\n 16206: ecalli 11 // 'value_transferred'\n 16208: t0 = 0x20a\n 16212: jump @906\n      : @553 [@dyn 260] (gas: 1)\n 16215: t0 = 522, jump @906\n      : @554 [@dyn 261] (gas: 8)\n 16221: a0 = u64 [a4 + 0x58]\n 16224: a1 = u64 [a4 + 0x60]\n 16227: a2 = u64 [a4 + 0x50]\n 16230: a3 = u64 [a4 + 0x48]\n 16233: a1 = a1 | a2\n 16236: a0 = a0 | a3\n 16239: a0 = a0 | a1\n 16242: jump @679 if a0 != 0\n      : @555 (gas: 3)\n 16246: a0 = u64 [s1 + 0xf8]\n 16250: a0 = i32 [a0]\n 16252: jump @680 if a0 <=u 3\n      : @556 (gas: 8)\n 16257: a1 = s1 + 0x1078\n 16261: u64 [a1 + 1152] = 0\n 16265: u64 [a1 + 1144] = 0\n 16269: u64 [a1 + 1136] = 0\n 16273: u64 [a1 + 1128] = 0x2\n 16278: a0 = s1 + 0x4c0\n 16282: a1 = s1 + 0x14e0\n 16286: ra = 524, jump @21\n      : @557 [@dyn 262] (gas: 11)\n 16292: a0 = u64 [s1 + 0x4d8]\n 16296: u64 [s1 + 0xf8] = a0\n 16300: a0 = u64 [s1 + 0x4d0]\n 16304: u64 [s1 + 0xf0] = a0\n 16308: a0 = u64 [s1 + 0x4c8]\n 16312: u64 [s1 + 0xe8] = a0\n 16316: a0 = u64 [s1 + 0x4c0]\n 16320: u64 [s1 + 0xe0] = a0\n 16324: a0 = s1 + 0x4a0\n 16328: a1 = 0x40\n 16331: ra = 526, jump @17\n      : @558 [@dyn 263] (gas: 6)\n 16337: a4 = s1 + 0x400\n 16341: a0 = u64 [a4 + 0xb8]\n 16345: a1 = u64 [a4 + 0xb0]\n 16349: a2 = u64 [a4 + 0xa8]\n 16353: a3 = u64 [a4 + 0xa0]\n 16357: t0 = 528, jump @893\n      : @559 [@dyn 264] (gas: 1)\n 16363: jump @636 if a0 != 0\n      : @560 (gas: 14)\n 16367: a0 = u64 [s1 + 0xe0]\n 16371: a2 = s1 + 0x400\n 16375: u64 [a2 + 0x80] = a0\n 16379: a0 = u64 [s1 + 0xe8]\n 16383: u64 [a2 + 0x88] = a0\n 16387: a0 = u64 [s1 + 0xf0]\n 16391: u64 [a2 + 0x90] = a0\n 16395: a1 = s1 + 0x480\n 16399: a0 = u64 [s1 + 0xf8]\n 16403: u64 [a2 + 0x98] = a0\n 16407: a0 = a3\n 16409: u64 [s1 + 0xf8] = a3\n 16413: ra = 0x23a\n 16417: jump @19\n      : @561 (gas: 8)\n 16420: u64 [a3 + 96] = 0\n 16423: u64 [a3 + 88] = 0\n 16426: u64 [a3 + 80] = 0\n 16429: u64 [a3 + 72] = 0\n 16432: a0 = s1 + 0x2000\n 16436: i32 a0 = a0 + 0xfffffffffffff8c0\n 16440: ecalli 11 // 'value_transferred'\n 16442: fallthrough\n      : @562 (gas: 9)\n 16443: a3 = s1 + 0x1878\n 16447: a0 = u64 [a3 + 0x58]\n 16450: a1 = u64 [a3 + 0x60]\n 16453: a2 = u64 [a3 + 0x50]\n 16456: a3 = u64 [a3 + 0x48]\n 16459: a1 = a1 | a2\n 16462: a0 = a0 | a3\n 16465: a0 = a0 | a1\n 16468: jump @681 if a0 != 0\n      : @563 (gas: 4)\n 16472: a0 = u64 [s1 + 0xf8]\n 16476: a0 = i32 [a0]\n 16478: a1 = 0x23\n 16481: jump @682 if a1 >=u a0\n      : @564 (gas: 4)\n 16485: a0 = s1 + 0x12c0\n 16489: ra = 0x212\n 16493: t0 = 0x2ee\n 16497: jump @912\n      : @565 [@dyn 265] (gas: 3)\n 16500: t0 = 0x214\n 16504: a3 = s1 + 0x1078\n 16508: fallthrough\n      : @566 [@dyn 266] (gas: 14)\n 16509: a4 = a3 + 0x200\n 16513: a2 = u64 [a4 + 0x48]\n 16516: a1 = u64 [a4 + 0x50]\n 16519: a0 = u32 [a3 + 0x258]\n 16523: u64 [a3 + 576] = 0\n 16527: u64 [s1 + 0xf0] = a0\n 16531: u64 [a4 + 0x38] = a0\n 16534: u64 [s1 + 0xe0] = a1\n 16538: u64 [a4 + 0x30] = a1\n 16541: a1 = s1 + 0x12a0\n 16545: u64 [s1 + 0xe8] = a2\n 16549: u64 [a4 + 0x28] = a2\n 16552: a0 = 0\n 16554: ra = 534, jump @19\n      : @567 [@dyn 267] (gas: 3)\n 16560: t0 = 0x218\n 16564: a1 = s1 + 0x1078\n 16568: fallthrough\n      : @568 [@dyn 268] (gas: 8)\n 16569: u64 [a1 + 544] = 0\n 16573: u64 [a1 + 536] = 0\n 16577: u64 [a1 + 520] = 0x5\n 16582: a2 = a1\n 16584: a0 = 0x20\n 16587: a1 = s1 + 0x1280\n 16591: u64 [a2 + 528] = 0\n 16595: ra = 538, jump @19\n      : @569 [@dyn 269] (gas: 3)\n 16601: a2 = 0x20134\n 16606: a0 = i32 [0x20134]\n 16611: jump @571 if a0 >u 63\n      : @570 (gas: 2)\n 16615: u32 [0x20134] = 0x40\n 16621: fallthrough\n      : @571 (gas: 14)\n 16622: u64 [s1 + 0xd8] = a2\n 16626: a0 = sp + 0xffffffffffffffe0\n 16629: a2 = a0 & 0xffffffffffffffe0\n 16632: u64 [s1 + 0xf8] = a2\n 16636: sp = a2\n 16638: a0 = 0x20140\n 16643: i32 a0 = a0 + 0\n 16645: i32 a2 = a2 + 0\n 16647: a1 = 0x40\n 16650: u64 [s1 + 0xd0] = a0\n 16654: ra = 0x21c\n 16658: ecalli 6 // 'hash_keccak_256'\n 16660: t0 = 0x21e\n 16664: jump @890\n      : @572 [@dyn 270] (gas: 1)\n 16667: t0 = 542, jump @890\n      : @573 [@dyn 271] (gas: 7)\n 16673: u64 [a4 + 0x80] = a3\n 16677: u64 [a4 + 0x78] = a2\n 16680: u64 [a4 + 0x70] = a1\n 16683: u64 [a4 + 0x68] = a0\n 16686: a0 = s1 + 0x1260\n 16690: a1 = s1 + 0x18e0\n 16694: ra = 544, jump @21\n      : @574 [@dyn 272] (gas: 3)\n 16700: t0 = 0x222\n 16704: a3 = s1 + 0x1078\n 16708: fallthrough\n      : @575 [@dyn 273] (gas: 10)\n 16709: a4 = a3 + 0x100\n 16713: a0 = u64 [a4 + 0xf8]\n 16717: a1 = u64 [a3 + 0x200]\n 16721: a2 = u64 [a4 + 0xf0]\n 16725: a3 = u64 [a4 + 0xe8]\n 16729: a1 = a1 | a2\n 16732: a0 = a0 | a3\n 16735: a0 = a0 | a1\n 16738: a1 = 0x1\n 16741: jump @588 if a0 == 0\n      : @576 (gas: 12)\n 16745: a2 = s1 + 0x1078\n 16749: u64 [a2 + 480] = 0\n 16753: a0 = u64 [s1 + 0xe8]\n 16757: a3 = a2 + 0x100\n 16761: u64 [a3 + 0xc8] = a0\n 16765: a0 = u64 [s1 + 0xe0]\n 16769: u64 [a3 + 0xd0] = a0\n 16773: a1 = s1 + 0x1240\n 16777: a0 = u64 [s1 + 0xf0]\n 16781: u64 [a3 + 0xd8] = a0\n 16785: a0 = 0\n 16787: ra = 548, jump @19\n      : @577 [@dyn 274] (gas: 3)\n 16793: t0 = 0x226\n 16797: a1 = s1 + 0x1078\n 16801: fallthrough\n      : @578 [@dyn 275] (gas: 8)\n 16802: u64 [a1 + 448] = 0\n 16806: u64 [a1 + 440] = 0\n 16810: u64 [a1 + 424] = 0x5\n 16815: a2 = a1\n 16817: a0 = 0x20\n 16820: a1 = s1 + 0x1220\n 16824: u64 [a2 + 432] = 0\n 16828: ra = 552, jump @19\n      : @579 [@dyn 276] (gas: 3)\n 16834: a2 = u64 [s1 + 0xd8]\n 16838: a0 = i32 [a2]\n 16840: jump @581 if a0 >u 63\n      : @580 (gas: 3)\n 16844: u32 [a2 + 0] = 0x40\n 16847: t0 = 0x22a\n 16851: jump @907\n      : @581 (gas: 1)\n 16854: t0 = 554, jump @907\n      : @582 [@dyn 277] (gas: 4)\n 16860: ra = 0x22c\n 16864: ecalli 6 // 'hash_keccak_256'\n 16866: t0 = 0x22e\n 16870: jump @890\n      : @583 [@dyn 278] (gas: 1)\n 16873: t0 = 558, jump @890\n      : @584 [@dyn 279] (gas: 7)\n 16879: u64 [a4 + 0xa0] = a3\n 16883: u64 [a4 + 0x98] = a2\n 16887: u64 [a4 + 0x90] = a1\n 16891: u64 [a4 + 0x88] = a0\n 16895: a0 = s1 + 0x1200\n 16899: a1 = s1 + 0x1900\n 16903: ra = 560, jump @21\n      : @585 [@dyn 280] (gas: 18)\n 16909: a1 = s1 + 0x1078\n 16913: a2 = a1 + 0x100\n 16917: a0 = u64 [a2 + 0x88]\n 16921: u64 [s1 + 0xf8] = a0\n 16925: a0 = u64 [a2 + 0x90]\n 16929: u64 [s1 + 0xf0] = a0\n 16933: a0 = u64 [a2 + 0x98]\n 16937: u64 [s1 + 0xe8] = a0\n 16941: a0 = u64 [a2 + 0xa0]\n 16945: u64 [s1 + 0xe0] = a0\n 16949: a1 = s1 + 0x1878\n 16953: u64 [a1 + 192] = 0\n 16957: u64 [a1 + 184] = 0\n 16961: u64 [a1 + 176] = 0\n 16965: u64 [a1 + 168] = 0x6\n 16970: a0 = s1 + 0x11e0\n 16974: a1 = s1 + 0x1920\n 16978: ra = 562, jump @21\n      : @586 [@dyn 281] (gas: 22)\n 16984: a4 = s1 + 0x1078\n 16988: a5 = a4 + 0x100\n 16992: a0 = u64 [a5 + 0x68]\n 16995: a1 = u64 [a5 + 0x70]\n 16998: a2 = u64 [a5 + 0x78]\n 17001: a3 = u64 [a5 + 0x80]\n 17005: u64 [a5 + 0x20] = a3\n 17008: u64 [a5 + 0x18] = a2\n 17011: u64 [a5 + 0x10] = a1\n 17014: u64 [a5 + 0x8] = a0\n 17017: a0 = u64 [s1 + 0xe0]\n 17021: u64 [a5 + 0x40] = a0\n 17024: a0 = u64 [s1 + 0xe8]\n 17028: u64 [a5 + 0x38] = a0\n 17031: a0 = u64 [s1 + 0xf0]\n 17035: u64 [a5 + 0x30] = a0\n 17038: a0 = s1 + 0x11c0\n 17042: a1 = s1 + 0x11a0\n 17046: a2 = s1 + 0x1180\n 17050: a3 = u64 [s1 + 0xf8]\n 17054: u64 [a5 + 0x28] = a3\n 17057: ra = 564, jump @822\n      : @587 [@dyn 282] (gas: 34)\n 17063: a1 = s1 + 0x1078\n 17067: a2 = a1 + 0x100\n 17071: a0 = u64 [a2 + 0x48]\n 17074: u64 [s1 + 0xf8] = a0\n 17078: a0 = u64 [a2 + 0x50]\n 17081: u64 [s1 + 0xf0] = a0\n 17085: a0 = u64 [a2 + 0x58]\n 17088: u64 [s1 + 0xe8] = a0\n 17092: a0 = u64 [a2 + 0x60]\n 17095: u64 [s1 + 0xe0] = a0\n 17099: a0 = s1 + 0x2000\n 17103: i32 a0 = a0 + 0xfffffffffffff940\n 17107: ecalli 7 // 'now'\n 17109: a3 = s1 + 0x1878\n 17113: a0 = u64 [a3 + 0xe0]\n 17117: t0 = u64 [a3 + 0xc8]\n 17121: a2 = u64 [a3 + 0xd8]\n 17125: a3 = u64 [a3 + 0xd0]\n 17129: a1 = u64 [s1 + 0xe0]\n 17133: a4 = a0 ^ a1\n 17136: a1 = a1 <u a0\n 17139: a0 = u64 [s1 + 0xe8]\n 17143: a5 = a0 <u a2\n 17146: a5 = a1 if a4 != 0\n 17149: a1 = u64 [s1 + 0xf0]\n 17153: t1 = a3 ^ a1\n 17156: a3 = a1 <u a3\n 17159: a1 = u64 [s1 + 0xf8]\n 17163: a1 = a1 <u t0\n 17166: a1 = a3 if t1 != 0\n 17169: a0 = a0 ^ a2\n 17172: a0 = a0 | a4\n 17175: a1 = a5 if a0 != 0\n 17178: fallthrough\n      : @588 (gas: 4)\n 17179: u64 [s1 + 0xf8] = a1\n 17183: a0 = s1 + 0x1160\n 17187: a1 = 0x40\n 17190: ra = 566, jump @17\n      : @589 [@dyn 283] (gas: 6)\n 17196: a3 = s1 + 0x1078\n 17200: a0 = u64 [a3 + 0x100]\n 17204: a1 = u64 [a3 + 0xf8]\n 17208: a2 = u64 [a3 + 0xf0]\n 17212: a4 = u64 [a3 + 0xe8]\n 17216: t0 = 568, jump @894\n      : @590 [@dyn 284] (gas: 1)\n 17222: jump @636 if a0 != 0\n      : @591 (gas: 9)\n 17226: u64 [a3 + 224] = 0\n 17230: u64 [a3 + 216] = 0\n 17234: a0 = u64 [s1 + 0xf8]\n 17238: u64 [a3 + 0xc8] = a0\n 17242: a1 = s1 + 0x1140\n 17246: u64 [a3 + 208] = 0\n 17250: a0 = a4\n 17252: u64 [s1 + 0xf8] = a4\n 17256: ra = 570, jump @19\n      : @592 [@dyn 285] (gas: 3)\n 17262: a1 = 0x20\n 17265: a0 = u64 [s1 + 0xf8]\n 17269: ra = 572, jump @26\n      : @593 [@dyn 286] (gas: 5)\n 17275: i32 a1 = a0 + 0\n 17277: a2 = 0x20\n 17280: a0 = 0\n 17282: ecalli 8 // 'seal_return'\n 17284: fallthrough\n      : @594 (gas: 9)\n 17285: u64 [a2 + 992] = 0\n 17289: u64 [a2 + 984] = 0\n 17293: u64 [a2 + 976] = 0\n 17297: u64 [a2 + 968] = 0\n 17301: a0 = s1 + 0x1000\n 17305: i32 a0 = a0 + 0x440\n 17309: ecalli 11 // 'value_transferred'\n 17311: a3 = s1 + 0x1078\n 17315: fallthrough\n      : @595 (gas: 9)\n 17316: a4 = a3 + 0x300\n 17320: a0 = u64 [a4 + 0xd8]\n 17324: a1 = u64 [a4 + 0xe0]\n 17328: a2 = u64 [a4 + 0xd0]\n 17332: a3 = u64 [a4 + 0xc8]\n 17336: a1 = a1 | a2\n 17339: a0 = a0 | a3\n 17342: a0 = a0 | a1\n 17345: jump @683 if a0 != 0\n      : @596 (gas: 3)\n 17349: a0 = u64 [s1 + 0xf8]\n 17353: a1 = i32 [a0]\n 17355: jump @684 if a1 <=u 3\n      : @597 (gas: 8)\n 17360: a1 = s1 + 0x1078\n 17364: u64 [a1 + 1024] = 0\n 17368: u64 [a1 + 1016] = 0\n 17372: u64 [a1 + 1008] = 0\n 17376: u64 [a1 + 1000] = 0x3\n 17381: a0 = s1 + 0x260\n 17385: a1 = s1 + 0x1460\n 17389: ra = 574, jump @21\n      : @598 [@dyn 287] (gas: 34)\n 17395: a1 = s1 + 0x200\n 17399: a2 = u64 [a1 + 0x70]\n 17402: a3 = u64 [a1 + 0x68]\n 17405: a5 = u64 [a1 + 0x78]\n 17408: a0 = u64 [a1 + 0x60]\n 17411: a4 = a2 << 0x3f\n 17414: a1 = a3 >> 0x1\n 17417: t0 = a1 | a4\n 17420: a1 = a5 << 0x3f\n 17423: u64 [s1 + 0xf0] = a2\n 17427: a2 = a2 >> 0x1\n 17430: a1 = a1 | a2\n 17433: u64 [s1 + 0xe0] = a3\n 17437: a2 = a3 << 0x3f\n 17440: a3 = a0 >> 0x1\n 17443: a4 = a3 | a2\n 17446: u64 [s1 + 0xe8] = a5\n 17450: t1 = a5 >> 0x1\n 17453: u64 [s1 + 0xd0] = a0\n 17457: a5 = a0 & 0x1\n 17460: a3 = -a5\n 17462: t2 = a3 & a1\n 17465: a2 = a3 & t0\n 17468: a3 = a3 & t1\n 17471: a0 = a4 & 0x7f\n 17474: u64 [s1 + 0xd8] = a0\n 17478: a4 = a0 if a5 == 0\n 17481: a0 = a4 <u 0x20\n 17484: a0 = 0 if a2 != 0\n 17486: a1 = t2 | a3\n 17489: a0 = 0 if a1 != 0\n 17491: u64 [s1 + 0xf8] = a5\n 17495: a1 = a5 <u 0x1\n 17498: jump @685 if a1 != a0\n      : @599 (gas: 12)\n 17502: u64 [s1 + 0xb8] = a4\n 17506: a5 = s1 + 0x200\n 17510: u64 [a5 + 0x40] = a4\n 17513: u64 [s1 + 0xa8] = a2\n 17517: u64 [a5 + 0x48] = a2\n 17520: u64 [s1 + 0xb0] = t2\n 17524: u64 [s1 + 0x250] = t2\n 17528: a0 = 0x80\n 17532: a1 = s1 + 0x240\n 17536: u64 [s1 + 0xa0] = a3\n 17540: u64 [a5 + 0x58] = a3\n 17543: ra = 576, jump @19\n      : @600 [@dyn 288] (gas: 2)\n 17549: a0 = u64 [s1 + 0xf8]\n 17553: jump @603 if a0 != 0\n      : @601 (gas: 13)\n 17556: a0 = u64 [s1 + 0xd0]\n 17560: a0 = a0 & 0xffffffffffffff00\n 17564: a1 = u64 [s1 + 0xe0]\n 17568: a2 = s1 + 0x100\n 17572: u64 [a2 + 0xc8] = a1\n 17576: u64 [a2 + 0xc0] = a0\n 17580: a0 = u64 [s1 + 0xf0]\n 17584: u64 [a2 + 0xd0] = a0\n 17588: a0 = u64 [s1 + 0xe8]\n 17592: u64 [a2 + 0xd8] = a0\n 17596: a0 = 0xa0\n 17600: a1 = s1 + 0x1c0\n 17604: ra = 578, jump @19\n      : @602 [@dyn 289] (gas: 7)\n 17610: a1 = 0\n 17612: a0 = 0\n 17614: t0 = 0\n 17616: a3 = 0xc0\n 17620: a2 = u64 [s1 + 0xd8]\n 17624: a3 = 0xa0 if a2 == 0\n 17628: jump @611\n      : @603 (gas: 7)\n 17631: u64 [s1 + 568] = 0\n 17635: u64 [s1 + 560] = 0\n 17639: u64 [s1 + 552] = 0\n 17643: a1 = s1 + 0x220\n 17647: u64 [s1 + 544] = 0x3\n 17652: a0 = 0\n 17654: ra = 580, jump @19\n      : @604 [@dyn 290] (gas: 21)\n 17660: a0 = sp + 0xffffffffffffffe0\n 17663: a1 = a0 & 0xffffffffffffffe0\n 17666: sp = a1\n 17668: u64 [s1 + 248] = 0\n 17672: a5 = 0\n 17674: t2 = 0\n 17676: t0 = 0\n 17678: t1 = u64 [0x200c8]\n 17683: a2 = u64 [0x200d0]\n 17688: ra = u64 [0x200d8]\n 17693: a0 = u64 [0x200e0]\n 17698: u64 [a1 + 0x18] = t1\n 17701: u64 [s1 + 0xd0] = a2\n 17705: u64 [a1 + 0x10] = a2\n 17708: u64 [a1 + 0x8] = ra\n 17711: a2 = a0\n 17713: u64 [a1] = a0\n 17715: a0 = 0xffffff60\n 17725: u64 [s1 + 0x98] = a0\n 17729: u64 [s1 + 0x90] = a1\n 17733: fallthrough\n      : @605 (gas: 19)\n 17734: u64 [s1 + 0xd8] = a2\n 17738: a0 = u64 [s1 + 0xb8]\n 17742: a2 = u64 [s1 + 0xf8]\n 17746: a0 = a2 <u a0\n 17749: a2 = u64 [s1 + 0xa8]\n 17753: a3 = a5 ^ a2\n 17756: u64 [s1 + 0xf0] = a5\n 17760: a2 = a5 <u a2\n 17763: a2 = a0 if a3 == 0\n 17766: a4 = u64 [s1 + 0xb0]\n 17770: a0 = t2 <u a4\n 17773: a3 = u64 [s1 + 0xa0]\n 17777: a5 = t0 ^ a3\n 17780: a3 = t0 <u a3\n 17783: a3 = a0 if a5 == 0\n 17786: a0 = t2 ^ a4\n 17789: a0 = a0 | a5\n 17792: a3 = a2 if a0 == 0\n 17795: jump @610 if a3 == 0\n      : @606 (gas: 6)\n 17799: a0 = s1 + 0x200\n 17803: u64 [s1 + 0xe8] = t0\n 17807: u64 [s1 + 0xc8] = t1\n 17811: u64 [s1 + 0xe0] = t2\n 17815: u64 [s1 + 0xc0] = ra\n 17819: ra = 582, jump @21\n      : @607 [@dyn 291] (gas: 10)\n 17825: a5 = u64 [s1 + 0xe0]\n 17829: a0 = u64 [s1 + 0xe8]\n 17833: a0 = a0 | a5\n 17836: a1 = u64 [s1 + 0xf8]\n 17840: a2 = u64 [s1 + 0x98]\n 17844: a1 = a1 <u a2\n 17847: a2 = u64 [s1 + 0xf0]\n 17851: a1 = 0 if a2 != 0\n 17853: a1 = 0 if a0 != 0\n 17855: jump @636 if a1 == 0\n      : @608 (gas: 14)\n 17859: t0 = u64 [s1 + 0x218]\n 17863: a0 = s1 + 0x200\n 17867: a1 = u64 [a0 + 0x10]\n 17870: a3 = u64 [a0 + 0x8]\n 17873: a4 = u64 [a0]\n 17875: a0 = u64 [s1 + 0xf8]\n 17879: i32 a0 = a0 + 0xa0\n 17883: a2 = s1 + 0x100\n 17887: u64 [a2 + 0xe0] = a4\n 17891: u64 [a2 + 0xe8] = a3\n 17895: u64 [a2 + 0xf0] = a1\n 17899: a1 = s1 + 0x1e0\n 17903: u64 [s1 + 0x1f8] = t0\n 17907: ra = 584, jump @19\n      : @609 [@dyn 292] (gas: 36)\n 17913: t0 = u64 [s1 + 0xe8]\n 17917: a5 = u64 [s1 + 0xd8]\n 17921: a5 = a5 + 0x1\n 17924: a0 = a5 <u 0x1\n 17927: ra = u64 [s1 + 0xc0]\n 17931: ra = ra + a0\n 17934: a0 = a5 | ra\n 17937: a0 = a0 <u 0x1\n 17940: a1 = u64 [s1 + 0xd0]\n 17944: a0 = a0 + a1\n 17947: a1 = a0 <u a1\n 17950: a3 = u64 [s1 + 0xc8]\n 17954: a3 = a3 + a1\n 17957: a1 = u64 [s1 + 0xf8]\n 17961: t1 = a1 + 0x20\n 17964: a2 = t1 <u a1\n 17967: a4 = u64 [s1 + 0xf0]\n 17971: t2 = a4 + a2\n 17974: a4 = t2 <u a4\n 17977: a4 = a2 if a2 == 0\n 17980: a1 = u64 [s1 + 0xe0]\n 17984: a4 = a4 + a1\n 17987: a2 = a4 <u a1\n 17990: t0 = t0 + a2\n 17993: a1 = u64 [s1 + 0x90]\n 17997: u64 [a1 + 0x8] = ra\n 18000: a2 = a5\n 18002: u64 [a1] = a5\n 18004: u64 [a1 + 0x10] = a0\n 18007: u64 [a1 + 0x18] = a3\n 18010: u64 [s1 + 0xd0] = a0\n 18014: u64 [s1 + 0xf8] = t1\n 18018: a5 = t2\n 18020: t2 = a4\n 18022: t1 = a3\n 18024: jump @605\n      : @610 (gas: 11)\n 18027: a0 = u64 [s1 + 0xf8]\n 18031: a3 = a0 + 0xa0\n 18035: a0 = a3 <u a0\n 18038: a2 = u64 [s1 + 0xf0]\n 18042: a1 = a2 + a0\n 18045: a2 = a1 <u a2\n 18048: a2 = a0 if a0 == 0\n 18051: a0 = t2 + a2\n 18054: a2 = a0 <u t2\n 18057: t0 = t0 + a2\n 18060: fallthrough\n      : @611 (gas: 37)\n 18061: t1 = a3 + 0xffffffffffffff9f\n 18064: a3 = t1 <u a3\n 18067: a5 = a1 + a3\n 18070: a5 = a5 + 0xffffffffffffffff\n 18073: u64 [s1 + 0xd8] = a5\n 18077: a2 = a5 ^ a1\n 18080: a1 = a5 <u a1\n 18083: a1 = a3 if a2 == 0\n 18086: a3 = a0 + 0xffffffffffffffff\n 18089: a4 = a3 + a1\n 18092: a1 = a4 <u a3\n 18095: a0 = a0 <u 0x1\n 18098: a2 = t0 - a0\n 18101: t0 = a2 + a1\n 18104: u64 [s1 + 0xc0] = t0\n 18108: a0 = t1 & 0xffffffffffffffe0\n 18111: u64 [s1 + 0xd0] = a0\n 18115: a3 = a0 + 0x80\n 18119: u64 [s1 + 0xf8] = a3\n 18123: a0 = a3 <u a0\n 18126: a2 = a5 + a0\n 18129: u64 [s1 + 0xf0] = a2\n 18133: a1 = a2 <u a5\n 18136: a1 = a0 if a0 == 0\n 18139: u64 [s1 + 0xc8] = a4\n 18143: a1 = a1 + a4\n 18146: u64 [s1 + 0xe8] = a1\n 18150: a0 = a1 <u a4\n 18153: t0 = t0 + a0\n 18156: u64 [s1 + 0xe0] = t0\n 18160: u64 [s1 + 0x1a0] = a3\n 18164: u64 [s1 + 0x1a8] = a2\n 18168: u64 [s1 + 0x1b0] = a1\n 18172: a0 = 0x40\n 18175: a1 = s1 + 0x1a0\n 18179: u64 [s1 + 0x1b8] = t0\n 18183: ra = 586, jump @19\n      : @612 [@dyn 293] (gas: 17)\n 18189: u64 [s1 + 344] = 0\n 18193: u64 [s1 + 336] = 0\n 18197: u64 [s1 + 328] = 0\n 18201: a4 = s1 + 0x100\n 18205: u64 [a4 + 64] = 0x80\n 18210: a0 = u64 [s1 + 0xe0]\n 18214: u64 [a4 + 0x78] = a0\n 18217: a0 = u64 [s1 + 0xe8]\n 18221: u64 [a4 + 0x70] = a0\n 18224: a0 = u64 [s1 + 0xf0]\n 18228: u64 [a4 + 0x68] = a0\n 18231: a0 = s1 + 0x180\n 18235: a1 = s1 + 0x160\n 18239: a2 = s1 + 0x140\n 18243: a3 = u64 [s1 + 0xf8]\n 18247: u64 [a4 + 0x60] = a3\n 18250: ra = 588, jump @793\n      : @613 [@dyn 294] (gas: 10)\n 18256: a0 = u64 [s1 + 0xc8]\n 18260: a1 = u64 [s1 + 0xc0]\n 18264: a0 = a0 | a1\n 18267: a1 = 0xffffff80\n 18277: a2 = u64 [s1 + 0xd0]\n 18281: a1 = a2 <u a1\n 18284: a2 = u64 [s1 + 0xd8]\n 18288: a1 = 0 if a2 != 0\n 18290: a1 = 0 if a0 != 0\n 18292: jump @636 if a1 == 0\n      : @614 (gas: 30)\n 18296: ra = u64 [s1 + 0x190]\n 18300: a1 = u64 [s1 + 0x198]\n 18304: t1 = u64 [s1 + 0x180]\n 18308: a3 = u64 [s1 + 0x188]\n 18312: a2 = u64 [s1 + 0xe8]\n 18316: a4 = ra <u a2\n 18319: a1 = a1 - a4\n 18322: a0 = u64 [s1 + 0xe0]\n 18326: t0 = a1 - a0\n 18329: a1 = u64 [s1 + 0xf0]\n 18333: a4 = a3 ^ a1\n 18336: a5 = a3 <u a1\n 18339: a0 = u64 [s1 + 0xf8]\n 18343: t2 = t1 <u a0\n 18346: a5 = t2 if a4 == 0\n 18349: a2 = ra - a2\n 18352: a4 = a2 <u a5\n 18355: a4 = t0 - a4\n 18358: a5 = a2 - a5\n 18361: a3 = a3 - t2\n 18364: a3 = a3 - a1\n 18367: a1 = t1 - a0\n 18370: a2 = a1 | a5\n 18373: a3 = a3 | a4\n 18376: a2 = a2 | a3\n 18379: a2 = a2 >> 0x20\n 18382: a3 = a3 | a5\n 18385: a3 = a3 << 0x20\n 18388: a2 = a2 | a3\n 18391: jump @636 if a2 != 0\n      : @615 (gas: 2)\n 18395: u64 [s1 + 0xf8] = a1\n 18399: ra = 590, jump @26\n      : @616 [@dyn 295] (gas: 5)\n 18405: i32 a1 = a0 + 0\n 18407: a2 = i32 [s1 + 0xf8]\n 18411: a0 = 0\n 18413: ecalli 8 // 'seal_return'\n 18415: jump @594\n      : @617 (gas: 9)\n 18418: a2 = s1 + 0x7ff\n 18422: a2 = a2 + 0x71\n 18425: u64 [a2 + 1960] = 0\n 18429: u64 [a2 + 1952] = 0\n 18433: u64 [a2 + 1944] = 0\n 18437: a1 = s1 + 0x1000\n 18441: u64 [a2 + 1936] = 0x4\n 18446: a0 = 0\n 18448: ra = 592, jump @19\n      : @618 [@dyn 296] (gas: 37)\n 18454: a0 = sp + 0xffffffffffffffe0\n 18457: a4 = a0 & 0xffffffffffffffe0\n 18460: sp = a4\n 18462: u64 [s1 + 248] = 0\n 18466: t2 = 0\n 18468: t1 = 0\n 18470: u64 [s1 + 240] = 0\n 18474: t0 = u64 [0x20030]\n 18479: a3 = u64 [0x20038]\n 18484: a1 = u64 [s1 + 0x70]\n 18487: a0 = a1 + 0x20\n 18490: u64 [s1 + 0x90] = a0\n 18494: a0 = a0 <u a1\n 18497: a1 = u64 [s1 + 0x60]\n 18500: a2 = a1 + a0\n 18503: u64 [s1 + 0x88] = a2\n 18507: a1 = a2 <u a1\n 18510: a1 = a0 if a0 == 0\n 18513: a5 = u64 [0x20040]\n 18518: a0 = u64 [0x20048]\n 18523: ra = t0\n 18525: u64 [a4 + 0x18] = t0\n 18528: u64 [s1 + 0xb8] = a3\n 18532: u64 [a4 + 0x10] = a3\n 18535: t0 = a5\n 18537: u64 [a4 + 0x8] = a5\n 18540: u64 [s1 + 0xd8] = a4\n 18544: a2 = a0\n 18546: u64 [a4] = a0\n 18548: a0 = u64 [s1 + 0x68]\n 18551: a1 = a1 + a0\n 18554: u64 [s1 + 0x80] = a1\n 18558: a0 = a1 <u a0\n 18561: a1 = u64 [s1 + 0x58]\n 18564: a0 = a0 + a1\n 18567: u64 [s1 + 0x78] = a0\n 18570: fallthrough\n      : @619 (gas: 21)\n 18571: u64 [s1 + 0xc0] = a2\n 18575: u64 [s1 + 0xc8] = t0\n 18579: u64 [s1 + 0xd0] = ra\n 18583: a0 = u64 [s1 + 0xb0]\n 18587: a1 = u64 [s1 + 0xf8]\n 18591: a0 = a1 <u a0\n 18594: a2 = u64 [s1 + 0xa0]\n 18598: a1 = t2 ^ a2\n 18601: a2 = t2 <u a2\n 18604: a2 = a0 if a1 == 0\n 18607: a4 = u64 [s1 + 0xa8]\n 18611: a0 = t1 <u a4\n 18614: a3 = u64 [s1 + 0x98]\n 18618: a1 = u64 [s1 + 0xf0]\n 18622: a5 = a1 ^ a3\n 18625: a3 = a1 <u a3\n 18628: a3 = a0 if a5 == 0\n 18631: a0 = t1 ^ a4\n 18634: a0 = a0 | a5\n 18637: a3 = a2 if a0 == 0\n 18640: jump @621 if a3 != 0\n      : @620 (gas: 1)\n 18643: jump @318\n      : @621 (gas: 6)\n 18646: a0 = s1 + 0x7ff\n 18650: a0 = a0 + 0x7e1\n 18654: a1 = u64 [s1 + 0xd8]\n 18658: u64 [s1 + 0xe8] = t1\n 18662: u64 [s1 + 0xe0] = t2\n 18666: ra = 594, jump @21\n      : @622 [@dyn 297] (gas: 30)\n 18672: t2 = u64 [s1 + 0xf8]\n 18676: t1 = u64 [s1 + 0xe0]\n 18680: ra = u64 [s1 + 0xe8]\n 18684: a1 = u64 [s1 + 0x90]\n 18688: a0 = a1 + t2\n 18691: a1 = a0 <u a1\n 18694: a4 = u64 [s1 + 0x88]\n 18698: a2 = a4 + t1\n 18701: a2 = a2 + a1\n 18704: a5 = a2 ^ a4\n 18707: a4 = a2 <u a4\n 18710: a4 = a1 if a5 == 0\n 18713: a5 = u64 [s1 + 0x80]\n 18717: a1 = a5 + ra\n 18720: t0 = a1 <u a5\n 18723: a5 = u64 [s1 + 0xf0]\n 18727: a3 = u64 [s1 + 0x78]\n 18730: a5 = a5 + a3\n 18733: a5 = a5 + t0\n 18736: a4 = a4 + a1\n 18739: a1 = a4 <u a1\n 18742: a1 = a1 + a5\n 18745: a1 = a1 | a2\n 18748: a2 = a0 | a4\n 18751: a2 = a2 | a1\n 18754: a1 = a1 | a4\n 18757: a2 = a2 >> 0x20\n 18760: a1 = a1 << 0x20\n 18763: a1 = a1 | a2\n 18766: jump @636 if a1 != 0\n      : @623 (gas: 15)\n 18770: a5 = s1 + 0x7ff\n 18774: a5 = a5 + 0x71\n 18777: t0 = u64 [a5 + 0x788]\n 18781: a3 = a5 + 0x700\n 18785: a1 = u64 [a3 + 0x80]\n 18789: a2 = u64 [a3 + 0x78]\n 18792: a4 = u64 [a3 + 0x70]\n 18795: u64 [a3 + 0x50] = a4\n 18798: u64 [a3 + 0x58] = a2\n 18801: u64 [a3 + 0x60] = a1\n 18804: a1 = s1 + 0x7ff\n 18808: a1 = a1 + 0x7c1\n 18812: u64 [a5 + 0x768] = t0\n 18816: u64 [s1 + 0xf8] = t2\n 18820: ra = 596, jump @19\n      : @624 [@dyn 298] (gas: 39)\n 18826: a3 = u64 [s1 + 0xc0]\n 18830: a3 = a3 + 0x1\n 18833: a0 = a3 <u 0x1\n 18836: ra = u64 [s1 + 0xc8]\n 18840: ra = ra + a0\n 18843: a0 = a3 | ra\n 18846: a0 = a0 <u 0x1\n 18849: a1 = u64 [s1 + 0xb8]\n 18853: t2 = a1 + a0\n 18856: a1 = t2 <u a1\n 18859: a0 = u64 [s1 + 0xd0]\n 18863: a0 = a0 + a1\n 18866: a1 = u64 [s1 + 0xf8]\n 18870: t1 = a1 + 0x20\n 18873: a2 = t1 <u a1\n 18876: a4 = u64 [s1 + 0xe0]\n 18880: a1 = a4 + a2\n 18883: a4 = a1 <u a4\n 18886: a4 = a2 if a2 == 0\n 18889: a2 = u64 [s1 + 0xe8]\n 18893: a4 = a4 + a2\n 18896: a2 = a4 <u a2\n 18899: a5 = u64 [s1 + 0xf0]\n 18903: a5 = a5 + a2\n 18906: u64 [s1 + 0xf0] = a5\n 18910: t0 = ra\n 18912: a5 = u64 [s1 + 0xd8]\n 18916: u64 [a5 + 0x8] = ra\n 18919: a2 = a3\n 18921: u64 [a5] = a3\n 18923: a3 = t2\n 18925: u64 [a5 + 0x10] = a3\n 18928: ra = a0\n 18930: u64 [a5 + 0x18] = a0\n 18933: u64 [s1 + 0xb8] = a3\n 18937: u64 [s1 + 0xf8] = t1\n 18941: t2 = a1\n 18943: t1 = a4\n 18945: jump @619\n      : @625 (gas: 3)\n 18948: a0 = s1 + 0x760\n 18952: a1 = 0x40\n 18955: ra = 598, jump @17\n      : @626 [@dyn 299] (gas: 13)\n 18961: a1 = s1 + 0x700\n 18965: a4 = u64 [a1 + 0x78]\n 18968: a5 = u64 [a1 + 0x70]\n 18971: a3 = u64 [a1 + 0x68]\n 18974: a0 = u64 [a1 + 0x60]\n 18977: a2 = a3 | a4\n 18980: a1 = a0 | a5\n 18983: a1 = a1 | a2\n 18986: a1 = a1 >> 0x20\n 18989: a2 = a2 | a5\n 18992: a2 = a2 << 0x20\n 18995: a1 = a1 | a2\n 18998: jump @636 if a1 != 0\n      : @627 (gas: 11)\n 19002: u64 [s1 + 1872] = 0\n 19006: u64 [s1 + 1864] = 0\n 19010: u64 [s1 + 1856] = 0\n 19014: a2 = 0x8c379a000000000\n 19024: a1 = s1 + 0x740\n 19028: u64 [s1 + 0x758] = a2\n 19032: u64 [s1 + 0xf8] = a0\n 19036: u64 [s1 + 0xf0] = a3\n 19040: u64 [s1 + 0xe8] = a4\n 19044: u64 [s1 + 0xe0] = a5\n 19048: ra = 600, jump @19\n      : @628 [@dyn 300] (gas: 1)\n 19054: t0 = 602, jump @892\n      : @629 [@dyn 301] (gas: 1)\n 19060: jump @636 if a0 == 0\n      : @630 (gas: 9)\n 19064: i32 a0 = a1 + 0x4\n 19067: u64 [s1 + 1848] = 0\n 19071: u64 [s1 + 1840] = 0\n 19075: u64 [s1 + 1824] = 0x20\n 19080: a1 = s1 + 0x720\n 19084: u64 [s1 + 1832] = 0\n 19088: u64 [s1 + 0xe8] = a3\n 19092: u64 [s1 + 0xe0] = a4\n 19096: ra = 604, jump @19\n      : @631 [@dyn 302] (gas: 9)\n 19102: a1 = u64 [s1 + 0xf8]\n 19106: a0 = u64 [s1 + 0xe0]\n 19110: a0 = a0 + 0xffffffffffffffdc\n 19113: a0 = a1 <u a0\n 19116: a2 = u64 [s1 + 0xf0]\n 19120: a0 = 0 if a2 != 0\n 19122: a2 = u64 [s1 + 0xe8]\n 19126: a0 = 0 if a2 != 0\n 19128: jump @636 if a0 == 0\n      : @632 (gas: 7)\n 19132: i32 a0 = a1 + 0x24\n 19135: u64 [s1 + 1816] = 0\n 19139: u64 [s1 + 1808] = 0\n 19143: u64 [s1 + 1792] = 0x26\n 19148: a1 = s1 + 0x700\n 19152: u64 [s1 + 1800] = 0\n 19156: ra = 606, jump @19\n      : @633 [@dyn 303] (gas: 9)\n 19162: a4 = u64 [s1 + 0xe8]\n 19166: a3 = u64 [s1 + 0xf0]\n 19170: a1 = u64 [s1 + 0xf8]\n 19174: a2 = 0x100000000\n 19184: a0 = 0xffffffbc\n 19194: a0 = a1 <u a0\n 19197: a0 = 0 if a3 != 0\n 19199: a0 = 0 if a4 != 0\n 19201: jump @636 if a0 == 0\n      : @634 (gas: 13)\n 19204: i32 a0 = a1 + 0x44\n 19207: a1 = u64 [0x20058]\n 19212: a4 = s1 + 0x600\n 19216: u64 [a4 + 0xf8] = a1\n 19220: a1 = u64 [0x20060]\n 19225: u64 [s1 + 0xe0] = a2\n 19229: a2 = u64 [0x20068]\n 19234: a3 = u64 [0x20070]\n 19239: u64 [a4 + 0xf0] = a1\n 19243: u64 [a4 + 0xe8] = a2\n 19247: a1 = s1 + 0x6e0\n 19251: u64 [a4 + 0xe0] = a3\n 19255: ra = 608, jump @19\n      : @635 [@dyn 304] (gas: 9)\n 19261: a2 = u64 [s1 + 0xf8]\n 19265: a0 = u64 [s1 + 0xe0]\n 19269: a0 = a0 + 0xffffffffffffff9c\n 19272: a0 = a2 <u a0\n 19275: a1 = u64 [s1 + 0xf0]\n 19279: a0 = 0 if a1 != 0\n 19281: a1 = u64 [s1 + 0xe8]\n 19285: a0 = 0 if a1 != 0\n 19287: jump @721 if a0 != 0\n      : @636 (gas: 1)\n 19291: trap\n      : @637 (gas: 4)\n 19292: a1 = 0x20140\n 19297: i32 a1 = a1 + 0\n 19299: a0 = 0x1\n 19302: jump @639\n      : @638 (gas: 6)\n 19304: i32 a1 = a1 + 0\n 19306: a0 = 0x1\n 19309: a2 = 0\n 19311: ecalli 8 // 'seal_return'\n 19313: a1 = 0x20140\n 19318: jump @638\n      : @639 (gas: 4)\n 19320: a2 = 0\n 19322: ecalli 8 // 'seal_return'\n 19324: a1 = 0x20140\n 19329: jump @638\n      : @640 (gas: 2)\n 19331: a1 = 0x20140\n 19336: jump @638\n      : @641 (gas: 2)\n 19338: a1 = 0x20140\n 19343: jump @638\n      : @642 (gas: 2)\n 19345: a1 = 0x20140\n 19350: jump @638\n      : @643 (gas: 2)\n 19352: a1 = 0x20140\n 19357: jump @638\n      : @644 (gas: 2)\n 19359: a1 = 0x20140\n 19364: jump @638\n      : @645 (gas: 2)\n 19366: a1 = 0x20140\n 19371: jump @638\n      : @646 (gas: 21)\n 19373: a0 = s1 + 0x1000\n 19377: i32 a0 = a0 + 0x6a0\n 19381: a1 = 0x4\n 19384: ecalli 1 // 'call_data_load'\n 19386: a5 = s1 + 0x1078\n 19390: a0 = u64 [a5 + 0x628]\n 19394: a1 = u64 [a5 + 0x630]\n 19398: a2 = u64 [a5 + 0x638]\n 19402: a3 = u64 [a5 + 0x640]\n 19406: u64 [a5 + 1632] = 0\n 19410: u64 [a5 + 1624] = 0\n 19414: u64 [a5 + 1616] = 0\n 19418: u64 [a5 + 1608] = 0x6\n 19423: a4 = a5 + 0x600\n 19427: u64 [a4 + 0x80] = a3\n 19431: u64 [a4 + 0x78] = a2\n 19434: u64 [a4 + 0x70] = a1\n 19437: u64 [a4 + 0x68] = a0\n 19440: a0 = s1 + 0x16c0\n 19444: a1 = s1 + 0x16e0\n 19448: ra = 610, jump @22\n      : @647 [@dyn 305] (gas: 4)\n 19454: a1 = 0x20140\n 19459: i32 a1 = a1 + 0\n 19461: a0 = 0\n 19463: jump @639\n      : @648 (gas: 2)\n 19466: a1 = 0x20140\n 19471: jump @638\n      : @649 (gas: 2)\n 19474: a1 = 0x20140\n 19479: jump @638\n      : @650 (gas: 11)\n 19482: a2 = s1 + 0x7ff\n 19486: a2 = a2 + 0x71\n 19489: u64 [a2 + 1632] = 0\n 19493: u64 [a2 + 1624] = 0\n 19497: u64 [a2 + 1616] = 0\n 19501: a0 = 0x4e487b7100000000\n 19511: a1 = s1 + 0x7ff\n 19515: a1 = a1 + 0x6c1\n 19519: u64 [a2 + 0x668] = a0\n 19523: a0 = 0\n 19525: ra = 612, jump @19\n      : @651 [@dyn 306] (gas: 11)\n 19531: a1 = s1 + 0x7ff\n 19535: a1 = a1 + 0x71\n 19538: u64 [a1 + 1608] = 0\n 19542: u64 [a1 + 1600] = 0\n 19546: u64 [a1 + 1584] = 0x22\n 19551: a2 = a1\n 19553: a0 = 0x4\n 19556: a1 = s1 + 0x7ff\n 19560: a1 = a1 + 0x6a1\n 19564: u64 [a2 + 1592] = 0\n 19568: ra = 614, jump @19\n      : @652 [@dyn 307] (gas: 2)\n 19574: a1 = i32 [0x20134]\n 19579: jump @654 if a1 >u 63\n      : @653 (gas: 3)\n 19583: u32 [0x20134] = 0x40\n 19589: a1 = 0x20140\n 19594: jump @704\n      : @654 (gas: 2)\n 19597: a1 = 0x20140\n 19602: jump @704\n      : @655 (gas: 2)\n 19605: a1 = 0x20140\n 19610: jump @638\n      : @656 (gas: 2)\n 19613: a1 = 0x20140\n 19618: jump @638\n      : @657 (gas: 2)\n 19621: a1 = 0x20140\n 19626: jump @638\n      : @658 (gas: 2)\n 19629: a1 = 0x20140\n 19634: jump @638\n      : @659 (gas: 2)\n 19637: a1 = 0x20140\n 19642: jump @638\n      : @660 (gas: 2)\n 19645: a1 = 0x20140\n 19650: jump @638\n      : @661 (gas: 2)\n 19653: a1 = 0x20140\n 19658: jump @638\n      : @662 (gas: 2)\n 19661: a1 = 0x20140\n 19666: jump @638\n      : @663 (gas: 8)\n 19669: u64 [s1 + 688] = 0\n 19673: u64 [s1 + 680] = 0\n 19677: u64 [s1 + 672] = 0\n 19681: a0 = 0xe602df0500000000\n 19691: a1 = s1 + 0x2a0\n 19695: u64 [s1 + 0x2b8] = a0\n 19699: a0 = 0\n 19701: ra = 616, jump @19\n      : @664 [@dyn 308] (gas: 7)\n 19707: u64 [s1 + 664] = 0\n 19711: u64 [s1 + 656] = 0\n 19715: u64 [s1 + 648] = 0\n 19719: a0 = 0x4\n 19722: a1 = s1 + 0x280\n 19726: u64 [s1 + 640] = 0\n 19730: ra = 618, jump @19\n      : @665 [@dyn 309] (gas: 2)\n 19736: a1 = i32 [0x20134]\n 19741: jump @667 if a1 >u 63\n      : @666 (gas: 3)\n 19745: u32 [0x20134] = 0x40\n 19751: a1 = 0x20140\n 19756: jump @704\n      : @667 (gas: 2)\n 19759: a1 = 0x20140\n 19764: jump @704\n      : @668 (gas: 8)\n 19767: u64 [s1 + 752] = 0\n 19771: u64 [s1 + 744] = 0\n 19775: u64 [s1 + 736] = 0\n 19779: a0 = 0x94280d6200000000\n 19789: a1 = s1 + 0x2e0\n 19793: u64 [s1 + 0x2f8] = a0\n 19797: a0 = 0\n 19799: ra = 620, jump @19\n      : @669 [@dyn 310] (gas: 7)\n 19805: u64 [s1 + 728] = 0\n 19809: u64 [s1 + 720] = 0\n 19813: u64 [s1 + 712] = 0\n 19817: a0 = 0x4\n 19820: a1 = s1 + 0x2c0\n 19824: u64 [s1 + 704] = 0\n 19828: ra = 622, jump @19\n      : @670 [@dyn 311] (gas: 2)\n 19834: a1 = i32 [0x20134]\n 19839: jump @672 if a1 >u 63\n      : @671 (gas: 3)\n 19843: u32 [0x20134] = 0x40\n 19849: a1 = 0x20140\n 19854: jump @704\n      : @672 (gas: 2)\n 19857: a1 = 0x20140\n 19862: jump @704\n      : @673 (gas: 2)\n 19865: a1 = 0x20140\n 19870: jump @638\n      : @674 (gas: 2)\n 19873: a1 = 0x20140\n 19878: jump @638\n      : @675 (gas: 2)\n 19881: a1 = 0x20140\n 19886: jump @638\n      : @676 (gas: 2)\n 19889: a1 = 0x20140\n 19894: jump @638\n      : @677 (gas: 2)\n 19897: a1 = 0x20140\n 19902: jump @638\n      : @678 (gas: 2)\n 19905: a1 = 0x20140\n 19910: jump @638\n      : @679 (gas: 2)\n 19913: a1 = 0x20140\n 19918: jump @638\n      : @680 (gas: 2)\n 19921: a1 = 0x20140\n 19926: jump @638\n      : @681 (gas: 2)\n 19929: a1 = 0x20140\n 19934: jump @638\n      : @682 (gas: 2)\n 19937: a1 = 0x20140\n 19942: jump @638\n      : @683 (gas: 2)\n 19945: a1 = 0x20140\n 19950: jump @638\n      : @684 (gas: 2)\n 19953: a1 = 0x20140\n 19958: jump @638\n      : @685 (gas: 6)\n 19961: u64 [s1 + 304] = 0\n 19965: u64 [s1 + 296] = 0\n 19969: u64 [s1 + 288] = 0\n 19973: t0 = 0x270\n 19977: a0 = 0x4e487b7100000000\n 19987: fallthrough\n      : @686 [@dyn 312] (gas: 4)\n 19988: a1 = s1 + 0x120\n 19992: u64 [s1 + 0x138] = a0\n 19996: a0 = 0\n 19998: ra = 626, jump @19\n      : @687 [@dyn 313] (gas: 7)\n 20004: u64 [s1 + 280] = 0\n 20008: u64 [s1 + 272] = 0\n 20012: u64 [s1 + 256] = 0x22\n 20017: a0 = 0x4\n 20020: a1 = s1 + 0x100\n 20024: u64 [s1 + 264] = 0\n 20028: ra = 628, jump @19\n      : @688 [@dyn 314] (gas: 2)\n 20034: a1 = i32 [0x20134]\n 20039: jump @690 if a1 >u 63\n      : @689 (gas: 3)\n 20043: u32 [0x20134] = 0x40\n 20049: a1 = 0x20140\n 20054: jump @704\n      : @690 (gas: 2)\n 20057: a1 = 0x20140\n 20062: jump @704\n      : @691 (gas: 8)\n 20065: u64 [s1 + 1296] = 0\n 20069: u64 [s1 + 1288] = 0\n 20073: u64 [s1 + 1280] = 0\n 20077: a0 = 0xec442f0500000000\n 20087: a1 = s1 + 0x500\n 20091: u64 [s1 + 0x518] = a0\n 20095: a0 = 0\n 20097: ra = 630, jump @19\n      : @692 [@dyn 315] (gas: 8)\n 20103: u64 [s1 + 1272] = 0\n 20107: u64 [s1 + 1264] = 0\n 20111: u64 [s1 + 1256] = 0\n 20115: a0 = 0x4\n 20118: a1 = s1 + 0x4e0\n 20122: u64 [s1 + 1248] = 0\n 20126: ra = 0x27c\n 20130: jump @19\n      : @693 (gas: 6)\n 20133: u64 [s1 + 1360] = 0\n 20137: u64 [s1 + 1352] = 0\n 20141: u64 [s1 + 1344] = 0\n 20145: t0 = 0x278\n 20149: a0 = 0x4e487b7100000000\n 20159: fallthrough\n      : @694 [@dyn 316] (gas: 4)\n 20160: a1 = s1 + 0x540\n 20164: u64 [s1 + 0x558] = a0\n 20168: a0 = 0\n 20170: ra = 634, jump @19\n      : @695 [@dyn 317] (gas: 7)\n 20176: u64 [s1 + 1336] = 0\n 20180: u64 [s1 + 1328] = 0\n 20184: u64 [s1 + 1312] = 0x11\n 20189: a0 = 0x4\n 20192: a1 = s1 + 0x520\n 20196: u64 [s1 + 1320] = 0\n 20200: ra = 636, jump @19\n      : @696 [@dyn 318] (gas: 3)\n 20206: a0 = u64 [s1 + 0xf0]\n 20210: a0 = i32 [a0]\n 20212: jump @698 if a0 >u 63\n      : @697 (gas: 3)\n 20216: a1 = u64 [s1 + 0xf0]\n 20220: u32 [a1 + 0] = 0x40\n 20223: fallthrough\n      : @698 (gas: 5)\n 20224: a0 = 0x1\n 20227: a2 = 0x24\n 20230: a1 = u64 [s1 + 0xe0]\n 20234: ecalli 8 // 'seal_return'\n 20236: fallthrough\n      : @699 (gas: 12)\n 20237: a0 = s1 + 0x7ff\n 20241: a0 = a0 + 0x71\n 20244: u64 [a0 + 1696] = 0\n 20248: u64 [a0 + 1688] = 0\n 20252: u64 [a0 + 1680] = 0\n 20256: a2 = a0\n 20258: a0 = 0x4e487b7100000000\n 20268: a1 = s1 + 0x7ff\n 20272: a1 = a1 + 0x701\n 20276: u64 [a2 + 0x6a8] = a0\n 20280: a0 = 0\n 20282: ra = 638, jump @19\n      : @700 [@dyn 319] (gas: 11)\n 20288: a1 = s1 + 0x7ff\n 20292: a1 = a1 + 0x71\n 20295: u64 [a1 + 1672] = 0\n 20299: u64 [a1 + 1664] = 0\n 20303: u64 [a1 + 1648] = 0x41\n 20308: a2 = a1\n 20310: a0 = 0x4\n 20313: a1 = s1 + 0x7ff\n 20317: a1 = a1 + 0x6e1\n 20321: u64 [a2 + 1656] = 0\n 20325: ra = 640, jump @19\n      : @701 [@dyn 320] (gas: 2)\n 20331: a1 = i32 [0x20134]\n 20336: jump @703 if a1 >u 63\n      : @702 (gas: 3)\n 20340: u32 [0x20134] = 0x40\n 20346: a1 = 0x20140\n 20351: jump @704\n      : @703 (gas: 2)\n 20353: a1 = 0x20140\n 20358: fallthrough\n      : @704 (gas: 5)\n 20359: i32 a1 = a1 + 0\n 20361: a0 = 0x1\n 20364: a2 = 0x24\n 20367: ecalli 8 // 'seal_return'\n 20369: fallthrough\n      : @705 (gas: 9)\n 20370: u64 [a3 + 544] = 0\n 20374: u64 [a3 + 536] = 0\n 20378: u64 [a3 + 528] = 0\n 20382: a0 = 0xfb8f41b200000000\n 20392: a1 = s1 + 0x7ff\n 20396: a1 = a1 + 0x281\n 20400: u64 [a3 + 0x228] = a0\n 20404: a0 = 0\n 20406: ra = 642, jump @19\n      : @706 [@dyn 321] (gas: 6)\n 20412: a0 = u64 [s1 + 0x80]\n 20416: ra = 0x284\n 20420: ecalli 3 // 'caller'\n 20422: a2 = u64 [s1 + 0xb0]\n 20426: t0 = 0x286\n 20430: jump @882\n      : @707 [@dyn 322] (gas: 2)\n 20433: a2 = u64 [s1 + 0xb0]\n 20437: t0 = 646, jump @882\n      : @708 [@dyn 323] (gas: 8)\n 20443: u64 [a2 + 520] = 0\n 20447: u64 [a2 + 0x200] = a1\n 20451: u64 [a2 + 0x1f8] = a0\n 20455: a0 = 0x4\n 20458: a1 = s1 + 0x7ff\n 20462: a1 = a1 + 0x261\n 20466: u64 [a2 + 0x1f0] = a3\n 20470: ra = 648, jump @19\n      : @709 [@dyn 324] (gas: 15)\n 20476: a2 = s1 + 0x7ff\n 20480: a2 = a2 + 0x71\n 20483: a0 = u64 [s1 + 0x60]\n 20486: a4 = a2 + 0x100\n 20490: u64 [a4 + 0xe8] = a0\n 20494: a0 = u64 [s1 + 0x58]\n 20497: u64 [a4 + 0xe0] = a0\n 20501: a0 = u64 [s1 + 0x68]\n 20504: u64 [a4 + 0xd8] = a0\n 20508: a0 = 0x24\n 20511: a1 = s1 + 0x7ff\n 20515: a1 = a1 + 0x241\n 20519: a3 = u64 [s1 + 0x70]\n 20522: u64 [a4 + 0xd0] = a3\n 20526: ra = 650, jump @19\n      : @710 [@dyn 325] (gas: 16)\n 20532: a0 = u64 [s1 + 0xe0]\n 20536: a1 = s1 + 0x7ff\n 20540: a1 = a1 + 0x71\n 20543: a2 = a1 + 0x100\n 20547: u64 [a2 + 0xc8] = a0\n 20551: a0 = u64 [s1 + 0xd0]\n 20555: u64 [a2 + 0xc0] = a0\n 20559: a0 = u64 [s1 + 0xc0]\n 20563: u64 [a2 + 0xb8] = a0\n 20567: a3 = a1\n 20569: a0 = 0x44\n 20572: a1 = s1 + 0x7ff\n 20576: a1 = a1 + 0x221\n 20580: a2 = u64 [s1 + 0xc8]\n 20584: u64 [a3 + 0x1b0] = a2\n 20588: ra = 652, jump @19\n      : @711 [@dyn 326] (gas: 3)\n 20594: a0 = u64 [s1 + 0xb8]\n 20598: a0 = i32 [a0]\n 20600: jump @713 if a0 >u 127\n      : @712 (gas: 7)\n 20604: a1 = u64 [s1 + 0xb8]\n 20608: u32 [a1 + 0] = 0x80\n 20612: a0 = 0x1\n 20615: a2 = 0x64\n 20618: a1 = u64 [s1 + 0xd8]\n 20622: ecalli 8 // 'seal_return'\n 20624: jump @721\n      : @713 (gas: 5)\n 20627: a0 = 0x1\n 20630: a2 = 0x64\n 20633: a1 = u64 [s1 + 0xd8]\n 20637: ecalli 8 // 'seal_return'\n 20639: jump @721\n      : @714 (gas: 12)\n 20642: a0 = s1 + 0x7ff\n 20646: a0 = a0 + 0x71\n 20649: u64 [a0 + 608] = 0\n 20653: u64 [a0 + 600] = 0\n 20657: u64 [a0 + 592] = 0\n 20661: a2 = a0\n 20663: a0 = 0xe602df0500000000\n 20673: a1 = s1 + 0x7ff\n 20677: a1 = a1 + 0x2c1\n 20681: u64 [a2 + 0x268] = a0\n 20685: a0 = 0\n 20687: ra = 654, jump @19\n      : @715 [@dyn 327] (gas: 12)\n 20693: a0 = s1 + 0x7ff\n 20697: a0 = a0 + 0x71\n 20700: u64 [a0 + 584] = 0\n 20704: u64 [a0 + 576] = 0\n 20708: u64 [a0 + 568] = 0\n 20712: a2 = a0\n 20714: a0 = 0x4\n 20717: a1 = s1 + 0x7ff\n 20721: a1 = a1 + 0x2a1\n 20725: u64 [a2 + 560] = 0\n 20729: ra = 0x292\n 20733: jump @19\n      : @716 (gas: 12)\n 20736: a0 = s1 + 0x7ff\n 20740: a0 = a0 + 0x71\n 20743: u64 [a0 + 672] = 0\n 20747: u64 [a0 + 664] = 0\n 20751: u64 [a0 + 656] = 0\n 20755: a2 = a0\n 20757: a0 = 0x94280d6200000000\n 20767: a1 = s1 + 0x7ff\n 20771: a1 = a1 + 0x301\n 20775: u64 [a2 + 0x2a8] = a0\n 20779: a0 = 0\n 20781: ra = 656, jump @19\n      : @717 [@dyn 328] (gas: 11)\n 20787: a0 = s1 + 0x7ff\n 20791: a0 = a0 + 0x71\n 20794: u64 [a0 + 648] = 0\n 20798: u64 [a0 + 640] = 0\n 20802: u64 [a0 + 632] = 0\n 20806: a2 = a0\n 20808: a0 = 0x4\n 20811: a1 = s1 + 0x7ff\n 20815: a1 = a1 + 0x2e1\n 20819: u64 [a2 + 624] = 0\n 20823: ra = 658, jump @19\n      : @718 [@dyn 329] (gas: 3)\n 20829: a0 = u64 [s1 + 0xb8]\n 20833: a0 = i32 [a0]\n 20835: jump @720 if a0 >u 63\n      : @719 (gas: 7)\n 20839: a1 = u64 [s1 + 0xb8]\n 20843: u32 [a1 + 0] = 0x40\n 20846: a0 = 0x1\n 20849: a2 = 0x24\n 20852: a1 = u64 [s1 + 0xd8]\n 20856: ecalli 8 // 'seal_return'\n 20858: jump @721\n      : @720 (gas: 5)\n 20860: a0 = 0x1\n 20863: a2 = 0x24\n 20866: a1 = u64 [s1 + 0xd8]\n 20870: ecalli 8 // 'seal_return'\n 20872: fallthrough\n      : @721 (gas: 8)\n 20873: i32 a0 = a2 + 0x64\n 20876: a1 = u64 [0x20078]\n 20881: u64 [s1 + 1744] = 0\n 20885: u64 [s1 + 1736] = 0\n 20889: u64 [s1 + 0x6d8] = a1\n 20893: a1 = s1 + 0x6c0\n 20897: u64 [s1 + 1728] = 0\n 20901: ra = 660, jump @19\n      : @722 [@dyn 330] (gas: 3)\n 20907: a1 = 0x84\n 20911: a0 = u64 [s1 + 0xf8]\n 20915: ra = 662, jump @26\n      : @723 [@dyn 331] (gas: 6)\n 20921: i32 a1 = a0 + 0\n 20923: a0 = 0x1\n 20926: a2 = 0x84\n 20930: ra = 0x298\n 20934: ecalli 8 // 'seal_return'\n 20936: fallthrough\n      : @724 [@dyn 332] (gas: 17)\n 20937: sp = sp + 0xffffffffffffff30\n 20941: u64 [sp + 0xc8] = ra\n 20945: u64 [sp + 0xc0] = s0\n 20949: u64 [sp + 0xb8] = s1\n 20953: s0 = sp + 0xd0\n 20957: sp = sp & 0xfffffffffffffff0\n 20960: a2 = u64 [a1 + 0x18]\n 20963: u64 [sp + 0x10] = a2\n 20966: a2 = u64 [a1 + 0x10]\n 20969: u64 [sp + 0x8] = a2\n 20972: a2 = u64 [a1 + 0x8]\n 20975: u64 [sp] = a2\n 20977: s1 = u64 [a1]\n 20979: u64 [sp + 0x28] = a0\n 20982: a0 = sp + 0x90\n 20986: a1 = 0x40\n 20989: ra = 666, jump @17\n      : @725 [@dyn 333] (gas: 39)\n 20995: a1 = u64 [sp + 0x98]\n 20999: a2 = u64 [sp + 0x90]\n 21003: a0 = s1 + 0x1f\n 21006: ra = a0 <u s1\n 21009: a3 = u64 [sp]\n 21011: a4 = a3 + ra\n 21014: a0 = a0 & 0xffffffffffffffe0\n 21017: t1 = a1 + a4\n 21020: t0 = a2 + a0\n 21023: u64 [sp + 0x20] = a2\n 21026: a5 = t0 <u a2\n 21029: t1 = t1 + a5\n 21032: s1 = t1 ^ a1\n 21035: u64 [sp + 0x18] = a1\n 21038: a2 = t1 <u a1\n 21041: a2 = a5 if s1 == 0\n 21044: t2 = u64 [sp + 0xa8]\n 21048: a4 = a4 <u a3\n 21051: s1 = u64 [sp + 0xa0]\n 21055: a4 = ra if ra == 0\n 21058: a0 = u64 [sp + 0x8]\n 21061: a4 = a4 + a0\n 21064: a5 = a4 <u a0\n 21067: a4 = a4 + s1\n 21070: a3 = a4 + a2\n 21073: a0 = u64 [sp + 0x10]\n 21076: a0 = a0 + t2\n 21079: a0 = a0 + a5\n 21082: a5 = a3 <u a4\n 21085: a4 = a4 <u s1\n 21088: a0 = a0 + a4\n 21091: a4 = a0 + a5\n 21094: a0 = a4 >u 0\n 21096: a5 = a3 >u 0\n 21098: a5 = a0 if a4 != 0\n 21101: a0 = a3 | a4\n 21104: a1 = t1 >u 0\n 21106: a1 = a5 if a0 != 0\n 21109: jump @729 if a1 != 0\n      : @726 (gas: 8)\n 21112: a0 = a3 <u s1\n 21115: a1 = a4 ^ t2\n 21118: a5 = a4 <u t2\n 21121: a5 = a0 if a1 == 0\n 21124: a0 = a3 ^ s1\n 21127: a0 = a0 | a1\n 21130: a2 = a5 if a0 != 0\n 21133: jump @729 if a2 != 0\n      : @727 (gas: 8)\n 21136: u64 [sp + 0x70] = t0\n 21139: u64 [sp + 0x78] = t1\n 21142: u64 [sp + 0x80] = a3\n 21146: a0 = 0x40\n 21149: a1 = sp + 0x70\n 21152: u64 [sp + 0x88] = a4\n 21156: u64 [sp + 0x10] = t2\n 21159: ra = 668, jump @19\n      : @728 [@dyn 334] (gas: 14)\n 21165: a0 = u64 [sp + 0x28]\n 21168: a1 = u64 [sp + 0x10]\n 21171: u64 [a0 + 0x18] = a1\n 21174: u64 [a0 + 0x10] = s1\n 21177: a1 = u64 [sp + 0x18]\n 21180: u64 [a0 + 0x8] = a1\n 21183: a1 = u64 [sp + 0x20]\n 21186: u64 [a0] = a1\n 21188: sp = s0 + 0xffffffffffffff30\n 21192: ra = u64 [sp + 0xc8]\n 21196: s0 = u64 [sp + 0xc0]\n 21200: s1 = u64 [sp + 0xb8]\n 21204: sp = sp + 0xd0\n 21208: ret\n      : @729 (gas: 6)\n 21210: u64 [sp + 96] = 0\n 21213: u64 [sp + 88] = 0\n 21216: u64 [sp + 80] = 0\n 21219: t0 = 0x29e\n 21223: a0 = 0x4e487b7100000000\n 21233: fallthrough\n      : @730 [@dyn 335] (gas: 4)\n 21234: a1 = sp + 0x50\n 21237: u64 [sp + 0x68] = a0\n 21240: a0 = 0\n 21242: ra = 672, jump @19\n      : @731 [@dyn 336] (gas: 7)\n 21248: u64 [sp + 72] = 0\n 21251: u64 [sp + 64] = 0\n 21254: u64 [sp + 48] = 0x41\n 21258: a0 = 0x4\n 21261: a1 = sp + 0x30\n 21264: u64 [sp + 56] = 0\n 21267: ra = 674, jump @19\n      : @732 [@dyn 337] (gas: 2)\n 21273: a1 = i32 [0x20134]\n 21278: jump @734 if a1 >u 63\n      : @733 (gas: 2)\n 21282: u32 [0x20134] = 0x40\n 21288: fallthrough\n      : @734 (gas: 7)\n 21289: a1 = 0x20140\n 21294: i32 a1 = a1 + 0\n 21296: a0 = 0x1\n 21299: a2 = 0x24\n 21302: ra = 0x2a4\n 21306: ecalli 8 // 'seal_return'\n 21308: fallthrough\n      : @735 [@dyn 338] (gas: 37)\n 21309: sp = sp + 0xfffffffffffffe70\n 21313: u64 [sp + 0x188] = ra\n 21317: u64 [sp + 0x180] = s0\n 21321: u64 [sp + 0x178] = s1\n 21325: s0 = sp + 0x190\n 21329: sp = sp & 0xfffffffffffffff0\n 21332: t2 = u64 [a1]\n 21334: a4 = u64 [a2 + 0x8]\n 21337: ra = u64 [a1 + 0x8]\n 21340: s1 = u64 [a2]\n 21342: a3 = t2 + 0x1f\n 21345: t0 = a3 <u t2\n 21348: a5 = ra + t0\n 21351: u64 [sp + 0x20] = s1\n 21354: t1 = a3 <u s1\n 21357: a3 = a5 ^ a4\n 21360: u64 [sp + 0x28] = a4\n 21363: a4 = a5 <u a4\n 21366: a4 = t1 if a3 == 0\n 21369: s1 = u64 [a1 + 0x10]\n 21372: a3 = a5 <u ra\n 21375: a3 = t0 if t0 == 0\n 21378: a5 = u64 [a2 + 0x18]\n 21381: t0 = u64 [a1 + 0x18]\n 21384: t1 = u64 [a2 + 0x10]\n 21387: a3 = a3 + s1\n 21390: a1 = a3 <u s1\n 21393: a1 = a1 + t0\n 21396: a2 = a1 ^ a5\n 21399: u64 [sp + 0x10] = a5\n 21402: a1 = a1 <s a5\n 21405: a5 = a3 <u t1\n 21408: a1 = a5 if a2 == 0\n 21411: a3 = a3 ^ t1\n 21414: a2 = a2 | a3\n 21417: a4 = a1 if a2 != 0\n 21420: jump @753 if a4 == 0\n      : @736 (gas: 13)\n 21424: u64 [sp + 0x8] = a0\n 21427: u64 [sp + 0x18] = t1\n 21430: a0 = t2 | s1\n 21433: u64 [sp + 0x38] = ra\n 21436: u64 [sp + 0x30] = t0\n 21439: a1 = ra | t0\n 21442: a0 = a0 | a1\n 21445: a0 = a0 >> 0x20\n 21448: u64 [sp + 0x58] = s1\n 21451: a1 = a1 | s1\n 21454: a1 = a1 << 0x20\n 21457: a0 = a0 | a1\n 21460: jump @752 if a0 != 0\n      : @737 (gas: 4)\n 21464: a0 = sp + 0x150\n 21468: u64 [sp + 0x50] = t2\n 21471: a1 = t2\n 21473: ra = 678, jump @17\n      : @738 [@dyn 339] (gas: 12)\n 21479: a3 = u64 [sp + 0x168]\n 21483: a2 = u64 [sp + 0x160]\n 21487: a4 = u64 [sp + 0x158]\n 21491: a0 = a3 >u 0\n 21493: a1 = a2 >u 0\n 21495: a1 = a0 if a3 != 0\n 21498: u64 [sp + 0x80] = a2\n 21502: u64 [sp + 0x88] = a3\n 21506: a0 = a2 | a3\n 21509: a2 = a4 >u 0\n 21511: a2 = a1 if a0 != 0\n 21514: jump @754 if a2 != 0\n      : @739 (gas: 20)\n 21518: a1 = u64 [sp + 0x150]\n 21522: a0 = a1 + 0x1f\n 21525: u64 [sp + 0x48] = a1\n 21528: a1 = a0 <u a1\n 21531: u64 [sp + 0x78] = a4\n 21534: a1 = a1 + a4\n 21537: a1 = a1 & 0x1\n 21540: a0 = a0 & 0xffffffffffffffe0\n 21543: a2 = a0 + 0x20\n 21546: a0 = a2 <u a0\n 21549: a3 = a1 + a0\n 21552: a4 = a3 <u a1\n 21555: a4 = a0 if a0 == 0\n 21558: u64 [sp + 296] = 0\n 21562: u64 [sp + 0x110] = a2\n 21566: u64 [sp + 0x118] = a3\n 21570: a0 = sp + 0x130\n 21574: a1 = sp + 0x110\n 21578: u64 [sp + 0x120] = a4\n 21582: ra = 680, jump @724\n      : @740 [@dyn 340] (gas: 15)\n 21588: a2 = u64 [sp + 0x148]\n 21592: a3 = u64 [sp + 0x140]\n 21596: a1 = u64 [sp + 0x138]\n 21600: a0 = u64 [sp + 0x130]\n 21604: u64 [sp + 0x40] = a1\n 21607: u64 [sp + 0x68] = a2\n 21610: a2 = a2 | a1\n 21613: a1 = a0 | a3\n 21616: a1 = a1 | a2\n 21619: a1 = a1 >> 0x20\n 21622: u64 [sp + 0x70] = a3\n 21625: a2 = a2 | a3\n 21628: a2 = a2 << 0x20\n 21631: a1 = a1 | a2\n 21634: jump @752 if a1 != 0\n      : @741 (gas: 11)\n 21638: s1 = u64 [sp + 0x48]\n 21641: u64 [sp + 0xf0] = s1\n 21645: a1 = u64 [sp + 0x78]\n 21648: u64 [sp + 0xf8] = a1\n 21652: a1 = u64 [sp + 0x80]\n 21656: u64 [sp + 0x100] = a1\n 21660: a1 = sp + 0xf0\n 21664: a2 = u64 [sp + 0x88]\n 21668: u64 [sp + 0x108] = a2\n 21672: u64 [sp + 0x60] = a0\n 21675: ra = 682, jump @19\n      : @742 [@dyn 341] (gas: 45)\n 21681: a0 = u64 [sp + 0x50]\n 21684: a3 = a0 + s1\n 21687: a2 = a3 <u a0\n 21690: t2 = u64 [sp + 0x38]\n 21693: a0 = u64 [sp + 0x78]\n 21696: a0 = a0 + t2\n 21699: a0 = a0 + a2\n 21702: a4 = a0 ^ t2\n 21705: a1 = a0 <u t2\n 21708: a1 = a2 if a4 == 0\n 21711: t1 = u64 [sp + 0x58]\n 21714: a2 = u64 [sp + 0x80]\n 21718: a2 = a2 + t1\n 21721: a5 = a3 + 0x20\n 21724: t0 = a5 <u a3\n 21727: a4 = a0 + t0\n 21730: a3 = u64 [sp + 0x20]\n 21733: a5 = a3 <u a5\n 21736: a3 = u64 [sp + 0x28]\n 21739: s1 = a4 ^ a3\n 21742: a3 = a3 <u a4\n 21745: a5 = a3 if s1 != 0\n 21748: a3 = a2 <u t1\n 21751: t1 = u64 [sp + 0x30]\n 21754: s1 = u64 [sp + 0x88]\n 21758: s1 = s1 + t1\n 21761: a3 = a3 + s1\n 21764: a1 = a1 + a2\n 21767: a2 = a1 <u a2\n 21770: a2 = a2 + a3\n 21773: a0 = a4 <u a0\n 21776: a0 = t0 if t0 == 0\n 21779: a0 = a0 + a1\n 21782: a1 = a0 <u a1\n 21785: a1 = a1 + a2\n 21788: a3 = u64 [sp + 0x10]\n 21791: a2 = a1 ^ a3\n 21794: a1 = a3 <u a1\n 21797: a4 = u64 [sp + 0x18]\n 21800: a3 = a4 <u a0\n 21803: a1 = a3 if a2 == 0\n 21806: a0 = a0 ^ a4\n 21809: a0 = a0 | a2\n 21812: a5 = a1 if a0 != 0\n 21815: jump @760 if a5 != 0\n      : @743 (gas: 10)\n 21819: a0 = u64 [sp + 0x70]\n 21822: a1 = u64 [sp + 0x68]\n 21825: a1 = a1 | a0\n 21828: a0 = 0xffffffe0\n 21838: a4 = u64 [sp + 0x60]\n 21841: a2 = a4 <u a0\n 21844: a3 = u64 [sp + 0x40]\n 21847: a2 = 0 if a3 != 0\n 21849: a2 = 0 if a1 != 0\n 21851: jump @752 if a2 == 0\n      : @744 (gas: 12)\n 21855: a3 = a4\n 21857: a1 = u64 [sp + 0x58]\n 21860: a1 = a1 | t1\n 21863: a5 = u64 [sp + 0x50]\n 21866: a0 = a5 <u a0\n 21869: a0 = 0 if t2 != 0\n 21871: a0 = 0 if a1 != 0\n 21873: ra = u64 [sp + 0x88]\n 21877: a2 = u64 [sp + 0x80]\n 21881: a4 = u64 [sp + 0x78]\n 21884: s1 = u64 [sp + 0x48]\n 21887: jump @752 if a0 == 0\n      : @745 (gas: 8)\n 21891: a0 = s1 | a2\n 21894: a1 = a4 | ra\n 21897: a0 = a0 | a1\n 21900: a0 = a0 >> 0x20\n 21903: a1 = a1 | a2\n 21906: a1 = a1 << 0x20\n 21909: a0 = a0 | a1\n 21912: jump @752 if a0 != 0\n      : @746 (gas: 5)\n 21916: i32 a0 = a3 + 0x20\n 21919: i32 a1 = a5 + 0x20\n 21922: u64 [sp + 0x58] = a1\n 21925: a1 = s1\n 21927: ra = 684, jump @26\n      : @747 [@dyn 342] (gas: 4)\n 21933: u64 [sp + 0x50] = a0\n 21936: a0 = u64 [sp + 0x58]\n 21939: a1 = s1\n 21941: ra = 686, jump @26\n      : @748 [@dyn 343] (gas: 4)\n 21947: a1 = a0\n 21949: a0 = u64 [sp + 0x50]\n 21952: a2 = s1\n 21954: ra = 688, jump @0\n      : @749 [@dyn 344] (gas: 27)\n 21960: a1 = u64 [sp + 0x60]\n 21963: a0 = a1 + s1\n 21966: a1 = a0 <u a1\n 21969: s1 = u64 [sp + 0x40]\n 21972: a2 = u64 [sp + 0x78]\n 21975: a2 = a2 + s1\n 21978: a2 = a2 + a1\n 21981: a3 = a2 ^ s1\n 21984: a4 = a2 <u s1\n 21987: a4 = a1 if a3 == 0\n 21990: a5 = u64 [sp + 0x70]\n 21993: a1 = u64 [sp + 0x80]\n 21997: a1 = a1 + a5\n 22000: a4 = a4 + a1\n 22003: t0 = a4 <u a1\n 22006: a1 = a1 <u a5\n 22009: a5 = u64 [sp + 0x88]\n 22013: a3 = u64 [sp + 0x68]\n 22016: a5 = a5 + a3\n 22019: a1 = a1 + a5\n 22022: a1 = a1 + t0\n 22025: a1 = a1 | a4\n 22028: a3 = 0xffffffe0\n 22038: a3 = a0 <u a3\n 22041: a3 = 0 if a2 != 0\n 22043: a3 = 0 if a1 != 0\n 22045: jump @752 if a3 == 0\n      : @750 (gas: 7)\n 22048: i32 a0 = a0 + 0x20\n 22051: u64 [sp + 232] = 0\n 22055: u64 [sp + 224] = 0\n 22059: u64 [sp + 216] = 0\n 22063: a1 = sp + 0xd0\n 22067: u64 [sp + 208] = 0\n 22071: ra = 690, jump @19\n      : @751 [@dyn 345] (gas: 14)\n 22077: a0 = u64 [sp + 0x8]\n 22080: a1 = u64 [sp + 0x68]\n 22083: u64 [a0 + 0x18] = a1\n 22086: a1 = u64 [sp + 0x70]\n 22089: u64 [a0 + 0x10] = a1\n 22092: u64 [a0 + 0x8] = s1\n 22095: a1 = u64 [sp + 0x60]\n 22098: u64 [a0] = a1\n 22100: sp = s0 + 0xfffffffffffffe70\n 22104: ra = u64 [sp + 0x188]\n 22108: s0 = u64 [sp + 0x180]\n 22112: s1 = u64 [sp + 0x178]\n 22116: sp = sp + 0x190\n 22120: ret\n      : @752 (gas: 1)\n 22122: trap\n      : @753 (gas: 2)\n 22123: a1 = 0x20140\n 22128: jump @761\n      : @754 (gas: 6)\n 22130: u64 [sp + 192] = 0\n 22134: u64 [sp + 184] = 0\n 22138: u64 [sp + 176] = 0\n 22142: t0 = 0x2b4\n 22146: a0 = 0x4e487b7100000000\n 22156: fallthrough\n      : @755 [@dyn 346] (gas: 4)\n 22157: a1 = sp + 0xb0\n 22161: u64 [sp + 0xc8] = a0\n 22165: a0 = 0\n 22167: ra = 694, jump @19\n      : @756 [@dyn 347] (gas: 7)\n 22173: u64 [sp + 168] = 0\n 22177: u64 [sp + 160] = 0\n 22181: u64 [sp + 144] = 0x41\n 22186: a0 = 0x4\n 22189: a1 = sp + 0x90\n 22193: u64 [sp + 152] = 0\n 22197: ra = 696, jump @19\n      : @757 [@dyn 348] (gas: 2)\n 22203: a1 = i32 [0x20134]\n 22208: jump @759 if a1 >u 63\n      : @758 (gas: 2)\n 22212: u32 [0x20134] = 0x40\n 22218: fallthrough\n      : @759 (gas: 7)\n 22219: a1 = 0x20140\n 22224: i32 a1 = a1 + 0\n 22226: a0 = 0x1\n 22229: a2 = 0x24\n 22232: ecalli 8 // 'seal_return'\n 22234: a1 = 0x20140\n 22239: jump @761\n      : @760 (gas: 2)\n 22241: a1 = 0x20140\n 22246: fallthrough\n      : @761 (gas: 6)\n 22247: i32 a1 = a1 + 0\n 22249: a0 = 0x1\n 22252: a2 = 0\n 22254: ra = 0x2ba\n 22258: ecalli 8 // 'seal_return'\n 22260: fallthrough\n      : @762 [@dyn 349] (gas: 17)\n 22261: sp = sp + 0xfffffffffffffda0\n 22265: a1 = sp + 0x200\n 22269: u64 [a1 + 0x58] = ra\n 22272: u64 [a1 + 0x50] = s0\n 22275: u64 [a1 + 0x48] = s1\n 22278: s0 = sp + 0x260\n 22282: sp = sp & 0xffffffffffffffe0\n 22285: s1 = sp\n 22287: a2 = u32 [a0 + 0x10]\n 22290: a1 = u64 [a0]\n 22292: a3 = u64 [a0 + 0x8]\n 22295: u64 [s1 + 0x20] = a1\n 22298: u64 [s1 + 0x18] = a2\n 22301: a0 = a1 | a2\n 22304: u64 [s1 + 0x10] = a3\n 22307: a0 = a0 | a3\n 22310: jump @781 if a0 == 0\n      : @763 (gas: 10)\n 22314: u64 [s1 + 56] = 0x152d\n 22319: a0 = 0x2c7e14af6800000\n 22329: u64 [s1 + 0x30] = a0\n 22332: u64 [s1 + 504] = 0\n 22336: u64 [s1 + 496] = 0\n 22340: u64 [s1 + 488] = 0\n 22344: u64 [s1 + 480] = 0x2\n 22349: a0 = s1 + 0x1c0\n 22353: a1 = s1 + 0x1e0\n 22357: ra = 700, jump @21\n      : @764 [@dyn 350] (gas: 34)\n 22363: a0 = u64 [s1 + 0x1d8]\n 22367: u64 [s1 + 0x28] = a0\n 22370: t2 = u64 [s1 + 0x1d0]\n 22374: a3 = u64 [s1 + 0x1c8]\n 22378: ra = u64 [s1 + 0x1c0]\n 22382: a1 = sp + 0xffffffffffffffe0\n 22385: a1 = a1 & 0xffffffffffffffe0\n 22388: sp = a1\n 22390: t1 = u64 [s1 + 0x30]\n 22393: t1 = t1 + ra\n 22396: a0 = t1 <u ra\n 22399: a2 = u64 [s1 + 0x38]\n 22402: a2 = a2 + a3\n 22405: a2 = a2 + a0\n 22408: a4 = a2 ^ a3\n 22411: a5 = a2 <u a3\n 22414: a5 = a0 if a4 == 0\n 22417: t0 = u64 [0x200e8]\n 22422: a0 = a3 ^ 0xffffffffffffead2\n 22426: a3 = a3 >u 0xffffffffffffead2\n 22430: a4 = t0 <u ra\n 22433: a4 = a3 if a0 != 0\n 22436: u64 [a1 + 0x8] = a2\n 22439: u64 [a1] = t1\n 22441: a5 = a5 + t2\n 22444: u64 [a1 + 0x10] = a5\n 22447: a0 = a5 <u t2\n 22450: a2 = u64 [s1 + 0x28]\n 22453: a0 = a0 + a2\n 22456: a2 = t2 & a2\n 22459: a2 = a2 + 0x1\n 22462: a4 = 0 if a2 != 0\n 22464: u64 [a1 + 0x18] = a0\n 22467: jump @786 if a4 != 0\n      : @765 (gas: 6)\n 22471: u64 [s1 + 536] = 0\n 22475: u64 [s1 + 528] = 0\n 22479: u64 [s1 + 520] = 0\n 22483: u64 [s1 + 512] = 0x2\n 22488: a0 = s1 + 0x200\n 22492: ra = 702, jump @22\n      : @766 [@dyn 351] (gas: 11)\n 22498: u64 [s1 + 440] = 0\n 22502: a0 = u64 [s1 + 0x18]\n 22505: a2 = s1 + 0x100\n 22509: u64 [a2 + 0xb0] = a0\n 22513: a0 = u64 [s1 + 0x10]\n 22516: u64 [a2 + 0xa8] = a0\n 22520: a1 = s1 + 0x1a0\n 22524: a0 = u64 [s1 + 0x20]\n 22527: u64 [a2 + 0xa0] = a0\n 22531: a0 = 0\n 22533: ra = 704, jump @19\n      : @767 [@dyn 352] (gas: 7)\n 22539: u64 [s1 + 408] = 0\n 22543: u64 [s1 + 400] = 0\n 22547: u64 [s1 + 392] = 0\n 22551: a0 = 0x20\n 22554: a1 = s1 + 0x180\n 22558: u64 [s1 + 384] = 0\n 22562: ra = 706, jump @19\n      : @768 [@dyn 353] (gas: 6)\n 22568: a0 = sp + 0xffffffffffffffe0\n 22571: a0 = a0 & 0xffffffffffffffe0\n 22574: u64 [s1 + 0x28] = a0\n 22577: sp = a0\n 22579: a1 = i32 [0x20134]\n 22584: jump @770 if a1 >u 63\n      : @769 (gas: 2)\n 22588: u32 [0x20134] = 0x40\n 22594: fallthrough\n      : @770 (gas: 13)\n 22595: a0 = sp + 0xffffffffffffffe0\n 22598: a2 = a0 & 0xffffffffffffffe0\n 22601: u64 [s1 + 0x8] = a2\n 22604: sp = a2\n 22606: a0 = 0x20140\n 22611: i32 a0 = a0 + 0\n 22613: i32 a2 = a2 + 0\n 22615: a1 = 0x40\n 22618: ra = 0x2c4\n 22622: ecalli 6 // 'hash_keccak_256'\n 22624: a3 = u64 [s1 + 0x8]\n 22627: t0 = 0x2c6\n 22631: jump @885\n      : @771 [@dyn 354] (gas: 2)\n 22634: a3 = u64 [s1 + 0x8]\n 22637: t0 = 710, jump @885\n      : @772 [@dyn 355] (gas: 7)\n 22643: a1 = u64 [s1 + 0x28]\n 22646: u64 [a1 + 0x18] = a3\n 22649: u64 [a1 + 0x10] = a2\n 22652: u64 [a1 + 0x8] = a4\n 22655: u64 [a1] = a0\n 22657: a0 = s1 + 0x160\n 22661: ra = 712, jump @21\n      : @773 [@dyn 356] (gas: 24)\n 22667: a0 = u64 [s1 + 0x168]\n 22671: a1 = u64 [s1 + 0x160]\n 22675: t0 = u64 [s1 + 0x178]\n 22679: a3 = u64 [s1 + 0x170]\n 22683: a4 = u64 [s1 + 0x38]\n 22686: a4 = a4 + a0\n 22689: a5 = u64 [s1 + 0x30]\n 22692: a5 = a5 + a1\n 22695: a1 = a5 <u a1\n 22698: a4 = a4 + a1\n 22701: a2 = a4 ^ a0\n 22704: a0 = a4 <u a0\n 22707: a0 = a1 if a2 == 0\n 22710: a0 = a0 + a3\n 22713: a1 = a0 <u a3\n 22716: a1 = a1 + t0\n 22719: a2 = s1 + 0x200\n 22723: u64 [a2 + 0x20] = a5\n 22726: u64 [a2 + 0x28] = a4\n 22729: u64 [a2 + 0x30] = a0\n 22732: u64 [a2 + 0x38] = a1\n 22735: a1 = s1 + 0x220\n 22739: a0 = u64 [s1 + 0x28]\n 22742: ra = 714, jump @22\n      : @774 [@dyn 357] (gas: 3)\n 22748: a0 = s1 + 0x140\n 22752: a1 = 0x40\n 22755: ra = 716, jump @17\n      : @775 [@dyn 358] (gas: 6)\n 22761: a4 = s1 + 0x100\n 22765: a0 = u64 [a4 + 0x58]\n 22768: a1 = u64 [a4 + 0x50]\n 22771: a2 = u64 [a4 + 0x48]\n 22774: a3 = u64 [a4 + 0x40]\n 22777: t0 = 718, jump @893\n      : @776 [@dyn 359] (gas: 1)\n 22783: jump @780 if a0 != 0\n      : @777 (gas: 9)\n 22787: u64 [s1 + 312] = 0\n 22791: u64 [s1 + 304] = 0\n 22795: u64 [s1 + 296] = 0x152d\n 22801: a0 = 0x2c7e14af6800000\n 22811: a1 = s1 + 0x120\n 22815: u64 [s1 + 0x120] = a0\n 22819: a0 = a3\n 22821: u64 [s1 + 0x38] = a3\n 22824: ra = 720, jump @19\n      : @778 [@dyn 360] (gas: 26)\n 22830: u64 [s1 + 216] = 0\n 22834: a0 = u64 [s1 + 0x18]\n 22837: u64 [s1 + 0xd0] = a0\n 22841: a0 = u64 [s1 + 0x10]\n 22844: u64 [s1 + 0xc8] = a0\n 22848: a0 = u64 [s1 + 0x20]\n 22851: u64 [s1 + 0xc0] = a0\n 22855: u64 [s1 + 248] = 0\n 22859: u64 [s1 + 240] = 0\n 22863: u64 [s1 + 232] = 0\n 22867: a0 = u64 [0x200f0]\n 22872: a1 = u64 [0x200f8]\n 22877: a2 = u64 [0x20100]\n 22882: u64 [s1 + 224] = 0\n 22886: a5 = s1 + 0x100\n 22890: u64 [a5 + 0x18] = a0\n 22893: u64 [a5 + 0x10] = a1\n 22896: u64 [a5 + 0x8] = a2\n 22899: a0 = u64 [0x20108]\n 22904: a1 = 0x20\n 22907: a2 = s1 + 0x100\n 22911: a3 = s1 + 0xe0\n 22915: a4 = s1 + 0xc0\n 22919: u64 [a5] = a0\n 22921: a0 = u64 [s1 + 0x38]\n 22924: ra = 722, jump @23\n      : @779 [@dyn 361] (gas: 7)\n 22930: sp = s0 + 0xfffffffffffffda0\n 22934: a0 = sp + 0x200\n 22938: ra = u64 [a0 + 0x58]\n 22941: s0 = u64 [a0 + 0x50]\n 22944: s1 = u64 [a0 + 0x48]\n 22947: sp = sp + 0x260\n 22951: ret\n      : @780 (gas: 1)\n 22953: trap\n      : @781 (gas: 8)\n 22954: u64 [s1 + 112] = 0\n 22957: u64 [s1 + 104] = 0\n 22960: u64 [s1 + 96] = 0\n 22963: a0 = 0xec442f0500000000\n 22973: a1 = s1 + 0x60\n 22976: u64 [s1 + 0x78] = a0\n 22979: a0 = 0\n 22981: ra = 724, jump @19\n      : @782 [@dyn 362] (gas: 7)\n 22987: u64 [s1 + 88] = 0\n 22990: u64 [s1 + 80] = 0\n 22993: u64 [s1 + 72] = 0\n 22996: a0 = 0x4\n 22999: a1 = s1 + 0x40\n 23002: u64 [s1 + 64] = 0\n 23005: ra = 726, jump @19\n      : @783 [@dyn 363] (gas: 2)\n 23011: a1 = i32 [0x20134]\n 23016: jump @785 if a1 >u 63\n      : @784 (gas: 3)\n 23020: u32 [0x20134] = 0x40\n 23026: a1 = 0x20140\n 23031: jump @792\n      : @785 (gas: 2)\n 23033: a1 = 0x20140\n 23038: jump @792\n      : @786 (gas: 6)\n 23040: u64 [s1 + 176] = 0\n 23044: u64 [s1 + 168] = 0\n 23048: u64 [s1 + 160] = 0\n 23052: t0 = 0x2d8\n 23056: a0 = 0x4e487b7100000000\n 23066: fallthrough\n      : @787 [@dyn 364] (gas: 4)\n 23067: a1 = s1 + 0xa0\n 23071: u64 [s1 + 0xb8] = a0\n 23075: a0 = 0\n 23077: ra = 730, jump @19\n      : @788 [@dyn 365] (gas: 7)\n 23083: u64 [s1 + 152] = 0\n 23087: u64 [s1 + 144] = 0\n 23091: u64 [s1 + 128] = 0x11\n 23096: a0 = 0x4\n 23099: a1 = s1 + 0x80\n 23103: u64 [s1 + 136] = 0\n 23107: ra = 732, jump @19\n      : @789 [@dyn 366] (gas: 2)\n 23113: a1 = i32 [0x20134]\n 23118: jump @791 if a1 >u 63\n      : @790 (gas: 3)\n 23122: u32 [0x20134] = 0x40\n 23128: a1 = 0x20140\n 23133: jump @792\n      : @791 (gas: 2)\n 23135: a1 = 0x20140\n 23140: fallthrough\n      : @792 (gas: 6)\n 23141: i32 a1 = a1 + 0\n 23143: a0 = 0x1\n 23146: a2 = 0x24\n 23149: ra = 0x2de\n 23153: ecalli 8 // 'seal_return'\n 23155: fallthrough\n      : @793 [@dyn 367] (gas: 22)\n 23156: sp = sp + 0xfffffffffffffee0\n 23160: u64 [sp + 0x118] = ra\n 23164: u64 [sp + 0x110] = s0\n 23168: u64 [sp + 0x108] = s1\n 23172: s0 = sp + 0x120\n 23176: sp = sp & 0xfffffffffffffff0\n 23179: a4 = u64 [a1 + 0x10]\n 23182: a3 = u64 [a1 + 0x18]\n 23185: a5 = u64 [a1 + 0x8]\n 23188: t0 = u64 [a1]\n 23190: u64 [sp + 0x68] = a3\n 23193: u64 [sp + 0x78] = a5\n 23196: a1 = a5 | a3\n 23199: a3 = t0 | a4\n 23202: a3 = a3 | a1\n 23205: a3 = a3 >> 0x20\n 23208: u64 [sp + 0x70] = a4\n 23211: a1 = a1 | a4\n 23214: a1 = a1 << 0x20\n 23217: a1 = a1 | a3\n 23220: u64 [sp + 0x8] = a0\n 23223: jump @808 if a1 != 0\n      : @794 (gas: 15)\n 23227: a0 = u64 [a2 + 0x18]\n 23230: u64 [sp + 0x48] = a0\n 23233: s1 = u64 [a2 + 0x10]\n 23236: a0 = u64 [a2 + 0x8]\n 23239: u64 [sp + 0x50] = a0\n 23242: a0 = u64 [a2]\n 23244: u64 [sp + 0x58] = a0\n 23247: u64 [sp + 248] = 0\n 23251: u64 [sp + 240] = 0\n 23255: u64 [sp + 232] = 0\n 23259: a1 = sp + 0xe0\n 23263: u64 [sp + 224] = 0x20\n 23268: a0 = t0\n 23270: u64 [sp + 0x60] = t0\n 23273: ra = 736, jump @19\n      : @795 [@dyn 368] (gas: 12)\n 23279: a1 = u64 [sp + 0x58]\n 23282: a0 = a1 | s1\n 23285: a2 = u64 [sp + 0x48]\n 23288: a3 = u64 [sp + 0x50]\n 23291: a2 = a2 | a3\n 23294: a0 = a0 | a2\n 23297: a0 = a0 >> 0x20\n 23300: u64 [sp + 0x20] = s1\n 23303: a2 = a2 | s1\n 23306: a2 = a2 << 0x20\n 23309: a0 = a0 | a2\n 23312: jump @808 if a0 != 0\n      : @796 (gas: 2)\n 23316: a0 = sp + 0xc0\n 23320: ra = 738, jump @17\n      : @797 [@dyn 369] (gas: 13)\n 23326: a0 = u64 [sp + 0x70]\n 23329: a1 = u64 [sp + 0x68]\n 23332: a1 = a1 | a0\n 23335: a0 = 0x100000000\n 23345: u64 [sp + 0x10] = a0\n 23348: a0 = 0xffffffe0\n 23358: a2 = u64 [sp + 0x60]\n 23361: a0 = a2 <u a0\n 23364: a3 = u64 [sp + 0x78]\n 23367: a0 = 0 if a3 != 0\n 23369: u64 [sp + 0x18] = a1\n 23372: a0 = 0 if a1 != 0\n 23374: jump @808 if a0 == 0\n      : @798 (gas: 16)\n 23378: a3 = u64 [sp + 0xd8]\n 23382: a4 = u64 [sp + 0xd0]\n 23386: a5 = u64 [sp + 0xc8]\n 23390: a1 = u64 [sp + 0xc0]\n 23394: i32 a0 = a2 + 0x20\n 23397: u64 [sp + 0x28] = a1\n 23400: u64 [sp + 0xa0] = a1\n 23404: u64 [sp + 0x30] = a5\n 23407: u64 [sp + 0xa8] = a5\n 23411: u64 [sp + 0x38] = a4\n 23414: u64 [sp + 0xb0] = a4\n 23418: a1 = sp + 0xa0\n 23422: u64 [sp + 0x40] = a3\n 23425: u64 [sp + 0xb8] = a3\n 23429: s1 = a2\n 23431: ra = 740, jump @19\n      : @799 [@dyn 370] (gas: 8)\n 23437: a0 = u64 [sp + 0x10]\n 23440: a0 = a0 + 0xffffffffffffffc0\n 23443: a0 = s1 <u a0\n 23446: a1 = u64 [sp + 0x78]\n 23449: a0 = 0 if a1 != 0\n 23451: a1 = u64 [sp + 0x18]\n 23454: a0 = 0 if a1 != 0\n 23456: jump @808 if a0 == 0\n      : @800 (gas: 10)\n 23460: a0 = u64 [sp + 0x48]\n 23463: a1 = u64 [sp + 0x20]\n 23466: a0 = a0 | a1\n 23469: a1 = 0xffffffe0\n 23479: a3 = u64 [sp + 0x58]\n 23482: a1 = a3 <u a1\n 23485: a4 = u64 [sp + 0x50]\n 23488: a1 = 0 if a4 != 0\n 23490: a1 = 0 if a0 != 0\n 23492: jump @808 if a1 == 0\n      : @801 (gas: 13)\n 23496: a2 = s1\n 23498: a1 = u64 [sp + 0x28]\n 23501: a5 = u64 [sp + 0x38]\n 23504: a0 = a1 | a5\n 23507: a4 = u64 [sp + 0x40]\n 23510: s1 = u64 [sp + 0x30]\n 23513: a4 = a4 | s1\n 23516: a0 = a0 | a4\n 23519: a0 = a0 >> 0x20\n 23522: a4 = a4 | a5\n 23525: a4 = a4 << 0x20\n 23528: a0 = a0 | a4\n 23531: jump @808 if a0 != 0\n      : @802 (gas: 5)\n 23535: i32 a0 = a2 + 0x40\n 23538: i32 a3 = a3 + 0x20\n 23541: u64 [sp + 0x58] = a3\n 23544: s1 = a1\n 23546: ra = 742, jump @26\n      : @803 [@dyn 371] (gas: 4)\n 23552: u64 [sp + 0x50] = a0\n 23555: a0 = u64 [sp + 0x58]\n 23558: a1 = s1\n 23560: ra = 744, jump @26\n      : @804 [@dyn 372] (gas: 4)\n 23566: a1 = a0\n 23568: a0 = u64 [sp + 0x50]\n 23571: a2 = s1\n 23573: ra = 746, jump @0\n      : @805 [@dyn 373] (gas: 27)\n 23579: a0 = u64 [sp + 0x60]\n 23582: a0 = a0 + s1\n 23585: a1 = a0 <u s1\n 23588: a2 = u64 [sp + 0x78]\n 23591: a4 = u64 [sp + 0x30]\n 23594: a2 = a2 + a4\n 23597: a2 = a2 + a1\n 23600: a3 = a2 ^ a4\n 23603: a4 = a2 <u a4\n 23606: a4 = a1 if a3 == 0\n 23609: a1 = u64 [sp + 0x70]\n 23612: a3 = u64 [sp + 0x38]\n 23615: a1 = a1 + a3\n 23618: a3 = a1 <u a3\n 23621: a5 = u64 [sp + 0x68]\n 23624: s1 = u64 [sp + 0x40]\n 23627: a5 = a5 + s1\n 23630: a3 = a3 + a5\n 23633: a4 = a4 + a1\n 23636: a1 = a4 <u a1\n 23639: a1 = a1 + a3\n 23642: a1 = a1 | a4\n 23645: a3 = 0xffffffc0\n 23655: a3 = a0 <u a3\n 23658: a3 = 0 if a2 != 0\n 23660: a3 = 0 if a1 != 0\n 23662: jump @808 if a3 == 0\n      : @806 (gas: 7)\n 23666: i32 a0 = a0 + 0x40\n 23669: u64 [sp + 152] = 0\n 23673: u64 [sp + 144] = 0\n 23677: u64 [sp + 136] = 0\n 23681: a1 = sp + 0x80\n 23685: u64 [sp + 128] = 0\n 23689: ra = 748, jump @19\n      : @807 [@dyn 374] (gas: 35)\n 23695: s1 = u64 [sp + 0x28]\n 23698: s1 = s1 + 0x1f\n 23701: a0 = 0x1ffffffe0\n 23711: a0 = a0 & s1\n 23714: a1 = u64 [sp + 0x60]\n 23717: a0 = a0 + a1\n 23720: a1 = a0 <u a1\n 23723: a3 = u64 [sp + 0x78]\n 23726: a2 = a3 + a1\n 23729: a3 = a2 <u a3\n 23732: a3 = a1 if a1 == 0\n 23735: a1 = u64 [sp + 0x70]\n 23738: a3 = a3 + a1\n 23741: a1 = a3 <u a1\n 23744: a4 = u64 [sp + 0x68]\n 23747: a1 = a1 + a4\n 23750: a4 = a0 + 0x40\n 23753: a0 = a4 <u a0\n 23756: a5 = a2 + a0\n 23759: a2 = a5 <u a2\n 23762: a2 = a0 if a0 == 0\n 23765: a2 = a2 + a3\n 23768: a0 = a2 <u a3\n 23771: a0 = a0 + a1\n 23774: a1 = u64 [sp + 0x8]\n 23777: u64 [a1] = a4\n 23779: u64 [a1 + 0x8] = a5\n 23782: u64 [a1 + 0x10] = a2\n 23785: u64 [a1 + 0x18] = a0\n 23788: sp = s0 + 0xfffffffffffffee0\n 23792: ra = u64 [sp + 0x118]\n 23796: s0 = u64 [sp + 0x110]\n 23800: s1 = u64 [sp + 0x108]\n 23804: sp = sp + 0x120\n 23808: ret\n      : @808 (gas: 1)\n 23810: trap\n      : @809 [@dyn 375] (gas: 5)\n 23811: a1 = 0x4\n 23814: ra = 0x2f0\n 23818: ecalli 1 // 'call_data_load'\n 23820: t0 = 0x2f2\n 23824: jump @896\n      : @810 [@dyn 376] (gas: 1)\n 23827: t0 = 754, jump @896\n      : @811 [@dyn 377] (gas: 1)\n 23833: jump @814 if a3 == 0\n      : @812 (gas: 1)\n 23836: t0 = 756, jump @902\n      : @813 [@dyn 378] (gas: 1)\n 23842: ret\n      : @814 (gas: 8)\n 23844: a1 = 0x20140\n 23849: i32 a1 = a1 + 0\n 23851: a0 = 0x1\n 23854: a2 = 0\n 23856: ra = 0x2f6\n 23860: ecalli 8 // 'seal_return'\n 23862: t0 = 0x2f8\n 23866: jump @912\n      : @815 [@dyn 379] (gas: 1)\n 23869: t0 = 760, jump @912\n      : @816 [@dyn 380] (gas: 5)\n 23875: a1 = 0x24\n 23878: ra = 0x2fa\n 23882: ecalli 1 // 'call_data_load'\n 23884: t0 = 0x2fc\n 23888: jump @896\n      : @817 [@dyn 381] (gas: 1)\n 23891: t0 = 764, jump @896\n      : @818 [@dyn 382] (gas: 1)\n 23897: jump @821 if a3 == 0\n      : @819 (gas: 1)\n 23900: t0 = 766, jump @902\n      : @820 [@dyn 383] (gas: 1)\n 23906: ret\n      : @821 (gas: 7)\n 23908: a1 = 0x20140\n 23913: i32 a1 = a1 + 0\n 23915: a0 = 0x1\n 23918: a2 = 0\n 23920: ra = 0x300\n 23924: ecalli 8 // 'seal_return'\n 23926: fallthrough\n      : @822 [@dyn 384] (gas: 45)\n 23927: sp = sp + 0xffffffffffffff90\n 23930: u64 [sp + 0x68] = ra\n 23933: u64 [sp + 0x60] = s0\n 23936: u64 [sp + 0x58] = s1\n 23939: s0 = sp + 0x70\n 23942: sp = sp & 0xfffffffffffffff0\n 23945: a3 = u64 [a1 + 0x18]\n 23948: u64 [sp + 0x8] = a3\n 23951: a4 = u64 [a2 + 0x18]\n 23954: t2 = u64 [a1]\n 23956: u64 [sp] = t2\n 23958: a3 = u64 [a1 + 0x8]\n 23961: s1 = u64 [a2 + 0x8]\n 23964: a5 = u64 [a2]\n 23966: t1 = u64 [a1 + 0x10]\n 23969: t0 = u64 [a2 + 0x10]\n 23972: a2 = s1 + a3\n 23975: t2 = t2 + a5\n 23978: a5 = t2 <u a5\n 23981: a2 = a2 + a5\n 23984: ra = a2 ^ s1\n 23987: s1 = a2 <u s1\n 23990: s1 = a5 if ra == 0\n 23993: a1 = t0 + t1\n 23996: a5 = u64 [sp + 0x8]\n 23999: a5 = a5 + a4\n 24002: a4 = a1 <u t0\n 24005: a4 = a4 + a5\n 24008: a5 = a1 + s1\n 24011: a1 = a5 <u a1\n 24014: ra = a4 + a1\n 24017: a4 = a2 ^ a3\n 24020: a3 = a2 <u a3\n 24023: a1 = u64 [sp]\n 24025: s1 = t2 <u a1\n 24028: s1 = a3 if a4 != 0\n 24031: t0 = a5 <u t1\n 24034: a1 = u64 [sp + 0x8]\n 24037: a4 = ra ^ a1\n 24040: a3 = ra <u a1\n 24043: a3 = t0 if a4 == 0\n 24046: a1 = a5 ^ t1\n 24049: a1 = a1 | a4\n 24052: s1 = a3 if a1 != 0\n 24055: jump @824 if s1 != 0\n      : @823 (gas: 10)\n 24058: u64 [a0] = t2\n 24060: u64 [a0 + 0x8] = a2\n 24063: u64 [a0 + 0x10] = a5\n 24066: u64 [a0 + 0x18] = ra\n 24069: sp = s0 + 0xffffffffffffff90\n 24072: ra = u64 [sp + 0x68]\n 24075: s0 = u64 [sp + 0x60]\n 24078: s1 = u64 [sp + 0x58]\n 24081: sp = sp + 0x70\n 24084: ret\n      : @824 (gas: 6)\n 24086: u64 [sp + 64] = 0\n 24089: u64 [sp + 56] = 0\n 24092: u64 [sp + 48] = 0\n 24095: t0 = 0x302\n 24099: a0 = 0x4e487b7100000000\n 24109: fallthrough\n      : @825 [@dyn 385] (gas: 4)\n 24110: a1 = sp + 0x30\n 24113: u64 [sp + 0x48] = a0\n 24116: a0 = 0\n 24118: ra = 772, jump @19\n      : @826 [@dyn 386] (gas: 7)\n 24124: u64 [sp + 40] = 0\n 24127: u64 [sp + 32] = 0\n 24130: u64 [sp + 16] = 0x11\n 24134: a0 = 0x4\n 24137: a1 = sp + 0x10\n 24140: u64 [sp + 24] = 0\n 24143: ra = 774, jump @19\n      : @827 [@dyn 387] (gas: 2)\n 24149: a1 = i32 [0x20134]\n 24154: jump @829 if a1 >u 63\n      : @828 (gas: 2)\n 24158: u32 [0x20134] = 0x40\n 24164: fallthrough\n      : @829 (gas: 7)\n 24165: a1 = 0x20140\n 24170: i32 a1 = a1 + 0\n 24172: a0 = 0x1\n 24175: a2 = 0x24\n 24178: ra = 0x308\n 24182: ecalli 8 // 'seal_return'\n 24184: fallthrough\n      : @830 [@dyn 388] (gas: 14)\n 24185: sp = sp + 0xfffffffffffffc20\n 24189: a3 = sp + 0x300\n 24193: u64 [a3 + 0xd8] = ra\n 24197: u64 [a3 + 0xd0] = s0\n 24201: u64 [a3 + 0xc8] = s1\n 24205: s0 = sp + 0x3e0\n 24209: sp = sp & 0xffffffffffffffe0\n 24212: s1 = sp\n 24214: t2 = u32 [a0 + 0x10]\n 24217: a3 = u64 [a0]\n 24219: a4 = u64 [a0 + 0x8]\n 24222: a0 = a3 | t2\n 24225: a0 = a0 | a4\n 24228: jump @862 if a0 == 0\n      : @831 (gas: 13)\n 24232: t0 = u64 [a1 + 0x10]\n 24235: t1 = u64 [a1 + 0x8]\n 24238: ra = u64 [a1]\n 24240: a5 = 0xffffffff\n 24250: a1 = t1 & 0xffffffffffffffff\n 24253: a0 = ra & 0xffffffffffffffff\n 24256: a5 = t0 & a5\n 24259: u64 [s1 + 0x48] = a0\n 24262: u64 [s1 + 0x38] = a5\n 24265: a0 = a0 | a5\n 24268: u64 [s1 + 0x40] = a1\n 24271: a0 = a0 | a1\n 24274: jump @867 if a0 == 0\n      : @832 (gas: 18)\n 24278: a0 = u64 [a2 + 0x18]\n 24281: u64 [s1 + 0x98] = a0\n 24285: a0 = u64 [a2 + 0x10]\n 24288: u64 [s1 + 0x88] = a0\n 24292: a0 = u64 [a2 + 0x8]\n 24295: u64 [s1 + 0x80] = a0\n 24299: a0 = u64 [a2]\n 24301: u64 [s1 + 0x90] = a0\n 24305: u64 [s1 + 824] = 0\n 24309: u64 [s1 + 0x60] = a3\n 24312: u64 [s1 + 0x320] = a3\n 24316: u64 [s1 + 0x58] = a4\n 24319: u64 [s1 + 0x328] = a4\n 24323: a1 = s1 + 0x320\n 24327: u64 [s1 + 0x50] = t2\n 24330: u64 [s1 + 0x330] = t2\n 24334: a0 = 0\n 24336: ra = 778, jump @19\n      : @833 [@dyn 389] (gas: 7)\n 24342: u64 [s1 + 792] = 0\n 24346: u64 [s1 + 784] = 0\n 24350: u64 [s1 + 776] = 0\n 24354: a0 = 0x20\n 24357: a1 = s1 + 0x300\n 24361: u64 [s1 + 768] = 0\n 24365: ra = 780, jump @19\n      : @834 [@dyn 390] (gas: 3)\n 24371: a2 = 0x20134\n 24376: a0 = i32 [0x20134]\n 24381: jump @836 if a0 >u 63\n      : @835 (gas: 2)\n 24385: u32 [0x20134] = 0x40\n 24391: fallthrough\n      : @836 (gas: 15)\n 24392: u64 [s1 + 0x70] = a2\n 24395: a0 = sp + 0xffffffffffffffe0\n 24398: a2 = a0 & 0xffffffffffffffe0\n 24401: u64 [s1 + 0x68] = a2\n 24404: sp = a2\n 24406: a0 = 0x20140\n 24411: i32 a0 = a0 + 0\n 24413: i32 a2 = a2 + 0\n 24415: a1 = 0x40\n 24418: u64 [s1 + 0x78] = a0\n 24421: ra = 0x30e\n 24425: ecalli 6 // 'hash_keccak_256'\n 24427: a3 = u64 [s1 + 0x68]\n 24430: t0 = 0x310\n 24434: jump @897\n      : @837 [@dyn 391] (gas: 2)\n 24437: a3 = u64 [s1 + 0x68]\n 24440: t0 = 784, jump @897\n      : @838 [@dyn 392] (gas: 7)\n 24446: u64 [a4 + 0x58] = a3\n 24449: u64 [a4 + 0x50] = a2\n 24452: u64 [a4 + 0x48] = a1\n 24455: u64 [a4 + 0x40] = a0\n 24458: a0 = s1 + 0x2e0\n 24462: a1 = s1 + 0x340\n 24466: ra = 786, jump @21\n      : @839 [@dyn 393] (gas: 28)\n 24472: a1 = s1 + 0x200\n 24476: a2 = u64 [a1 + 0xf8]\n 24480: a0 = u64 [a1 + 0xf0]\n 24484: a5 = u64 [a1 + 0xe8]\n 24488: a4 = u64 [a1 + 0xe0]\n 24492: a1 = u64 [s1 + 0x98]\n 24496: t1 = a2 ^ a1\n 24499: u64 [s1 + 0x28] = a2\n 24502: a1 = a2 <u a1\n 24505: a2 = u64 [s1 + 0x88]\n 24509: a3 = a0 <u a2\n 24512: u64 [s1 + 0x10] = a3\n 24515: a1 = a3 if t1 == 0\n 24518: a3 = u64 [s1 + 0x80]\n 24522: t0 = a5 ^ a3\n 24525: u64 [s1 + 0x30] = a5\n 24528: a5 = a5 <u a3\n 24531: a3 = u64 [s1 + 0x90]\n 24535: u64 [s1 + 0x68] = a4\n 24538: a3 = a4 <u a3\n 24541: u64 [s1 + 0x18] = a3\n 24544: a5 = a3 if t0 == 0\n 24547: u64 [s1 + 0x20] = a0\n 24550: a2 = a2 ^ a0\n 24553: a0 = a2 | t1\n 24556: u64 [s1 + 0x8] = a5\n 24559: a1 = a5 if a0 == 0\n 24562: jump @873 if a1 != 0\n      : @840 (gas: 11)\n 24566: u64 [s1 + 728] = 0\n 24570: a0 = u64 [s1 + 0x60]\n 24573: a2 = s1 + 0x200\n 24577: u64 [a2 + 0xc0] = a0\n 24581: a0 = u64 [s1 + 0x58]\n 24584: u64 [a2 + 0xc8] = a0\n 24588: a1 = s1 + 0x2c0\n 24592: a0 = u64 [s1 + 0x50]\n 24595: u64 [a2 + 0xd0] = a0\n 24599: a0 = 0\n 24601: ra = 788, jump @19\n      : @841 [@dyn 394] (gas: 7)\n 24607: u64 [s1 + 696] = 0\n 24611: u64 [s1 + 688] = 0\n 24615: u64 [s1 + 680] = 0\n 24619: a0 = 0x20\n 24622: a1 = s1 + 0x2a0\n 24626: u64 [s1 + 672] = 0\n 24630: ra = 790, jump @19\n      : @842 [@dyn 395] (gas: 27)\n 24636: a0 = u64 [s1 + 0x88]\n 24640: a1 = u64 [s1 + 0x20]\n 24643: a0 = a1 - a0\n 24646: a2 = u64 [s1 + 0x8]\n 24649: a1 = a0 - a2\n 24652: u64 [s1 + 0x20] = a1\n 24655: a0 = a0 <u a2\n 24658: a1 = u64 [s1 + 0x98]\n 24662: a2 = u64 [s1 + 0x28]\n 24665: a1 = a2 - a1\n 24668: a2 = u64 [s1 + 0x10]\n 24671: a1 = a1 - a2\n 24674: a1 = a1 - a0\n 24677: u64 [s1 + 0x28] = a1\n 24680: a2 = u64 [s1 + 0x70]\n 24683: a0 = i32 [a2]\n 24685: a1 = u64 [s1 + 0x80]\n 24689: a3 = u64 [s1 + 0x30]\n 24692: a1 = a3 - a1\n 24695: a3 = u64 [s1 + 0x18]\n 24698: a1 = a1 - a3\n 24701: u64 [s1 + 0x30] = a1\n 24704: a1 = u64 [s1 + 0x90]\n 24708: a3 = u64 [s1 + 0x68]\n 24711: a3 = a3 - a1\n 24714: u64 [s1 + 0x68] = a3\n 24717: jump @844 if a0 >u 63\n      : @843 (gas: 2)\n 24721: u32 [a2 + 0] = 0x40\n 24724: fallthrough\n      : @844 (gas: 12)\n 24725: a0 = sp + 0xffffffffffffffe0\n 24728: a0 = a0 & 0xffffffffffffffe0\n 24731: u64 [s1 + 0x18] = a0\n 24734: sp = a0\n 24736: i32 a2 = a0 + 0\n 24738: a1 = 0x40\n 24741: a0 = u64 [s1 + 0x78]\n 24744: ra = 0x318\n 24748: ecalli 6 // 'hash_keccak_256'\n 24750: a3 = u64 [s1 + 0x18]\n 24753: t0 = 0x31a\n 24757: jump @897\n      : @845 [@dyn 396] (gas: 2)\n 24760: a3 = u64 [s1 + 0x18]\n 24763: t0 = 794, jump @897\n      : @846 [@dyn 397] (gas: 15)\n 24769: u64 [a4 + 0x78] = a3\n 24772: u64 [a4 + 0x70] = a2\n 24775: u64 [a4 + 0x68] = a1\n 24778: u64 [a4 + 0x60] = a0\n 24781: a0 = u64 [s1 + 0x28]\n 24784: u64 [a4 + 0x98] = a0\n 24788: a0 = u64 [s1 + 0x20]\n 24791: u64 [a4 + 0x90] = a0\n 24795: a0 = u64 [s1 + 0x30]\n 24798: u64 [a4 + 0x88] = a0\n 24802: a0 = u64 [s1 + 0x68]\n 24805: u64 [a4 + 0x80] = a0\n 24809: a0 = s1 + 0x360\n 24813: a1 = s1 + 0x380\n 24817: ra = 796, jump @22\n      : @847 [@dyn 398] (gas: 11)\n 24823: u64 [s1 + 664] = 0\n 24827: a0 = u64 [s1 + 0x38]\n 24830: a2 = s1 + 0x200\n 24834: u64 [a2 + 0x90] = a0\n 24838: a0 = u64 [s1 + 0x40]\n 24841: u64 [a2 + 0x88] = a0\n 24845: a1 = s1 + 0x280\n 24849: a0 = u64 [s1 + 0x48]\n 24852: u64 [a2 + 0x80] = a0\n 24856: a0 = 0\n 24858: ra = 798, jump @19\n      : @848 [@dyn 399] (gas: 7)\n 24864: u64 [s1 + 632] = 0\n 24868: u64 [s1 + 624] = 0\n 24872: u64 [s1 + 616] = 0\n 24876: a0 = 0x20\n 24879: a1 = s1 + 0x260\n 24883: u64 [s1 + 608] = 0\n 24887: ra = 800, jump @19\n      : @849 [@dyn 400] (gas: 7)\n 24893: a1 = u64 [s1 + 0x70]\n 24896: a0 = sp + 0xffffffffffffffe0\n 24899: a0 = a0 & 0xffffffffffffffe0\n 24902: u64 [s1 + 0x68] = a0\n 24905: sp = a0\n 24907: a0 = i32 [a1]\n 24909: jump @851 if a0 >u 63\n      : @850 (gas: 2)\n 24913: u32 [a1 + 0] = 0x40\n 24916: fallthrough\n      : @851 (gas: 12)\n 24917: a0 = sp + 0xffffffffffffffe0\n 24920: a0 = a0 & 0xffffffffffffffe0\n 24923: u64 [s1 + 0x70] = a0\n 24926: sp = a0\n 24928: i32 a2 = a0 + 0\n 24930: a1 = 0x40\n 24933: a0 = u64 [s1 + 0x78]\n 24936: ra = 0x322\n 24940: ecalli 6 // 'hash_keccak_256'\n 24942: a3 = u64 [s1 + 0x70]\n 24945: t0 = 0x324\n 24949: jump @885\n      : @852 [@dyn 401] (gas: 2)\n 24952: a3 = u64 [s1 + 0x70]\n 24955: t0 = 804, jump @885\n      : @853 [@dyn 402] (gas: 7)\n 24961: a1 = u64 [s1 + 0x68]\n 24964: u64 [a1 + 0x18] = a3\n 24967: u64 [a1 + 0x10] = a2\n 24970: u64 [a1 + 0x8] = a4\n 24973: u64 [a1] = a0\n 24975: a0 = s1 + 0x240\n 24979: ra = 806, jump @21\n      : @854 [@dyn 403] (gas: 30)\n 24985: a0 = u64 [s1 + 0x248]\n 24989: a1 = u64 [s1 + 0x240]\n 24993: t0 = u64 [s1 + 0x258]\n 24997: a3 = u64 [s1 + 0x250]\n 25001: a4 = u64 [s1 + 0x80]\n 25005: a4 = a4 + a0\n 25008: a5 = u64 [s1 + 0x90]\n 25012: a5 = a5 + a1\n 25015: a1 = a5 <u a1\n 25018: a4 = a4 + a1\n 25021: a2 = a4 ^ a0\n 25024: a0 = a4 <u a0\n 25027: a0 = a1 if a2 == 0\n 25030: a1 = u64 [s1 + 0x88]\n 25034: a1 = a1 + a3\n 25037: a2 = u64 [s1 + 0x98]\n 25041: t0 = t0 + a2\n 25044: a2 = a1 <u a3\n 25047: a2 = a2 + t0\n 25050: a0 = a0 + a1\n 25053: a1 = a0 <u a1\n 25056: a1 = a1 + a2\n 25059: a2 = s1 + 0x300\n 25063: u64 [a2 + 0xa0] = a5\n 25067: u64 [a2 + 0xa8] = a4\n 25071: u64 [a2 + 0xb0] = a0\n 25075: u64 [a2 + 0xb8] = a1\n 25079: a1 = s1 + 0x3a0\n 25083: a0 = u64 [s1 + 0x68]\n 25086: ra = 808, jump @22\n      : @855 [@dyn 404] (gas: 3)\n 25092: a0 = s1 + 0x220\n 25096: a1 = 0x40\n 25099: ra = 810, jump @17\n      : @856 [@dyn 405] (gas: 2)\n 25105: a4 = s1 + 0x200\n 25109: t0 = 812, jump @899\n      : @857 [@dyn 406] (gas: 1)\n 25115: jump @861 if a1 != 0\n      : @858 (gas: 12)\n 25119: a1 = u64 [s1 + 0x90]\n 25123: a3 = s1 + 0x200\n 25127: u64 [a3] = a1\n 25129: a1 = u64 [s1 + 0x80]\n 25133: u64 [a3 + 0x8] = a1\n 25136: a1 = u64 [s1 + 0x88]\n 25140: u64 [a3 + 0x10] = a1\n 25143: a1 = s1 + 0x200\n 25147: a2 = u64 [s1 + 0x98]\n 25151: u64 [a3 + 0x18] = a2\n 25154: u64 [s1 + 0x98] = a0\n 25158: ra = 814, jump @19\n      : @859 [@dyn 407] (gas: 29)\n 25164: u64 [s1 + 440] = 0\n 25168: a0 = u64 [s1 + 0x38]\n 25171: a5 = s1 + 0x100\n 25175: u64 [a5 + 0xb0] = a0\n 25179: a0 = u64 [s1 + 0x40]\n 25182: u64 [a5 + 0xa8] = a0\n 25186: a0 = u64 [s1 + 0x48]\n 25189: u64 [a5 + 0xa0] = a0\n 25193: u64 [s1 + 472] = 0\n 25197: a0 = u64 [s1 + 0x50]\n 25200: u64 [a5 + 0xd0] = a0\n 25204: a0 = u64 [s1 + 0x58]\n 25207: u64 [a5 + 0xc8] = a0\n 25211: a0 = u64 [0x20110]\n 25216: a1 = u64 [0x20118]\n 25221: a2 = u64 [0x20120]\n 25226: a3 = u64 [s1 + 0x60]\n 25229: u64 [a5 + 0xc0] = a3\n 25233: u64 [a5 + 0xf8] = a0\n 25237: u64 [a5 + 0xf0] = a1\n 25241: u64 [a5 + 0xe8] = a2\n 25245: a0 = u64 [0x20128]\n 25250: a1 = 0x20\n 25253: a2 = s1 + 0x1e0\n 25257: a3 = s1 + 0x1c0\n 25261: a4 = s1 + 0x1a0\n 25265: u64 [a5 + 0xe0] = a0\n 25269: a0 = u64 [s1 + 0x98]\n 25273: ra = 816, jump @23\n      : @860 [@dyn 408] (gas: 7)\n 25279: sp = s0 + 0xfffffffffffffc20\n 25283: a0 = sp + 0x300\n 25287: ra = u64 [a0 + 0xd8]\n 25291: s0 = u64 [a0 + 0xd0]\n 25295: s1 = u64 [a0 + 0xc8]\n 25299: sp = sp + 0x3e0\n 25303: ret\n      : @861 (gas: 1)\n 25305: trap\n      : @862 (gas: 8)\n 25306: u64 [s1 + 208] = 0\n 25310: u64 [s1 + 200] = 0\n 25314: u64 [s1 + 192] = 0\n 25318: a0 = 0x96c6fd1e00000000\n 25328: a1 = s1 + 0xc0\n 25332: u64 [s1 + 0xd8] = a0\n 25336: a0 = 0\n 25338: ra = 818, jump @19\n      : @863 [@dyn 409] (gas: 7)\n 25344: u64 [s1 + 184] = 0\n 25348: u64 [s1 + 176] = 0\n 25352: u64 [s1 + 168] = 0\n 25356: a0 = 0x4\n 25359: a1 = s1 + 0xa0\n 25363: u64 [s1 + 160] = 0\n 25367: ra = 820, jump @19\n      : @864 [@dyn 410] (gas: 2)\n 25373: a1 = i32 [0x20134]\n 25378: jump @866 if a1 >u 63\n      : @865 (gas: 3)\n 25382: u32 [0x20134] = 0x40\n 25388: a1 = 0x20140\n 25393: jump @872\n      : @866 (gas: 2)\n 25395: a1 = 0x20140\n 25400: jump @872\n      : @867 (gas: 8)\n 25402: u64 [s1 + 272] = 0\n 25406: u64 [s1 + 264] = 0\n 25410: u64 [s1 + 256] = 0\n 25414: a0 = 0xec442f0500000000\n 25424: a1 = s1 + 0x100\n 25428: u64 [s1 + 0x118] = a0\n 25432: a0 = 0\n 25434: ra = 822, jump @19\n      : @868 [@dyn 411] (gas: 7)\n 25440: u64 [s1 + 248] = 0\n 25444: u64 [s1 + 240] = 0\n 25448: u64 [s1 + 232] = 0\n 25452: a0 = 0x4\n 25455: a1 = s1 + 0xe0\n 25459: u64 [s1 + 224] = 0\n 25463: ra = 824, jump @19\n      : @869 [@dyn 412] (gas: 2)\n 25469: a1 = i32 [0x20134]\n 25474: jump @871 if a1 >u 63\n      : @870 (gas: 3)\n 25478: u32 [0x20134] = 0x40\n 25484: a1 = 0x20140\n 25489: jump @872\n      : @871 (gas: 2)\n 25491: a1 = 0x20140\n 25496: fallthrough\n      : @872 (gas: 5)\n 25497: i32 a1 = a1 + 0\n 25499: a0 = 0x1\n 25502: a2 = 0x24\n 25505: ecalli 8 // 'seal_return'\n 25507: fallthrough\n      : @873 (gas: 8)\n 25508: u64 [s1 + 400] = 0\n 25512: u64 [s1 + 392] = 0\n 25516: u64 [s1 + 384] = 0\n 25520: a0 = 0xe450d38c00000000\n 25530: a1 = s1 + 0x180\n 25534: u64 [s1 + 0x198] = a0\n 25538: a0 = 0\n 25540: ra = 826, jump @19\n      : @874 [@dyn 413] (gas: 10)\n 25546: u64 [s1 + 376] = 0\n 25550: a0 = u64 [s1 + 0x50]\n 25553: u64 [s1 + 0x170] = a0\n 25557: a0 = u64 [s1 + 0x58]\n 25560: u64 [s1 + 0x168] = a0\n 25564: a0 = 0x4\n 25567: a1 = s1 + 0x160\n 25571: a2 = u64 [s1 + 0x60]\n 25574: u64 [s1 + 0x160] = a2\n 25578: ra = 828, jump @19\n      : @875 [@dyn 414] (gas: 11)\n 25584: a0 = u64 [s1 + 0x28]\n 25587: u64 [s1 + 0x158] = a0\n 25591: a0 = u64 [s1 + 0x20]\n 25594: u64 [s1 + 0x150] = a0\n 25598: a0 = u64 [s1 + 0x30]\n 25601: u64 [s1 + 0x148] = a0\n 25605: a0 = 0x24\n 25608: a1 = s1 + 0x140\n 25612: a2 = u64 [s1 + 0x68]\n 25615: u64 [s1 + 0x140] = a2\n 25619: ra = 830, jump @19\n      : @876 [@dyn 415] (gas: 12)\n 25625: a0 = u64 [s1 + 0x98]\n 25629: a3 = s1 + 0x100\n 25633: u64 [a3 + 0x38] = a0\n 25636: a0 = u64 [s1 + 0x88]\n 25640: u64 [a3 + 0x30] = a0\n 25643: a0 = u64 [s1 + 0x80]\n 25647: u64 [a3 + 0x28] = a0\n 25650: a0 = 0x44\n 25653: a1 = s1 + 0x120\n 25657: a2 = u64 [s1 + 0x90]\n 25661: u64 [a3 + 0x20] = a2\n 25664: ra = 832, jump @19\n      : @877 [@dyn 416] (gas: 3)\n 25670: a0 = u64 [s1 + 0x70]\n 25673: a0 = i32 [a0]\n 25675: jump @879 if a0 >u 127\n      : @878 (gas: 3)\n 25679: a1 = u64 [s1 + 0x70]\n 25682: u32 [a1 + 0] = 0x80\n 25686: fallthrough\n      : @879 (gas: 7)\n 25687: a0 = 0x1\n 25690: a2 = 0x64\n 25693: a1 = u64 [s1 + 0x78]\n 25696: ecalli 8 // 'seal_return'\n 25698: a0 = 0\n 25700: ra = 0x342\n 25704: jump @32\n      : @880 [export #0: 'call'] (gas: 2)\n 25707: a0 = 0\n 25709: ra = 834, jump @32\n      : @881 [@dyn 417] [export #1: 'deploy'] (gas: 2)\n 25715: a0 = 0x1\n 25718: ra = 836, jump @32\n      : @882 [@dyn 418] (gas: 16)\n 25724: a0 = u64 [a2 + 0x8]\n 25727: a1 = i32 [a2 + 0x10]\n 25730: a2 = u64 [a2]\n 25732: a0 = reverse a0\n 25734: a3 = a0 << 0x20\n 25737: a1 = reverse a1\n 25739: a1 = a1 >> 0x20\n 25742: a3 = a3 | a1\n 25745: a0 = a0 >> 0x20\n 25748: a1 = reverse a2\n 25750: a2 = a1 << 0x20\n 25753: a0 = a0 | a2\n 25756: a1 = a1 >> 0x20\n 25759: a2 = s1 + 0x7ff\n 25763: a2 = a2 + 0x71\n 25766: jump [t0]\n      : @883 (gas: 15)\n 25768: a2 = u64 [s1 + 0xf8]\n 25772: a0 = u64 [a2 + 0x8]\n 25775: a1 = i32 [a2 + 0x10]\n 25778: a2 = u64 [a2]\n 25780: a0 = reverse a0\n 25782: a3 = a0 << 0x20\n 25785: a1 = reverse a1\n 25787: a1 = a1 >> 0x20\n 25790: a3 = a3 | a1\n 25793: a0 = a0 >> 0x20\n 25796: a1 = reverse a2\n 25798: a2 = a1 << 0x20\n 25801: a0 = a0 | a2\n 25804: a1 = a1 >> 0x20\n 25807: jump [t0]\n      : @884 (gas: 22)\n 25809: a4 = u64 [s1 + 0x118]\n 25813: a2 = a4 <u 0x80\n 25817: a3 = u64 [s1 + 0xd0]\n 25821: a1 = a3 if a2 != 0\n 25824: a5 = u64 [s1 + 0xd8]\n 25828: a3 = u64 [s1 + 0xe8]\n 25832: a3 = a3 | a5\n 25835: a3 = a0 if a2 == 0\n 25838: a1 = 0xffffffffffffffff if a4 == 0\n 25841: a3 = 0xffffffffffffffff if a4 == 0\n 25844: a4 = u64 [s1 + 0xe0]\n 25848: a4 = 0 if a2 == 0\n 25850: a5 = 0 if a2 == 0\n 25852: a0 = u64 [s1 + 0xf8]\n 25856: a0 = a0 & ~a3\n 25859: a2 = u64 [s1 + 0x100]\n 25863: a1 = a2 & ~a1\n 25866: a2 = u64 [s1 + 0x108]\n 25870: a2 = a2 & ~a5\n 25873: a3 = u64 [s1 + 0x110]\n 25877: a3 = a3 & ~a4\n 25880: jump [t0]\n      : @885 (gas: 9)\n 25882: a0 = u64 [a3 + 0x18]\n 25885: a1 = u64 [a3 + 0x10]\n 25888: a2 = u64 [a3 + 0x8]\n 25891: a3 = u64 [a3]\n 25893: a0 = reverse a0\n 25895: a4 = reverse a1\n 25897: a2 = reverse a2\n 25899: a3 = reverse a3\n 25901: jump [t0]\n      : @886 (gas: 12)\n 25903: a3 = u64 [s1 + 0xd8]\n 25907: a0 = u64 [a3 + 0x18]\n 25910: a1 = u64 [a3 + 0x10]\n 25913: a2 = u64 [a3 + 0x8]\n 25916: a3 = u64 [a3]\n 25918: a0 = reverse a0\n 25920: a1 = reverse a1\n 25922: a2 = reverse a2\n 25924: a3 = reverse a3\n 25926: a4 = s1 + 0x1078\n 25930: a5 = a4 + 0x400\n 25934: jump [t0]\n      : @887 (gas: 12)\n 25936: a3 = u64 [s1 + 0xf8]\n 25940: a0 = u64 [a3 + 0x18]\n 25943: a1 = u64 [a3 + 0x10]\n 25946: a2 = u64 [a3 + 0x8]\n 25949: a3 = u64 [a3]\n 25951: a0 = reverse a0\n 25953: a1 = reverse a1\n 25955: a2 = reverse a2\n 25957: a3 = reverse a3\n 25959: a4 = s1 + 0x1078\n 25963: a5 = a4 + 0x700\n 25967: jump [t0]\n      : @888 (gas: 13)\n 25969: a4 = a0 << 0x3f\n 25972: a5 = a1 >> 0x1\n 25975: t1 = a5 | a4\n 25978: a5 = a3 << 0x3f\n 25981: a0 = a0 >> 0x1\n 25984: a0 = a0 | a5\n 25987: a1 = a1 << 0x3f\n 25990: a5 = a2 >> 0x1\n 25993: a1 = a1 | a5\n 25996: a3 = a3 >> 0x1\n 25999: a2 = a2 & 0x1\n 26002: a5 = -a2\n 26004: jump [t0]\n      : @889 (gas: 10)\n 26006: a4 = 0 if a2 == 0\n 26008: a1 = u64 [s1 + 0xf8]\n 26012: a1 = a1 & ~a3\n 26015: a2 = u64 [s1 + 0x100]\n 26019: a0 = a2 & ~a0\n 26022: a2 = u64 [s1 + 0x108]\n 26026: a2 = a2 & ~a4\n 26029: a3 = u64 [s1 + 0x110]\n 26033: a3 = a3 & ~a5\n 26036: jump [t0]\n      : @890 (gas: 11)\n 26038: a3 = u64 [s1 + 0xf8]\n 26042: a0 = u64 [a3 + 0x18]\n 26045: a1 = u64 [a3 + 0x10]\n 26048: a2 = u64 [a3 + 0x8]\n 26051: a3 = u64 [a3]\n 26053: a0 = reverse a0\n 26055: a1 = reverse a1\n 26057: a2 = reverse a2\n 26059: a3 = reverse a3\n 26061: a4 = s1 + 0x1878\n 26065: jump [t0]\n      : @891 (gas: 8)\n 26067: a4 = a4 | a2\n 26070: a2 = a0 | a1\n 26073: a2 = a2 | a4\n 26076: a2 = a2 >> 0x20\n 26079: a1 = a1 | a4\n 26082: a1 = a1 << 0x20\n 26085: a1 = a1 | a2\n 26088: jump [t0]\n      : @892 (gas: 11)\n 26090: a1 = u64 [s1 + 0xf8]\n 26094: a0 = u64 [s1 + 0xe8]\n 26098: a3 = u64 [s1 + 0xe0]\n 26102: a3 = a3 | a0\n 26105: a4 = 0x100000000\n 26115: a0 = 0xfffffffc\n 26125: a0 = a1 <u a0\n 26128: a2 = u64 [s1 + 0xf0]\n 26132: a0 = 0 if a2 != 0\n 26134: a0 = 0 if a3 != 0\n 26136: jump [t0]\n      : @893 (gas: 8)\n 26138: a0 = a0 | a2\n 26141: a2 = a3 | a1\n 26144: a2 = a2 | a0\n 26147: a2 = a2 >> 0x20\n 26150: a0 = a0 | a1\n 26153: a0 = a0 << 0x20\n 26156: a0 = a0 | a2\n 26159: jump [t0]\n      : @894 (gas: 8)\n 26161: a0 = a0 | a2\n 26164: a2 = a4 | a1\n 26167: a2 = a2 | a0\n 26170: a2 = a2 >> 0x20\n 26173: a0 = a0 | a1\n 26176: a0 = a0 << 0x20\n 26179: a0 = a0 | a2\n 26182: jump [t0]\n      : @895 (gas: 8)\n 26184: a2 = a4 >u 0\n 26186: a1 = a1 ^ 0x1\n 26189: a1 = a2 if a4 != 0\n 26192: a2 = t2 >u 0\n 26194: a3 = a5 >u 0\n 26196: a3 = a2 if a5 == 0\n 26199: a3 = a1 if a0 == 0\n 26202: jump [t0]\n      : @896 (gas: 10)\n 26204: a0 = u64 [sp + 0x10]\n 26207: a1 = u64 [sp + 0x18]\n 26210: a2 = 0x100000000\n 26220: a2 = a2 ^ a0\n 26223: a2 = a2 | a1\n 26226: a3 = a0 >> 0x20\n 26229: a3 = a3 <u 0x1\n 26232: a3 = 0 if a1 != 0\n 26234: a3 = 0 if a2 == 0\n 26236: jump [t0]\n      : @897 (gas: 10)\n 26238: a0 = u64 [a3 + 0x18]\n 26241: a1 = u64 [a3 + 0x10]\n 26244: a2 = u64 [a3 + 0x8]\n 26247: a3 = u64 [a3]\n 26249: a0 = reverse a0\n 26251: a1 = reverse a1\n 26253: a2 = reverse a2\n 26255: a3 = reverse a3\n 26257: a4 = s1 + 0x300\n 26261: jump [t0]\n      : @898 (gas: 4)\n 26263: a0 = 0x1078\n 26267: a3 = s1 + a0\n 26270: a4 = a3 + 0x700\n 26274: jump [t0]\n      : @899 (gas: 12)\n 26276: a3 = u64 [a4 + 0x38]\n 26279: a1 = u64 [a4 + 0x30]\n 26282: a2 = u64 [a4 + 0x28]\n 26285: a0 = u64 [a4 + 0x20]\n 26288: a3 = a3 | a2\n 26291: a2 = a0 | a1\n 26294: a2 = a2 | a3\n 26297: a2 = a2 >> 0x20\n 26300: a1 = a1 | a3\n 26303: a1 = a1 << 0x20\n 26306: a1 = a1 | a2\n 26309: jump [t0]\n      : @900 (gas: 8)\n 26311: a2 = a1 | a5\n 26314: a0 = a0 | a3\n 26317: a2 = a2 | a0\n 26320: a2 = a2 >> 0x20\n 26323: a0 = a0 | a5\n 26326: a0 = a0 << 0x20\n 26329: a0 = a0 | a2\n 26332: jump [t0]\n      : @901 (gas: 10)\n 26334: u64 [s1 + 264] = 0\n 26338: a4 = 0\n 26340: ra = 0\n 26342: u64 [s1 + 248] = 0\n 26346: u64 [s1 + 256] = 0\n 26350: a3 = u64 [s1 + 0xe8]\n 26354: a0 = u64 [a3 + 0x18]\n 26357: a1 = u64 [a3 + 0x10]\n 26360: a2 = u64 [a3 + 0x8]\n 26363: jump [t0]\n      : @902 (gas: 12)\n 26365: a2 = u64 [sp]\n 26367: a3 = u64 [sp + 0x8]\n 26370: u64 [s1] = a2\n 26372: u64 [s1 + 0x8] = a3\n 26375: u64 [s1 + 0x10] = a0\n 26378: u64 [s1 + 0x18] = a1\n 26381: sp = s0 + 0xffffffffffffffc0\n 26384: ra = u64 [sp + 0x38]\n 26387: s0 = u64 [sp + 0x30]\n 26390: s1 = u64 [sp + 0x28]\n 26393: sp = sp + 0x40\n 26396: jump [t0]\n      : @903 (gas: 7)\n 26398: a0 = a0 << 0x3b\n 26401: a1 = a0 >> 0x38\n 26404: u64 [s1 + 0x118] = a1\n 26408: a2 = 0x80 - a1\n 26412: a0 = 0xffffffffffffffff\n 26415: a1 = 0xffffffffffffffff\n 26418: jump [t0]\n      : @904 (gas: 10)\n 26420: u64 [s1 + 0xd8] = a0\n 26424: u64 [s1 + 0xe0] = a1\n 26428: a0 = u64 [s1 + 0xd0]\n 26432: a0 = a0 | a1\n 26435: u64 [s1 + 0xd0] = a0\n 26439: a0 = u64 [s1 + 0x118]\n 26443: a2 = a0 + 0xffffffffffffff80\n 26446: a0 = 0xffffffffffffffff\n 26449: a1 = 0xffffffffffffffff\n 26452: jump [t0]\n      : @905 (gas: 9)\n 26454: a0 = u64 [a2 + 0x8]\n 26457: a1 = i32 [a2 + 0x10]\n 26460: a2 = u64 [a2]\n 26462: a0 = reverse a0\n 26464: a3 = a0 << 0x20\n 26467: a1 = reverse a1\n 26469: a1 = a1 >> 0x20\n 26472: a1 = a1 | a3\n 26475: jump [t0]\n      : @906 (gas: 4)\n 26477: a0 = 0x1078\n 26481: a3 = s1 + a0\n 26484: a4 = a3 + 0x400\n 26488: jump [t0]\n      : @907 (gas: 8)\n 26490: a0 = sp + 0xffffffffffffffe0\n 26493: a0 = a0 & 0xffffffffffffffe0\n 26496: u64 [s1 + 0xf8] = a0\n 26500: sp = a0\n 26502: i32 a2 = a0 + 0\n 26504: a1 = 0x40\n 26507: a0 = u64 [s1 + 0xd0]\n 26511: jump [t0]\n      : @908 (gas: 8)\n 26513: a0 = a0 + a4\n 26516: a3 = a3 + a1\n 26519: a5 = a3 <u a1\n 26522: a0 = a0 + a5\n 26525: ra = u64 [s1 + 0xe0]\n 26529: ra = ra + a3\n 26532: a3 = ra <u a3\n 26535: jump [t0]\n      : @909 (gas: 6)\n 26537: a1 = a3 << 0x3\n 26540: u64 [s1 + 0x118] = a1\n 26544: i32 a2 = 0x80 - a1\n 26548: a0 = 0xffffffffffffffff\n 26551: a1 = 0xffffffffffffffff\n 26554: jump [t0]\n      : @910 (gas: 8)\n 26556: a0 = u64 [a4 + 0x98]\n 26560: a1 = u64 [a4 + 0xa0]\n 26564: a2 = u64 [a4 + 0x90]\n 26568: a3 = u64 [a4 + 0x88]\n 26572: a1 = a1 | a2\n 26575: a0 = a0 | a3\n 26578: a0 = a0 | a1\n 26581: jump [t0]\n      : @911 (gas: 7)\n 26583: a3 = a3 | a5\n 26586: a3 = a1 if a2 == 0\n 26589: a1 = 0xffffffffffffffff\n 26592: a0 = a1 if a4 == 0\n 26595: a3 = a1 if a4 == 0\n 26598: a5 = 0 if a2 == 0\n 26600: jump [t0]\n      : @912 (gas: 9)\n 26602: sp = sp + 0xffffffffffffffc0\n 26605: u64 [sp + 0x38] = ra\n 26608: u64 [sp + 0x30] = s0\n 26611: u64 [sp + 0x28] = s1\n 26614: s0 = sp + 0x40\n 26617: sp = sp & 0xffffffffffffffe0\n 26620: s1 = a0\n 26622: i32 a0 = sp + 0\n 26624: jump [t0]\n      : @913 (gas: 8)\n 26626: a0 = u64 [a2 + 0x8]\n 26629: a1 = i32 [a2 + 0x10]\n 26632: a2 = u64 [a2]\n 26634: a3 = reverse a0\n 26636: a0 = a3 << 0x20\n 26639: a1 = reverse a1\n 26641: a1 = a1 >> 0x20\n 26644: jump [t0]\n      : @914 (gas: 6)\n 26646: a0 = u64 [a3 + 0x18]\n 26649: a1 = u64 [a3 + 0x10]\n 26652: a2 = u64 [a3 + 0x8]\n 26655: a3 = u64 [a3]\n 26657: a0 = reverse a0\n 26659: jump [t0]\n      : @915 (gas: 8)\n 26661: a1 = sp + 0xffffffffffffffe0\n 26664: a1 = a1 & 0xffffffffffffffe0\n 26667: u64 [s1 + 0xe8] = a1\n 26671: sp = a1\n 26673: i32 a0 = a0 + 0\n 26675: i32 a2 = a1 + 0\n 26677: a1 = 0x20\n 26680: jump [t0]\n      : @916 (gas: 2)\n 26682: a3 = a2 & 0x40\n 26685: jump @920 if a3 != 0\n      : @917 (gas: 1)\n 26688: jump @919 if a2 == 0\n      : @918 (gas: 6)\n 26691: i32 a3 = 0x40 - a2\n 26694: a3 = a1 << a3\n 26697: a1 = a1 >> a2\n 26700: a0 = a0 >> a2\n 26703: a0 = a0 | a3\n 26706: ret\n      : @919 (gas: 1)\n 26708: ret\n      : @920 (gas: 4)\n 26710: a0 = a2 + 0xffffffffffffffc0\n 26713: a0 = a1 >> a0\n 26716: a1 = 0\n 26718: ret\n      : @921 (gas: 2)\n 26720: a3 = a2 & 0x40\n 26723: jump @925 if a3 != 0\n      : @922 (gas: 1)\n 26726: jump @924 if a2 == 0\n      : @923 (gas: 6)\n 26729: i32 a3 = 0x40 - a2\n 26732: a3 = a0 >> a3\n 26735: a0 = a0 << a2\n 26738: a1 = a1 << a2\n 26741: a1 = a1 | a3\n 26744: ret\n      : @924 (gas: 1)\n 26746: ret\n      : @925 (gas: 4)\n 26748: a1 = a2 + 0xffffffffffffffc0\n 26751: a1 = a0 << a1\n 26754: a0 = 0\n 26756: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "canMint(address)": "c2ba4744",
              "decimals()": "313ce567",
              "lastMintTime(address)": "6aa71d18",
              "mintToken()": "2004ffd9",
              "name()": "06fdde03",
              "owner()": "8da5cb5b",
              "setInterval(uint256)": "22a90082",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": "/// @use-src 0:\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\", 1:\"@openzeppelin/contracts/token/ERC20/ERC20.sol\", 2:\"@openzeppelin/contracts/token/ERC20/IERC20.sol\", 3:\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 4:\"@openzeppelin/contracts/utils/Context.sol\", 5:\"contracts/MintableERC20.sol\"\nobject \"MintableERC20_929\" {\n    code {\n        {\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MintableERC20_929\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            if slt(sub(_1, memoryDataOffset), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let offset := mload(memoryDataOffset)\n            if gt(offset, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let value0 := abi_decode_string_fromMemory(add(memoryDataOffset, offset), _1)\n            let offset_1 := mload(add(memoryDataOffset, 32))\n            if gt(offset_1, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let value1 := abi_decode_string_fromMemory(add(memoryDataOffset, offset_1), _1)\n            let newLen := mload(value0)\n            if gt(newLen, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let _2 := sload(/** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            length := shr(1, _2)\n            let outOfPlaceEncoding := and(_2, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            if gt(length, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 32)\n                let deleteStart := add(data, shr(5, add(newLen, 31)))\n                if lt(newLen, 32) { deleteStart := data }\n                let _3 := add(data, shr(5, add(length, 31)))\n                let start := deleteStart\n                for { } lt(start, _3) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            srcOffset := 32\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ srcOffset)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                for { } lt(i, loopEnd) { i := add(i, 32) }\n                {\n                    sstore(dstPtr, mload(add(value0, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, 32)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(value0, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ newLen), 248), not(0)))))\n                }\n                sstore(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                if newLen\n                {\n                    value := mload(add(value0, srcOffset))\n                }\n                sstore(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ or(and(value, not(shr(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ newLen), not(0)))), shl(1, newLen)))\n            }\n            let newLen_1 := mload(value1)\n            if gt(newLen_1, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let _4 := sload(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            length_1 := shr(1, _4)\n            let outOfPlaceEncoding_1 := and(_4, 1)\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            if gt(length_1, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 32)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, 31)))\n                if lt(newLen_1, 32) { deleteStart_1 := data_1 }\n                let _5 := add(data_1, shr(5, add(length_1, 31)))\n                let start_1 := deleteStart_1\n                for { } lt(start_1, _5) { start_1 := add(start_1, 1) }\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            srcOffset_1 := 32\n            switch gt(newLen_1, 31)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04)\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ srcOffset_1)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 32) }\n                {\n                    sstore(dstPtr_1, mload(add(value1, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, 1)\n                    srcOffset_1 := add(srcOffset_1, 32)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(value1, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ newLen_1), 248), not(0)))))\n                }\n                sstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ add(shl(1, newLen_1), 1))\n            }\n            default {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                if newLen_1\n                {\n                    value_1 := mload(add(value1, srcOffset_1))\n                }\n                sstore(/** @src 1:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ or(and(value_1, not(shr(shl(/** @src 1:1648:1661  \"_name = name_\" */ 0x03, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ newLen_1), not(0)))), shl(1, newLen_1)))\n            }\n            sstore(/** @src 5:298:340  \"0x12Cb274aAD8251C875c0bf6872b67d9983E53fDd\" */ 0x08, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ or(and(sload(/** @src 5:298:340  \"0x12Cb274aAD8251C875c0bf6872b67d9983E53fDd\" */ 0x08), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ not(sub(shl(160, 1), 1))), /** @src 5:298:340  \"0x12Cb274aAD8251C875c0bf6872b67d9983E53fDd\" */ 0x12cb274aad8251c875c0bf6872b67d9983e53fdd))\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            sstore(/** @src 5:371:413  \"0x3B939FeaD1557C741Ff06492FD0127bd287A421e\" */ 0x09, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ or(and(sload(/** @src 5:371:413  \"0x3B939FeaD1557C741Ff06492FD0127bd287A421e\" */ 0x09), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ not(sub(shl(160, 1), 1))), /** @src 5:371:413  \"0x3B939FeaD1557C741Ff06492FD0127bd287A421e\" */ 0x3b939fead1557c741ff06492fd0127bd287a421e))\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            sstore(/** @src 5:444:486  \"0xDAC66EDAB6e4fB1f6388d082f4689c2Ed1924554\" */ 0x0a, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ or(and(sload(/** @src 5:444:486  \"0xDAC66EDAB6e4fB1f6388d082f4689c2Ed1924554\" */ 0x0a), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ not(sub(shl(160, 1), 1))), /** @src 5:444:486  \"0xDAC66EDAB6e4fB1f6388d082f4689c2Ed1924554\" */ 0xdac66edab6e4fb1f6388d082f4689c2ed1924554))\n            /// @src 5:603:642  \"_mint(whale1, 100000000000000000000000)\"\n            fun_mint(/** @src 5:298:340  \"0x12Cb274aAD8251C875c0bf6872b67d9983E53fDd\" */ 0x12cb274aad8251c875c0bf6872b67d9983e53fdd)\n            /// @src 5:652:691  \"_mint(whale2, 100000000000000000000000)\"\n            fun_mint(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ and(sload(/** @src 5:371:413  \"0x3B939FeaD1557C741Ff06492FD0127bd287A421e\" */ 0x09), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n            /// @src 5:701:740  \"_mint(whale3, 100000000000000000000000)\"\n            fun_mint(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ and(sload(/** @src 5:444:486  \"0xDAC66EDAB6e4fB1f6388d082f4689c2Ed1924554\" */ 0x0a), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n            sstore(/** @src 5:751:769  \"owner = msg.sender\" */ 0x07, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ or(and(sload(/** @src 5:751:769  \"owner = msg.sender\" */ 0x07), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ not(sub(shl(160, 1), 1))), /** @src 5:759:769  \"msg.sender\" */ caller()))\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            sstore(/** @src 5:779:794  \"interval = 3600\" */ 0x06, /** @src 5:790:794  \"3600\" */ 0x0e10)\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let _6 := mload(64)\n            let _7 := datasize(\"MintableERC20_929_deployed\")\n            codecopy(_6, dataoffset(\"MintableERC20_929_deployed\"), _7)\n            return(_6, _7)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function abi_decode_string_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n            let length := mload(offset)\n            if gt(length, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            let array_1 := allocate_memory(add(and(add(length, 0x1f), not(31)), 0x20))\n            mstore(array_1, length)\n            if gt(add(add(offset, length), 0x20), end)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            mcopy(add(array_1, 0x20), add(offset, 0x20), length)\n            mstore(add(add(array_1, length), 0x20), /** @src -1:-1:-1 */ 0)\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            array := array_1\n        }\n        /// @ast-id 491 @src 1:7439:7647  \"function _mint(address account, uint256 value) internal {...\"\n        function fun_mint(var_account)\n        {\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let _1 := and(/** @src 1:7509:7530  \"account == address(0)\" */ var_account, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n            /// @src 1:7509:7530  \"account == address(0)\"\n            let _2 := iszero(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _1)\n            /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n            if /** @src 1:7509:7530  \"account == address(0)\" */ _2\n            /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n            {\n                /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                mstore(/** @src 1:7528:7529  \"0\" */ 0x00, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ 4, /** @src 1:7528:7529  \"0\" */ 0x00)\n                /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                revert(/** @src 1:7528:7529  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 36)\n            }\n            let _3 := sload(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02)\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let sum := add(_3, /** @src 5:617:641  \"100000000000000000000000\" */ 0x152d02c7e14af6800000)\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            if gt(_3, sum)\n            {\n                mstore(/** @src 1:7528:7529  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(/** @src 1:7528:7529  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x24)\n            }\n            sstore(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sum)\n            /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n            _2 := /** @src 1:7528:7529  \"0\" */ 0x00\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            mstore(/** @src 1:7528:7529  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _1)\n            mstore(0x20, /** @src 1:7528:7529  \"0\" */ 0x00)\n            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n            let dataSlot := keccak256(/** @src 1:7528:7529  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n            sstore(dataSlot, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot), /** @src 5:617:641  \"100000000000000000000000\" */ 0x152d02c7e14af6800000))\n            /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n            let _4 := /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ mload(0x40)\n            mstore(_4, /** @src 5:617:641  \"100000000000000000000000\" */ 0x152d02c7e14af6800000)\n            /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n            log3(_4, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x20, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 1:7528:7529  \"0\" */ 0x00, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ _1)\n        }\n    }\n    /// @use-src 1:\"@openzeppelin/contracts/token/ERC20/ERC20.sol\", 4:\"@openzeppelin/contracts/utils/Context.sol\", 5:\"contracts/MintableERC20.sol\"\n    object \"MintableERC20_929_deployed\" {\n        code {\n            {\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret := 0\n                        let slotValue := sload(/** @src 1:1837:1842  \"_name\" */ 0x03)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        let length := 0\n                        length := shr(1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, 32), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 1:1837:1842  \"_name\" */ 0x03)\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 32) }\n                            {\n                                mstore(add(add(_1, i), 32), sload(dataPos))\n                                dataPos := add(dataPos, 1)\n                            }\n                            ret := add(add(_1, i), 32)\n                        }\n                        let newFreePtr := add(_1, and(add(sub(ret, _1), 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        return(newFreePtr, sub(abi_encode_string(newFreePtr, _1), newFreePtr))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value := calldataload(36)\n                        /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                        if /** @src 1:9794:9813  \"owner == address(0)\" */ iszero(/** @src 4:735:745  \"msg.sender\" */ caller())\n                        /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                            mstore(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                            revert(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        let _2 := and(/** @src 1:9892:9913  \"spender == address(0)\" */ value0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                        if /** @src 1:9892:9913  \"spender == address(0)\" */ iszero(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _2)\n                        /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                        {\n                            /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                            mstore(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                            revert(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        mstore(0, /** @src 4:735:745  \"msg.sender\" */ caller())\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(32, 1)\n                        let dataSlot := keccak256(0, 64)\n                        /// @src 1:9987:10014  \"_allowances[owner][spender]\"\n                        let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _2)\n                        mstore(0x20, /** @src 1:9987:10005  \"_allowances[owner]\" */ dataSlot)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        sstore(/** @src 1:9987:10014  \"_allowances[owner][spender]\" */ dataSlot_1, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ value)\n                        /// @src 1:10066:10097  \"Approval(owner, spender, value)\"\n                        let _3 := /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                        mstore(_3, value)\n                        /// @src 1:10066:10097  \"Approval(owner, spender, value)\"\n                        log3(_3, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:10066:10097  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 1:10066:10097  \"Approval(owner, spender, value)\" */ _2)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos := mload(64)\n                        mstore(memPos, 1)\n                        return(memPos, 32)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _4 := sload(/** @src 1:2908:2920  \"_totalSupply\" */ 0x02)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, _4)\n                        return(memPos_1, 32)\n                    }\n                    case 0x2004ffd9 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(0, /** @src 5:879:889  \"msg.sender\" */ caller())\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0x20, /** @src 5:866:878  \"lastMintTime\" */ 0x05)\n                        /// @src 5:866:968  \"lastMintTime[msg.sender] == 0 ||...\"\n                        let expr := /** @src 5:866:895  \"lastMintTime[msg.sender] == 0\" */ iszero(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sload(keccak256(0, 64)))\n                        /// @src 5:866:968  \"lastMintTime[msg.sender] == 0 ||...\"\n                        if iszero(expr)\n                        {\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0, /** @src 5:879:889  \"msg.sender\" */ caller())\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0x20, /** @src 5:866:878  \"lastMintTime\" */ 0x05)\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            let _5 := sload(keccak256(0, 64))\n                            /// @src 5:866:968  \"lastMintTime[msg.sender] == 0 ||...\"\n                            expr := /** @src 5:915:968  \"block.timestamp > lastMintTime[msg.sender] + interval\" */ gt(/** @src 5:915:930  \"block.timestamp\" */ timestamp(), /** @src 5:933:968  \"lastMintTime[msg.sender] + interval\" */ checked_add_uint256(_5, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sload(/** @src 5:960:968  \"interval\" */ 0x06)))\n                        }\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        if iszero(expr)\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 0x20)\n                            mstore(add(memPtr, 36), 38)\n                            mstore(add(memPtr, 68), \"You need to wait an hour between\")\n                            mstore(add(memPtr, 100), \" mints\")\n                            revert(memPtr, 132)\n                        }\n                        /// @src 1:7509:7530  \"account == address(0)\"\n                        let _6 := iszero(/** @src 5:879:889  \"msg.sender\" */ caller())\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        if /** @src 1:7509:7530  \"account == address(0)\" */ _6\n                        /// @src 1:7505:7596  \"if (account == address(0)) {...\"\n                        {\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            mstore(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                            revert(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                        }\n                        let _7 := sload(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02)\n                        let sum := /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0\n                        sum := add(_7, /** @src 5:1060:1081  \"100000000000000000000\" */ 0x056bc75e2d63100000)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        if gt(_7, sum)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 0x24)\n                        }\n                        sstore(/** @src 1:6214:6235  \"_totalSupply += value\" */ 0x02, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sum)\n                        /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n                        _6 := /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0\n                        mstore(0, /** @src 5:879:889  \"msg.sender\" */ caller())\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0x20, 0)\n                        let dataSlot_2 := keccak256(0, 64)\n                        sstore(dataSlot_2, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot_2), /** @src 5:1060:1081  \"100000000000000000000\" */ 0x056bc75e2d63100000))\n                        /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                        let _8 := /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                        mstore(_8, /** @src 5:1060:1081  \"100000000000000000000\" */ 0x056bc75e2d63100000)\n                        /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                        log3(_8, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x20, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 5:879:889  \"msg.sender\" */ caller())\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0, /** @src 5:879:889  \"msg.sender\" */ caller())\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(0x20, /** @src 5:866:878  \"lastMintTime\" */ 0x05)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        sstore(keccak256(0, 64), /** @src 5:1119:1134  \"block.timestamp\" */ timestamp())\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        return(0, 0)\n                    }\n                    case 0x22a90082 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        if iszero(/** @src 5:1487:1506  \"msg.sender == owner\" */ eq(/** @src 5:1487:1497  \"msg.sender\" */ caller(), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ and(sload(/** @src 5:1501:1506  \"owner\" */ 0x07), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))))\n                        {\n                            let memPtr_1 := mload(64)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, 4), 32)\n                            mstore(add(memPtr_1, 36), 9)\n                            mstore(add(memPtr_1, 68), \"Not owner\")\n                            revert(memPtr_1, 100)\n                        }\n                        sstore(/** @src 5:1412:1435  \"interval = _newInterval\" */ 0x06, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ calldataload(4))\n                        return(0, 0)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value1 := abi_decode_address_4963()\n                        let value_1 := calldataload(68)\n                        let _9 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _9)\n                        mstore(32, 1)\n                        let dataSlot_3 := keccak256(0, 64)\n                        /// @src 1:3638:3665  \"_allowances[owner][spender]\"\n                        let dataSlot_4 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ and(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 1:3638:3656  \"_allowances[owner]\" */ dataSlot_3)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_4 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        let _10 := sload(/** @src 1:3638:3665  \"_allowances[owner][spender]\" */ dataSlot_4)\n                        /// @src 1:10557:10866  \"if (currentAllowance < type(uint256).max) {...\"\n                        if /** @src 1:10561:10597  \"currentAllowance < type(uint256).max\" */ lt(_10, /** @src 1:10580:10597  \"type(uint256).max\" */ not(0))\n                        /// @src 1:10557:10866  \"if (currentAllowance < type(uint256).max) {...\"\n                        {\n                            /// @src 1:10613:10743  \"if (currentAllowance < value) {...\"\n                            if /** @src 1:10617:10641  \"currentAllowance < value\" */ lt(_10, value_1)\n                            /// @src 1:10613:10743  \"if (currentAllowance < value) {...\"\n                            {\n                                /// @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                mstore(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\" */ shl(225, 0x7dc7a0d9))\n                                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, /** @src 4:735:745  \"msg.sender\" */ caller())\n                                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(36, _10)\n                                mstore(68, value_1)\n                                /// @src 1:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                revert(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, 100)\n                            }\n                            /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                            if /** @src 1:9794:9813  \"owner == address(0)\" */ iszero(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _9)\n                            /// @src 1:9790:9879  \"if (owner == address(0)) {...\"\n                            {\n                                /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                                mstore(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, 0)\n                                /// @src 1:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                                revert(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                            }\n                            /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                            if /** @src 1:9892:9913  \"spender == address(0)\" */ iszero(/** @src 4:735:745  \"msg.sender\" */ caller())\n                            /// @src 1:9888:9978  \"if (spender == address(0)) {...\"\n                            {\n                                /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                                mstore(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, /** @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                                mstore(4, 0)\n                                /// @src 1:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                                revert(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0, 36)\n                            }\n                            mstore(0, _9)\n                            mstore(32, 1)\n                            let dataSlot_5 := keccak256(0, 64)\n                            /// @src 1:9987:10014  \"_allowances[owner][spender]\"\n                            let dataSlot_6 := /** @src -1:-1:-1 */ 0\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ and(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                            mstore(0x20, /** @src 1:9987:10005  \"_allowances[owner]\" */ dataSlot_5)\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            dataSlot_6 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                            sstore(/** @src 1:9987:10014  \"_allowances[owner][spender]\" */ dataSlot_6, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(/** @src 1:10809:10833  \"currentAllowance - value\" */ _10, value_1))\n                        }\n                        /// @src 1:4967:4972  \"value\"\n                        fun_transfer(value0_1, value1, value_1)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, 1)\n                        return(memPos_2, 32)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, /** @src 1:2761:2763  \"18\" */ 0x12)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        return(memPos_3, 32)\n                    }\n                    case 0x6aa71d18 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 5:170:214  \"mapping(address => uint) public lastMintTime\" */ 5)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        let _11 := sload(keccak256(0, 64))\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, _11)\n                        return(memPos_4, 32)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let _12 := sload(keccak256(0, 64))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, _12)\n                        return(memPos_5, 32)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_2 := and(sload(/** @src 5:247:267  \"address public owner\" */ 7), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, value_2)\n                        return(memPos_6, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr_2 := mload(64)\n                        let ret_1 := 0\n                        let slotValue_1 := sload(4)\n                        let length_1 := 0\n                        length_1 := shr(1, slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, 1)\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_1 := and(length_1, 0x7f)\n                        }\n                        if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPtr_2, length_1)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr_2, 32), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_2, shl(5, iszero(iszero(length_1)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, 4)\n                            let dataPos_1 := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n                            let i_1 := 0\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, 32) }\n                            {\n                                mstore(add(add(memPtr_2, i_1), 32), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, 1)\n                            }\n                            ret_1 := add(add(memPtr_2, i_1), 32)\n                        }\n                        let newFreePtr_1 := add(memPtr_2, and(add(sub(ret_1, memPtr_2), 31), not(31)))\n                        if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr_2))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr_1)\n                        return(newFreePtr_1, sub(abi_encode_string(newFreePtr_1, memPtr_2), newFreePtr_1))\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        /// @src 1:3440:3445  \"value\"\n                        fun_transfer(/** @src 4:735:745  \"msg.sender\" */ caller(), /** @src 1:3440:3445  \"value\" */ value0_2, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ calldataload(36))\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, 1)\n                        return(memPos_7, 32)\n                    }\n                    case 0xc2ba4744 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let _13 := and(abi_decode_address(), sub(shl(160, 1), 1))\n                        mstore(0, _13)\n                        mstore(32, /** @src 5:1238:1250  \"lastMintTime\" */ 0x05)\n                        /// @src 5:1238:1332  \"lastMintTime[_address] == 0 ||...\"\n                        let expr_1 := /** @src 5:1238:1265  \"lastMintTime[_address] == 0\" */ iszero(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sload(keccak256(0, 64)))\n                        /// @src 5:1238:1332  \"lastMintTime[_address] == 0 ||...\"\n                        if iszero(expr_1)\n                        {\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            mstore(0, _13)\n                            mstore(32, /** @src 5:1238:1250  \"lastMintTime\" */ 0x05)\n                            /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                            let _14 := sload(keccak256(0, 64))\n                            /// @src 5:1238:1332  \"lastMintTime[_address] == 0 ||...\"\n                            expr_1 := /** @src 5:1281:1332  \"block.timestamp > lastMintTime[_address] + interval\" */ gt(/** @src 5:1281:1296  \"block.timestamp\" */ timestamp(), /** @src 5:1299:1332  \"lastMintTime[_address] + interval\" */ checked_add_uint256(_14, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sload(/** @src 5:1324:1332  \"interval\" */ 0x06)))\n                        }\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, iszero(iszero(expr_1)))\n                        return(memPos_8, 32)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        let value1_1 := abi_decode_address_4963()\n                        mstore(0, and(value0_3, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 1:3638:3649  \"_allowances\" */ 0x01)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        let dataSlot_7 := keccak256(0, 64)\n                        /// @src 1:3638:3665  \"_allowances[owner][spender]\"\n                        let dataSlot_8 := /** @src -1:-1:-1 */ 0\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ and(value1_1, sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 1:3638:3656  \"_allowances[owner]\" */ dataSlot_7)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        dataSlot_8 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                        let _15 := sload(/** @src 1:3638:3665  \"_allowances[owner][spender]\" */ dataSlot_8)\n                        /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, _15)\n                        return(memPos_9, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                mcopy(add(headStart, 64), add(value0, 32), length)\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address_4963() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            /// @ast-id 381 @src 1:5374:5674  \"function _transfer(address from, address to, uint256 value) internal {...\"\n            function fun_transfer(var_from, var_to, var_value)\n            {\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                let _1 := and(/** @src 1:5457:5475  \"from == address(0)\" */ var_from, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:5457:5475  \"from == address(0)\"\n                let _2 := iszero(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                /// @src 1:5453:5539  \"if (from == address(0)) {...\"\n                if /** @src 1:5457:5475  \"from == address(0)\" */ _2\n                /// @src 1:5453:5539  \"if (from == address(0)) {...\"\n                {\n                    /// @src 1:5498:5528  \"ERC20InvalidSender(address(0))\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:5498:5528  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                    /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:5498:5528  \"ERC20InvalidSender(address(0))\" */ 4, /** @src 1:5473:5474  \"0\" */ 0x00)\n                    /// @src 1:5498:5528  \"ERC20InvalidSender(address(0))\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 36)\n                }\n                let _3 := and(/** @src 1:5552:5568  \"to == address(0)\" */ var_to, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:5552:5568  \"to == address(0)\"\n                let _4 := iszero(/** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _3)\n                /// @src 1:5548:5634  \"if (to == address(0)) {...\"\n                if /** @src 1:5552:5568  \"to == address(0)\" */ _4\n                /// @src 1:5548:5634  \"if (to == address(0)) {...\"\n                {\n                    /// @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                    /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\" */ 4, /** @src 1:5473:5474  \"0\" */ 0x00)\n                    /// @src 1:5591:5623  \"ERC20InvalidReceiver(address(0))\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 36)\n                }\n                /// @src 1:6074:6614  \"if (from == address(0)) {...\"\n                _2 := /** @src 1:5473:5474  \"0\" */ 0x00\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                let _5 := sload(keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x40))\n                /// @src 1:6317:6432  \"if (fromBalance < value) {...\"\n                if /** @src 1:6321:6340  \"fromBalance < value\" */ lt(_5, var_value)\n                /// @src 1:6317:6432  \"if (fromBalance < value) {...\"\n                {\n                    /// @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ shl(226, 0x391434e3))\n                    /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                    mstore(/** @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ 4, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                    mstore(36, _5)\n                    mstore(68, var_value)\n                    /// @src 1:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    revert(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 100)\n                }\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _1)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                sstore(keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x40), sub(/** @src 1:6570:6589  \"fromBalance - value\" */ _5, var_value))\n                /// @src 1:6624:7049  \"if (to == address(0)) {...\"\n                _4 := /** @src 1:5473:5474  \"0\" */ 0x00\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                mstore(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ _3)\n                mstore(0x20, /** @src 1:5473:5474  \"0\" */ 0x00)\n                /// @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\"\n                let dataSlot := keccak256(/** @src 1:5473:5474  \"0\" */ 0x00, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 0x40)\n                sstore(dataSlot, add(sload(/** @src 1:7002:7024  \"_balances[to] += value\" */ dataSlot), /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ var_value))\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                let _6 := /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ mload(64)\n                mstore(_6, var_value)\n                /// @src 1:7064:7089  \"Transfer(from, to, value)\"\n                log3(_6, /** @src 5:115:1540  \"contract MintableERC20 is ERC20 {...\" */ 32, /** @src 1:7064:7089  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _1, _3)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122096c7060d23eeb01c431cf055c793c7c84f84fab146bf461a38dead0817ef51d164736f6c634300081c0033\"\n    }\n}\n",
          "hash": "6ea743178d6ded56bf8a1f57b00f5eb931c9a76a90552bcb334d15144275c3f6",
          "factoryDependencies": {}
        }
      }
    }
  }
}